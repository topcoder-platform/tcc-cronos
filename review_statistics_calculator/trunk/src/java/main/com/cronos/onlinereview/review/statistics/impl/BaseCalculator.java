/*
 * Copyright (C) 2010 TopCoder Inc., All Rights Reserved.
 */
package com.cronos.onlinereview.review.statistics.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.cronos.onlinereview.review.statistics.Configurable;
import com.cronos.onlinereview.review.statistics.StatisticsCalculatorConfigurationException;
import com.topcoder.configuration.ConfigurationAccessException;
import com.topcoder.configuration.ConfigurationObject;
import com.topcoder.management.review.data.Comment;
import com.topcoder.management.review.data.Item;
import com.topcoder.management.review.data.Review;
import com.topcoder.util.log.Log;
import com.topcoder.util.log.LogFactory;

/**
 * <p>
 * This is a base class for TimelineReliabilityCalculator, CoverageCalculator and AccuracyCalculator implementations
 * provided in this component. It simply holds Logging Wrapper logger and minimum coefficient value to be used by
 * subclasses and performs initialization of these parameters using Configuration API.
 * </p>
 *
 * <p>
 * <b>Thread Safety</b>: This class is immutable and thread safe assuming that configure() method will be called just
 * once right after instantiation, before calling any business method.
 * </p>
 *
 * @author saarixx, TCSDEVELOPER
 * @version 1.0
 */
public abstract class BaseCalculator implements Configurable {
    /**
     * <p>
     * The logger used by subclasses for logging errors and debug information.
     * </p>
     *
     * <p>
     * Is initialized in configure() method and never changed after that. If is null after initialization, logging is
     * not performed. Has a protected getter to be used by subclasses.
     * </p>
     */
    private Log log = null;

    /**
     * <p>
     * The minimum coefficient value that can be generated by this calculator.
     * </p>
     *
     * <p>
     * Is initialized in configure() method and never changed after that. Cannot be negative after initialization. Has
     * a protected getter.
     * </p>
     */
    private double minimumCoefficient = 0.0;

    /**
     * Creates an instance of BaseCalculator.
     */
    protected BaseCalculator() {
        // does nothing
    }

    /**
     * Configures this instance with use of the given configuration object.
     *
     * <pre>
     * Configuration example:
     * &lt;Property name="loggerName"&gt;
     *    &lt;Value&gt;myLogger&lt;/Value&gt;
     * &lt;/Property&gt;
     * &lt;Property name="minimumCoefficient"&gt;
     *    &lt;Value&gt;0.8&lt;/Value&gt;
     * &lt;/Property&gt;
     * </pre>
     *
     * @param config the configuration object
     *
     * @throws IllegalArgumentException if configuration object is null
     * @throws StatisticsCalculatorConfigurationException if some error occurred when initializing an instance using
     *             the given configuration
     */
    public void configure(ConfigurationObject config) {
        Helper.checkNull(config, "config");

        String loggerName;
        try {
            // Get the logger name
            loggerName = (String) config.getPropertyValue("loggerName");
            Helper.checkEmptyLogger(loggerName, "loggerName");

            // If logger name is null, logging will not be done
            if (loggerName != null) {
                log = LogFactory.getLog(loggerName);
            }

            // Get the minimum coefficient value. Should be between 0 and 1.
            String coefficient = (String) config.getPropertyValue("minimumCoefficient");
            if (coefficient != null) {
                minimumCoefficient = Double.parseDouble(coefficient);
                if (minimumCoefficient < 0.0 || minimumCoefficient > 1.0) {
                    throw new StatisticsCalculatorConfigurationException("'minimumCoefficient' "
                        + "must be inside [0, 1] range.");
                }
            }
        } catch (ClassCastException e) {
            throw new StatisticsCalculatorConfigurationException(e.getMessage(), e);
        } catch (IllegalArgumentException e) {
            throw new StatisticsCalculatorConfigurationException(e.getMessage(), e);
        } catch (ConfigurationAccessException e) {
            throw new StatisticsCalculatorConfigurationException(e.getMessage(), e);
        }
    }

    /**
     * Retrieves the logger used by subclasses for logging errors and debug information.
     *
     * @return the logger used by subclasses for logging errors and debug information
     */
    protected Log getLog() {
        return log;
    }

    /**
     * Retrieves the minimum coefficient value that can be generated by this calculator.
     *
     * @return the minimum coefficient value that can be generated by this calculator
     */
    protected double getMinimumCoefficient() {
        return minimumCoefficient;
    }

    /**
     * Gets all comments associated with the Review.
     *
     * @param review the review.
     *
     * @return comments associated with the Review
     */
    protected List<Comment> getComments(Review review) {
        // Get all comments associated with the review itself
        Comment[] comments = review.getAllComments();

        // Create list for all comments for this review (it will include comments of all review items)
        List<Comment> allComments = new ArrayList<Comment>();

        // Add all elements from comments to allComments
        allComments.addAll(Arrays.asList(comments));

        // Get all review items
        Item[] reviewItems = review.getAllItems();

        for (Item reviewItem : reviewItems) {
            // Get all comments for this review item
            comments = reviewItem.getAllComments();

            // Add all elements from comments to allComments
            allComments.addAll(Arrays.asList(comments));
        }

        return allComments;
    }
}
