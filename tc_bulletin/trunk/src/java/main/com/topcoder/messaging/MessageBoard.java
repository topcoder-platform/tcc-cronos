/*
 * Copyright (C) 2008 TopCoder Inc., All Rights Reserved.
 */
package com.topcoder.messaging;

import com.topcoder.configuration.ConfigurationAccessException;
import com.topcoder.configuration.ConfigurationObject;

import com.topcoder.messaging.persistence.InformixMessageBoardPersistence;
import com.topcoder.util.objectfactory.InvalidClassSpecificationException;
import com.topcoder.util.objectfactory.ObjectFactory;
import com.topcoder.util.objectfactory.impl.ConfigurationObjectSpecificationFactory;
import com.topcoder.util.objectfactory.impl.IllegalReferenceException;
import com.topcoder.util.objectfactory.impl.SpecificationConfigurationException;

import java.util.Date;
import java.util.List;
import java.util.Set;

/**
 * <p>
 * This class is the main class of the component. It has a field of MessageBoardPersistence type
 * used to work with the persistence storage. It has other two fields that indicate the maximum size
 * for a message and the number of messages the persistence should return for a request. It has
 * various methods that allows a user to manipulate threads, messages and responses.
 * </p>
 * <p>
 * <b>Sample usage :</b></br/>
 * 
 * <pre>
 * // create a MessageBoard instance
 * MessageBoardPersistence persistence = new InformixMessageBoardPersistence(
 *         &quot;test_files/config.properties&quot;, &quot;InformixMessageBoardPersistence&quot;);
 * MessageBoard mb = new MessageBoard(persistence, 200, 1000);
 * 
 * // create a new thread; the id will not be set; it will be generated by the
 * // persistence when the thread will be persisted
 * Thread thread = new Thread();
 * String userKey = &quot;userKey1&quot;;
 * thread.setUserKey(userKey);
 * 
 * Message message1 = new Message(&quot;message1&quot;, new Date(), &quot;some message&quot;);
 * Message message2 = new Message(&quot;message2&quot;, new Date(), &quot;some message&quot;);
 * Response response1 = new Response(&quot;response1&quot;, new Date(), &quot;some message&quot;);
 * Response response2 = new Response(&quot;response2&quot;, new Date(), &quot;some message&quot;);
 * message1.setResponse(response1);
 * message2.setResponse(response2);
 * thread.addMessage(message1);
 * thread.addMessage(message2);
 * 
 * // create the thread into persistence; the thread has no messages
 * thread = mb.createThread(thread);
 * 
 * // the thread now has an id that was generated by the persistence.
 * 
 * // adding a message to the created thread, in persistence, can be done in
 * // two ways; one is to add a message to the thread and then update the
 * // thread, the other way is to use the id of the thread and call a method
 * // that takes the thread id and the message as parameters.
 * 
 * // create a Message without setting the id
 * Message message3 = new Message(&quot;message3&quot;, new Date(), &quot;some message&quot;);
 * 
 * // the created message has no response yet
 * // add an attribute to the message
 * MessageAttribute ma = new MessageAttribute(&quot;someName&quot;, &quot;someValue&quot;);
 * message3.addAttribute(ma);
 * 
 * // add the message to the thread (post the message)
 * mb.postMessage(thread.getId(), message3);
 * 
 * // the thread created above now has a message
 * 
 * // create another Message without setting the id
 * Message message4 = new Message(&quot;message4&quot;, new Date(), &quot;some message&quot;);
 * 
 * // the created message has no response yet
 * 
 * // add the message to the thread
 * boolean added = thread.addMessage(message4);
 * 
 * // update thread in persistence
 * mb.updateThread(thread);
 * 
 * // the thread created in this demo now has two messages without responses
 * 
 * // create a response without setting the id
 * Response response = new Response(&quot;response&quot;, new Date(), &quot;some message&quot;);
 * // add the response to the message1 (post response)
 * mb.postResponse(message1.getId(), response);
 * 
 * // message1 now has a response
 * 
 * // add some more messages to the thread.
 * 
 * // get the first ten messages from the thread created in this demo
 * List&lt;Message&gt; messages = mb.getMessages(thread.getId(), 0, 9);
 * 
 * // get the first ten messages from the thread created in this demo using
 * // the user key
 * List&lt;Message&gt; messages2 = mb.getMessages(thread.getUserKey(), 0, 9);
 * 
 * // remove the response of the message1
 * mb.removeResponse(message1.getId());
 * mb.removeResponse(message2.getId());
 * 
 * // remove messages
 * mb.removeMessage(message1.getId());
 * mb.removeMessage(message2.getId());
 * mb.removeMessage(message4.getId());
 * 
 * // remove the thread
 * mb.deleteThread(thread.getId());
 * </pre>
 * 
 * </p>
 * <p>
 * Thread safe: This class it is immutable but it is not completely thread safe. The persistence is
 * not guaranteed to be thread safe. Also this class works with entities which are not thread safe.
 * </p>
 * 
 * @author DanLazar, yqw
 * @version 2.0
 */
public class MessageBoard {
    /**
     * The key in the configuration for maxMessageSize.
     */
    private static final String MAXMESSAGESIZEKEY = "max_message_size";

    /**
     * The key in the configuration for message count.
     */
    private static final String MESSAGECOUNTKEY = "message_count";

    /**
     * The key in the configuration for object_factory_child_name.
     */
    private static final String OBJECTFACTORY = "object_factory_child_name";

    /**
     * The key in the configuration for persistence.
     */
    private static final String PERSISTENCEKEY = "persistence_key";

    /**
     * The key in the configuration for error_messages_child_name.
     */
    private static final String ERRORMESSAGES = "error_messages_child_name";

    /**
     * The persistence used to access the persistent storage. It will be initialized in constructors
     * and never changed. It cannot be null after initialization. It is used in all methods.
     */
    private final MessageBoardPersistence persistence;

    /**
     * The maximum message size. It will be initialized in constructors and never changed. This
     * field can be initialized in constructors to -1 meaning that the messages can have any size.
     * Valid values: -1 and >0. It will be used in two getMessages methods.
     */
    private final int maxMessageSize;

    /**
     * Represents the number of messages to be retrieved for a request. If user does not provide a
     * value for this field, then it will be set to 1000 meaning that a maximum of 1000 messages
     * will be retrieved for a request (a call to getMessages methods). Valid values: >0.
     */
    private final int messageCount;

    /**
     * Creates a new instance using a ConfigurationObject.
     * 
     * @param configuration
     *            the configuration object
     * 
     * @throws IllegalArgumentException
     *             if arg is null
     * @throws MessageBoardConfigurationException
     *             if errors occur when reading the configured properties or if any required
     *             property is missing
     */
    public MessageBoard(ConfigurationObject configuration)
            throws MessageBoardConfigurationException {
        try {
            this.maxMessageSize = getIntProperty(MAXMESSAGESIZEKEY,
                    configuration);
            this.messageCount = getIntProperty(MESSAGECOUNTKEY, configuration);

            String factoryChildName = Helper.getStringProperty(OBJECTFACTORY,
                    configuration, true);

            // get the child
            ConfigurationObject child = configuration
                    .getChild(factoryChildName);
            ConfigurationObjectSpecificationFactory cosf = new ConfigurationObjectSpecificationFactory(
                    child);
            ObjectFactory of = new ObjectFactory(cosf);
            String persistenceValue = Helper.getStringProperty(PERSISTENCEKEY,
                    configuration, true);
            this.persistence = (MessageBoardPersistence) of
                    .createObject(persistenceValue);

            // set the error messages.
            String errorMessagesChildName = Helper.getStringProperty(
                    ERRORMESSAGES, configuration, false);

            if (errorMessagesChildName != null) {
                child = configuration.getChild(errorMessagesChildName);

                if (child != null) {
                    // from this child get all keys and then for each key get the value
                    String[] names = child.getAllPropertyKeys();

                    for (String name : names) {
                        String value = (String) child.getPropertyValue(name);
                        ErrorMessagesCache.addErrorMessage(name, value);
                    }
                }
            }
        } catch (ConfigurationAccessException e) {
            throw new MessageBoardConfigurationException(Helper
                    .getErrorMessage(ErrorMessagesCache.CONFIGURATION, e
                            .getMessage()), e);
        } catch (IllegalReferenceException e) {
            throw new MessageBoardConfigurationException(Helper
                    .getErrorMessage(ErrorMessagesCache.CONFIGURATION, e
                            .getMessage()), e);
        } catch (SpecificationConfigurationException e) {
            throw new MessageBoardConfigurationException(Helper
                    .getErrorMessage(ErrorMessagesCache.CONFIGURATION, e
                            .getMessage()), e);
        } catch (InvalidClassSpecificationException e) {
            throw new MessageBoardConfigurationException(Helper
                    .getErrorMessage(ErrorMessagesCache.CONFIGURATION, e
                            .getMessage()), e);
        } catch (ClassCastException e) {
            throw new MessageBoardConfigurationException(Helper
                    .getErrorMessage(ErrorMessagesCache.CONFIGURATION, e
                            .getMessage()), e);
        }
    }

    /**
     * Creates a new instance with a persistence.
     * 
     * @throws IllegalArgumentException
     *             if arg is null
     * 
     * @param persistence
     *            the persistence
     */
    public MessageBoard(MessageBoardPersistence persistence) {
        maxMessageSize = -1;
        messageCount = 1000;
        Helper.checkNull(persistence, "persistence");

        this.persistence = persistence;
    }

    /**
     * Creates a new instance with maxMessageSize,messageCount and persistence.
     * 
     * @throws IllegalArgumentException
     *             if persistence is null or maxMesageSize is 0 or <-1 or if messageCount<=0.
     * 
     * @param persistence
     *            the persistence
     * @param messageCount
     *            number of messages to be returned for request
     * @param maxMessageSize
     *            maximum message size
     */
    public MessageBoard(MessageBoardPersistence persistence,
            int maxMessageSize, int messageCount) {
        if ((maxMessageSize == 0) || (maxMessageSize < -1)) {
            throw new IllegalArgumentException(Helper.getErrorMessage(
                    ErrorMessagesCache.INVALID_ARGUMENT,
                    "The maxMessageSize should not be 0 or negative. maxMessageSize="
                            + maxMessageSize));
        }

        if (messageCount <= 0) {
            throw new IllegalArgumentException(Helper.getErrorMessage(
                    ErrorMessagesCache.INVALID_ARGUMENT,
                    "The messageCount should not be 0 or negative. messageCount="
                            + messageCount));
        }

        Helper.checkNull(persistence, "persistence");
        this.persistence = persistence;
        this.maxMessageSize = maxMessageSize;
        this.messageCount = messageCount;
    }

    /**
     * Get long value for the configuration. if not found then return -1.
     * 
     * @param propertyName
     *            the property name.
     * @param configuration
     *            the configuration object.
     * @return the long value in the configuration object, -1 if not found.
     * @throws ConfigurationAccessException
     *             if any error while reading the property.
     */
    private static int getIntProperty(String propertyName,
            ConfigurationObject configuration)
            throws ConfigurationAccessException {
        Integer value = (Integer) configuration.getPropertyValue(propertyName);

        if (value == null) {
            value = -1;
        }

        if ((value == -1) && MESSAGECOUNTKEY.equals(propertyName)) {
            value = 1000;
        }

        return value;
    }

    /**
     * Creates a new thread in persistence.
     * 
     * @param thread
     *            the thread to be created into persistence
     * @return the thread with its id set
     * 
     * @throws IllegalArgumentException
     *             if arg is null or if its id >=0 or if any message id >=0 or if any message size
     *             is greater than maxMessageSize
     * @throws MessageBoardPersistenceException
     *             if errors occurs when accessing the persistence
     */
    public Thread createThread(Thread thread)
            throws MessageBoardPersistenceException {
        if (thread != null) {
            Set<Message> set = thread.getMessages();

            for (Message message : set) {
                if ((message.getMessage() != null)
                        && (message.getMessage().length() > this.maxMessageSize)) {
                    throw new IllegalArgumentException(Helper.getErrorMessage(
                            ErrorMessagesCache.MESSAGE_SIZE_EXCEEDED,
                            "The message size exceeded. the real message size is "
                                    + message.getMessage().length()
                                    + ", but the maxMessageSize is "
                                    + maxMessageSize));
                }
            }
        }

        return persistence.createThread(thread);
    }

    /**
     * Updates a thread in persistence.
     * 
     * @param thread
     *            the thread to be updated
     * 
     * @throws IllegalArgumentException
     *             if arg is null or if its id < 0 or if any message size is greater than
     *             maxMessageSize
     * @throws MessageBoardPersistenceException
     *             if errors occurs when accessing the persistence
     * @throws EntityNotFoundException
     *             if the given entity does not exist
     */
    public void updateThread(Thread thread)
            throws MessageBoardPersistenceException, EntityNotFoundException {
        if (thread != null) {
            Set<Message> set = thread.getMessages();

            for (Message message : set) {
                if ((message.getMessage() != null)
                        && (message.getMessage().length() > this.maxMessageSize)) {
                    throw new IllegalArgumentException(Helper.getErrorMessage(
                            ErrorMessagesCache.MESSAGE_SIZE_EXCEEDED,
                            "The message size exceeded. the real message size is "
                                    + message.getMessage().length()
                                    + ", but the maxMessageSize is "
                                    + maxMessageSize));
                }
            }
        }

        persistence.updateThread(thread);
    }

    /**
     * Deletes a thread from persistence.
     * 
     * @param threadID
     *            the thread id
     * 
     * @throws IllegalArgumentException
     *             if id < 0
     * @throws MessageBoardPersistenceException
     *             if errors occurs when accessing the persistence
     * @throws EntityNotFoundException
     *             if there is no thread with the given id in persistence
     */
    public void deleteThread(long threadID)
            throws MessageBoardPersistenceException, EntityNotFoundException {
        persistence.deleteThread(threadID);
    }

    /**
     * Gets the thread with the given id from persistence.
     * 
     * @param threadID
     *            the thread id
     * @return the Thread identified by id
     * 
     * @throws IllegalArgumentException
     *             if id < 0
     * @throws MessageBoardPersistenceException
     *             if errors occurs when accessing the persistence
     * @throws EntityNotFoundException
     *             if there is no thread with the given id in persistence
     */
    public Thread getThread(long threadID)
            throws MessageBoardPersistenceException, EntityNotFoundException {
        return persistence.getThread(threadID);
    }

    /**
     * Gets the thread with the given user key from persistence.
     * 
     * @param userKey
     *            the user key
     * @return the thread identified by user key
     * 
     * @throws IllegalArgumentException
     *             if userKey is null or empty string
     * @throws MessageBoardPersistenceException
     *             if errors occurs when accessing the persistence
     * @throws EntityNotFoundException
     *             if there is no thread with the given user key in persistence
     */
    public Thread getThread(String userKey)
            throws MessageBoardPersistenceException, EntityNotFoundException {
        return persistence.getThread(userKey);
    }

    /**
     * Gets all threads from persistence. Messages for each thread will also be retrieved.
     * 
     * @return a list of threads or an empty list if there are no threads
     * 
     * @throws MessageBoardPersistenceException
     *             if errors occurs when accessing the persistence
     */
    public List<Thread> getAllThreads() throws MessageBoardPersistenceException {
        return persistence.getAllThreads();
    }

    /**
     * Gets messages from the thread indicated by thread id. Messages will be returned starting from
     * the thread with index = "from" argument; count indicates how many messages will be returned.
     * If the remaining messages are less than count then only those messages will be returned.
     * 
     * @param threadID
     *            the thread id
     * @param count
     *            number of messages
     * @param from
     *            starting index
     * @return a list of messages or an empty list if there are no more messages from the given
     *         index
     * 
     * @throws IllegalArgumentException
     *             if id < 0
     * @throws MessageBoardPersistenceException
     *             if errors occurs when accessing the persistence
     */
    public List<Message> getMessages(long threadID, int from, int count)
            throws MessageBoardPersistenceException {
        return persistence.getMessages(threadID, from, count);
    }

    /**
     * Gets messages from the thread indicated by thread id.
     * 
     * @param threadID
     *            thread id
     * @return a list of messages or an empty list if there are no messages
     * 
     * @throws IllegalArgumentException
     *             if id < 0
     * @throws MessageBoardPersistenceException
     *             if errors occurs when accessing the persistence
     */
    public List<Message> getMessages(long threadID)
            throws MessageBoardPersistenceException {
        return persistence.getMessages(threadID, messageCount);
    }

    /**
     * Gets messages from the thread indicated by thread user key. Messages will be returned
     * starting from the thread with index = "from" argument; count indicates how many messages will
     * be returned. If the remaining messages are less than count then only those messages will be
     * returned.
     * 
     * @param count
     *            number of messages
     * @param userKey
     *            user key
     * @param from
     *            starting index
     * @return a list of messages or an empty list if there are no more messages from the given
     *         index
     * 
     * @throws IllegalArgumentException
     *             if userKey is null or empty string
     * @throws MessageBoardPersistenceException
     *             if errors occurs when accessing the persistence
     */
    public List<Message> getMessages(String userKey, int from, int count)
            throws MessageBoardPersistenceException {
        return persistence.getMessages(userKey, from, count);
    }

    /**
     * Gets messages from the thread indicated by thread user key.
     * 
     * @param userKey
     *            the user key
     * @return a list of messages or an empty list if there are no messages
     * 
     * @throws IllegalArgumentException
     *             if user key is null or empty string
     * @throws MessageBoardPersistenceException
     *             if errors occurs when accessing the persistence
     */
    public List<Message> getMessages(String userKey)
            throws MessageBoardPersistenceException {
        return persistence.getMessages(userKey, messageCount);
    }

    /**
     * This method will update a message into persistence. The response will also be updated.
     * 
     * @param message
     *            the message
     * 
     * @throws IllegalArgumentException
     *             if message is null or if message id <0 or if message size is greater than
     *             maxMessageSize
     * @throws MessageBoardPersistenceException
     *             if errors occurs when accessing the persistence
     * @throws EntityNotFoundException
     *             if the given entity does not exist
     */
    public void updateMessage(Message message)
            throws MessageBoardPersistenceException, EntityNotFoundException {
        if ((message != null) && (message.getMessage() != null)
                && (message.getMessage().length() > maxMessageSize)) {
            throw new IllegalArgumentException(Helper.getErrorMessage(
                    ErrorMessagesCache.MESSAGE_SIZE_EXCEEDED,
                    "The message size exceeded. the real message size is "
                            + message.getMessage().length()
                            + ", but the maxMessageSize is " + maxMessageSize));
        }

        persistence.updateMessage(message);
    }

    /**
     * This method will remove a message from persistence. The response will also be removed (if it
     * exists).
     * 
     * @param messageID
     *            the message id
     * 
     * @throws IllegalArgumentException
     *             if message id <0
     * @throws MessageBoardPersistenceException
     *             if errors occurs when accessing the persistence
     * @throws EntityNotFoundException
     *             if the message is not found
     */
    public void removeMessage(long messageID)
            throws MessageBoardPersistenceException, EntityNotFoundException {
        persistence.removeMessage(messageID);
    }

    /**
     * This method will remove all messages from the thread identified by id. The responses
     * associated with the removed messages will also be removed.
     * 
     * @param threadID
     *            the thread id
     * 
     * @throws IllegalArgumentException
     *             if thread id <0
     * @throws MessageBoardPersistenceException
     *             if errors occurs when accessing the persistence
     * @throws EntityNotFoundException
     *             if there is no thread with the given id
     */
    public void removeAllMessages(long threadID)
            throws MessageBoardPersistenceException, EntityNotFoundException {
        persistence.removeAllMessages(threadID);
    }

    /**
     * This methods adds a new message for the given thread into persistence.
     * 
     * @param message
     *            the message
     * @param threadID
     *            the thread id
     * @return the message with the id set
     * 
     * @throws IllegalArgumentException
     *             if message id >=0 or thread id <0 or if message size is greater than
     *             maxMessageSize
     * @throws MessageBoardPersistenceException
     *             if errors occurs when accessing the persistence
     * @throws EntityNotFoundException
     *             if there is no thread with the given id
     */
    public Message postMessage(long threadID, Message message)
            throws MessageBoardPersistenceException, EntityNotFoundException {
        if ((message != null) && (message.getMessage() != null)
                && (message.getMessage().length() > maxMessageSize)) {
            throw new IllegalArgumentException(Helper.getErrorMessage(
                    ErrorMessagesCache.MESSAGE_SIZE_EXCEEDED,
                    "The message size exceeded. the real message size is "
                            + message.getMessage().length()
                            + ", but the maxMessageSize is " + maxMessageSize));
        }

        return persistence.postMessage(threadID, message);
    }

    /**
     * This methods adds the response for the message indicated by the id into persistence.
     * 
     * @param response
     *            the response
     * @param messageID
     *            the message id
     * @return the response with its id set
     * 
     * @throws IllegalArgumentException
     *             if message id <0 or response id >=0
     * @throws MessageBoardPersistenceException
     *             if errors occurs when accessing the persistence
     * @throws EntityNotFoundException
     *             if there is no message with the given id
     */
    public Response postResponse(long messageID, Response response)
            throws MessageBoardPersistenceException, EntityNotFoundException {
        return persistence.postResponse(messageID, response);
    }

    /**
     * This methods removes the response for the message indicated by id from persistence.
     * 
     * @param messsageID
     *            message id
     * 
     * @throws IllegalArgumentException
     *             if message id <0
     * @throws MessageBoardPersistenceException
     *             if errors occurs when accessing the persistence
     * @throws EntityNotFoundException
     *             if there is no message with the given id
     */
    public void removeResponse(long messsageID)
            throws MessageBoardPersistenceException, EntityNotFoundException {
        persistence.removeResponse(messsageID);
    }

    /**
     * This method will update a response into persistence.
     * 
     * @param response
     *            the response to be updated
     * 
     * @throws IllegalArgumentException
     *             if response is null or if response id <0
     * @throws MessageBoardPersistenceException
     *             if errors occurs when accessing the persistence
     * @throws EntityNotFoundException
     *             if the given entity does not exist
     */
    public void updateResponse(Response response)
            throws MessageBoardPersistenceException, EntityNotFoundException {
        persistence.updateResponse(response);
    }
}
