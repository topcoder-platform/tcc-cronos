/*
 * Copyright (C) 2008 TopCoder Inc., All Rights Reserved.
 */
package com.topcoder.messaging;

import com.topcoder.messaging.persistence.InformixMessageBoardPersistence;

import junit.framework.TestCase;

import java.util.Date;
import java.util.List;


/**
 * The demo of this component.
 *
 * @author yqw
 * @version 1.0
 */
public class Demo extends TestCase {
    /**
     * The demo of this component.
     *
     * @throws Exception
     *             all exception throws to JUnit.
     */
    public void testDemo() throws Exception {
        // create a MessageBoard instance
        MessageBoardPersistence persistence = new InformixMessageBoardPersistence("test_files/config.properties",
                "InformixMessageBoardPersistence");
        MessageBoard mb = new MessageBoard(persistence, 200, 1000);

        // create a new thread; the id will not be set; it will be generated by the
        // persistence when the thread will be persisted
        Thread thread = new Thread();
        String userKey = "userKey1";
        thread.setUserKey(userKey);

        Message message1 = new Message("message1", new Date(), "some message");
        Message message2 = new Message("message2", new Date(), "some message");
        Response response1 = new Response("response1", new Date(), "some message");
        Response response2 = new Response("response2", new Date(), "some message");
        message1.setResponse(response1);
        message2.setResponse(response2);
        thread.addMessage(message1);
        thread.addMessage(message2);

        // create the thread into persistence; the thread has no messages
        thread = mb.createThread(thread);

        // the thread now has an id that was generated by the persistence.

        // adding a message to the created thread, in persistence, can be done in
        // two ways; one is to add a message to the thread and then update the
        // thread, the other way is to use the id of the thread and call a method
        // that takes the thread id and the message as parameters.

        // create a Message without setting the id
        Message message3 = new Message("message3", new Date(), "some message");

        // the created message has no response yet
        // add an attribute to the message
        MessageAttribute ma = new MessageAttribute("someName", "someValue");
        message3.addAttribute(ma);

        // add the message to the thread (post the message)
        mb.postMessage(thread.getId(), message3);

        // the thread created above now has a message

        // create another Message without setting the id
        Message message4 = new Message("message4", new Date(), "some message");

        // the created message has no response yet

        // add the message to the thread
        boolean added = thread.addMessage(message4);

        // update thread in persistence
        mb.updateThread(thread);

        // the thread created in this demo now has two messages without responses

        // create a response without setting the id
        Response response = new Response("response", new Date(), "some message");
        // add the response to the message1 (post response)
        mb.postResponse(message1.getId(), response);

        // message1 now has a response

        // add some more messages to the threadâ€¦

        // get the first ten messages from the thread created in this demo
        List<Message> messages = mb.getMessages(thread.getId(), 0, 9);

        // get the first ten messages from the thread created in this demo using
        // the user key
        List<Message> messages2 = mb.getMessages(thread.getUserKey(), 0, 9);

        // remove the response of the message1
        mb.removeResponse(message1.getId());
        mb.removeResponse(message2.getId());

        // remove messages
        mb.removeMessage(message1.getId());
        mb.removeMessage(message2.getId());
        mb.removeMessage(message4.getId());

        // remove the thread
        mb.deleteThread(thread.getId());
    }
}
