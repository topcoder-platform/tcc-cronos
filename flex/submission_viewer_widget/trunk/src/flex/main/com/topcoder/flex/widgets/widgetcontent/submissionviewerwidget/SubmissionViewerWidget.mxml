<?xml version="1.0" encoding="utf-8"?>
<tc:SubmissionViewerWidgetCodeBehind xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:tc="com.topcoder.flex.widgets.widgetcontent.submissionviewerwidget.*"
    title="Submission Viewer"
    creationComplete="init()" 
    width="100%" 
    height="100%" 
    headerHeight="0"
    backgroundColor="#cfcfcf"
    
    >

    <mx:Script>
        <![CDATA[
        	import mx.controls.scrollClasses.ScrollBar;
            import mx.rpc.xml.SimpleXMLDecoder;
            import mx.events.FlexEvent;
            import mx.collections.SortField;
            import mx.collections.Sort;
            import mx.controls.Alert;
            import mx.collections.ArrayCollection;
            import mx.rpc.events.ResultEvent;
            import mx.rpc.events.FaultEvent;
            import com.topcoder.flex.widgets.widgetcontent.submissionviewerwidget.ListRenderer;
            import com.topcoder.flex.widgets.widgetcontent.submissionviewerwidget.ComboRenderer;
            import mx.rpc.soap.SOAPHeader;
	    	import mx.core.Application;
            import mx.core.Container;
            import flash.system.Security;

            
        
            import mx.collections.SortField;
            import mx.collections.Sort;
            
    	import mx.utils.ObjectUtil;

            
            private var _rankList:ArrayCollection = new ArrayCollection();
            
            [Bindable]
            private var _contestInfoList:ArrayCollection = new ArrayCollection();;
            
            [Bindable]
            private var _contestList:ArrayCollection = new ArrayCollection();
            
            [Bindable]
            private var _submissionList:ArrayCollection = new ArrayCollection();
            
            [Bindable]
            private var _purchaseTotal:int = 0;
            
             [Bindable]
            private var _selectedContestId:int;
            
            [Bindable]
            private var _purchaseMoney:String = "0.00";
            
            [Bindable]
            private var _selectedContestStatus:String = "";
            
            private var _selectedContestStatusId:int;
            
            [Bindable]
            private var _currentItemLabel:String = "";
            
            [Bindable]
            private var _purchaseList:ArrayCollection = new ArrayCollection();
            
            private var _isLocalTesting:Boolean=false;

	       
        	private var username:String = _isLocalTesting ? "user" : Application.application.parameters.username;
			private var password:String = _isLocalTesting ? "password" : "";
        	private var blazedsendpoint:String = _isLocalTesting ? "" : Application.application.parameters.blazedsendpoint;
        	private var contestServiceFacadeWsdl:String= _isLocalTesting ? "" : Application.application.parameters.contestServiceFacadeWsdl;
            
            private var _statusTypeDictionary:Dictionary = new Dictionary();
            private var _contestInfoDictionary:Dictionary = new Dictionary();
            
            private static const IMAGE_ADDRESS:String ="http://www.topcoder.com/direct/cockpit/impersonation/cockpitStudio.do?&sbmid=";
		    private static const WSSE_SECURITY:QName = new QName( "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "Security" );
		    
			private var _activeContestTypeIds:Dictionary = new Dictionary();
			private var _pastContestTypeIds:Dictionary = new Dictionary();
			private var _actionRequiredContestTypeId:int;
			private var _completedContestTypeId:int;
			private var _noWinnerChosenContestTypeId:int;
			private var _leastContestPrize:Number = 0;
		
			public static function getHeader(username:String, password:String):SOAPHeader {
				var userToken:String = "UsernameToken-"+Math.round(Math.random()*999999).toString();
				var headerXML : XML =  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
	         			<wsse:UsernameToken wsu:Id={userToken} xmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'>
		            		<wsse:Username>{username}</wsse:Username>
		            		<wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest">{password}</wsse:Password>
	         			</wsse:UsernameToken>
	      			</wsse:Security>;
	      		var header : SOAPHeader = new SOAPHeader( WSSE_SECURITY, headerXML );
	      		return header;
			}

            [Bindable]
            private var _downloadList:ArrayCollection = new ArrayCollection();
            private function init():void {
            	_maximumHeight=this.parent.height;
				_maximumWidth=this.parent.width;
				
				if (_maximumWidth < 1024) {
					_maximumWidth = 1024;
				}
				if (_maximumHeight < 597) {
					_maximumHeight = 597;
				}
						
				_minimumHeight=570;
            	_minimumWidth=370;		
            	
            	if (_isLocalTesting) {
            		Security.allowDomain("*");
					Security.allowInsecureDomain("*");
					initComponent();
            	}
            	else {
	                getDataService();
            	}
				
            	trace("Before Main width: " + main.width);
            	trace("Before Main height: " + main.height);
            	trace("Parent maximum width: " + _maximumWidth);
            	trace("Parent maximum width: " + _maximumHeight);
            	
            	_mainPageMaximumWidth=main.width;
            	_mainPageMaximumHeight=main.height;
            	
            	restore();
            }

	    	private function getDataService():void {
	    		if (!_isLocalTesting) {	
		    		dataservice.getPassword();
		    	}
            }

	     	private function processPassword(e:ResultEvent): void {
				if(e!=null && e.result!=null){
					password = e.result.toString();
				}
	
				initComponent();
		    }

	    	private function initComponent():void {
	    		trace("Initializing Component");
            	// add list of active contest types here.
            	// Active Contests should show contests with a status of: 
            	//		Active-Public = 2, 
            	//		Active = 5, 
            	//		Action Required = 6,
            	//		In Danger = 10 
            	//		or Extended = 12,
            	_activeContestTypeIds[2] = true;
            	_activeContestTypeIds[5] = true;
            	_activeContestTypeIds[6] = true;
            	_activeContestTypeIds[10] = true;
            	_activeContestTypeIds[12] = true;
            	
            	// add list of past contest types here.
            	// Past Contests should show contests with a status of:
            	//		No Winner Chosen = 7, 
            	//		Completed = 8, 
            	//		Insufficient Submissions - Rerun Possible = 11, 
            	//		or Insufficient Submissions = 13
            	_pastContestTypeIds[7] = true;
            	_pastContestTypeIds[8] = true;
            	_pastContestTypeIds[11] = true;
            	_pastContestTypeIds[13] = true;
            	
            	// add list of action required contest types here.
            	_actionRequiredContestTypeId = 6;
            	_completedContestTypeId = 8;
            	_noWinnerChosenContestTypeId = 7;
            	
            	if (!_isLocalTesting) {
	                var header:SOAPHeader=getHeader(username,password);
					ContestServiceFacadeBean.clearHeaders();
	            	ContestServiceFacadeBean.addHeader(header);
	
					ContestServiceFacadeBean.getStatusList();
	            	ContestServiceFacadeBean.getAllContests();
            	}
            	else {
					retrieveStatusList.send();
					retrieveContestService.send();
            	}
            }
            
            [Bindable] 
            private var activeSubmission:ArrayCollection = new ArrayCollection();
            
            [Bindable] 
            private var activeSubmissionForMin:ArrayCollection = new ArrayCollection();
            
            
            private function compareName(a:Object, b:Object, fields:Array = null):int {
               return ObjectUtil.stringCompare(a.contestData.name,b.contestData.name,true);
            }
            private function handleResult(event:ResultEvent=null):void {
                _contestInfoList = new ArrayCollection();
                if(event!=null && event.result!=null)
                {
                	var contests:ArrayCollection = (!_isLocalTesting ? event.result : event.result.contests.contest) as ArrayCollection;
                	var selectIdx:int=-1;
                	
                	if(!contests.sort)
        			{
        				var sort:Sort = new Sort();   
	                	sort.compareFunction = compareName;
	                	contests.sort = sort;
        			}
        			contests.refresh();
                	
                	
                	for(var i:int=0 ;i< contests.length;i++)
                	{
                		var contestInfo:Dictionary=new Dictionary();
                		var item:*=contests[i];
                		contestInfo.name=item.contestData.name;
                		contestInfo.id=item.contestData.contestId;
                		contestInfo.statusId=item.contestData.statusId;
                		
                		trace("Contest id: " + contestInfo.id);
                		trace("Contest name: " + contestInfo.name);
                		trace("Contest statusId: " + contestInfo.statusId + " = " + _statusTypeDictionary[contestInfo.statusId].name);
                		trace("");
                		
                		if (_activeContestTypeIds[contestInfo.statusId] == true 
                				|| _pastContestTypeIds[contestInfo.statusId] == true) {
                			_contestInfoList.addItem(contestInfo);
                			_contestInfoDictionary[contestInfo.id]=contestInfo;
                		}
                	}

                	doFilter();
                	
                	//contestCombo.selectedIndex=selectIdx;
                	//contestlist2.selectedIndex=selectIdx;
                }
            }
            
            private function handleStatusList(event:ResultEvent=null):void {
                if(event!=null && event.result!=null)
                {
                	var statuses:ArrayCollection = (!_isLocalTesting ? event.result : event.result.statuses.status) as ArrayCollection;
                	for(var i:int=0 ; i < statuses.length;i++)
                	{
                		var item:*=statuses[i];
                		_statusTypeDictionary[item.statusId]=item;
                	}
                }
            }
            
            private function handleSubResult(event:ResultEvent=null):void {
                
                // clear rank list first.
                _rankList.removeAll();
                
                for (var j:int = 0; j < 5; j++) {
                    _rankList.addItem(new Object());
                }
                
                _submissionList = new ArrayCollection();
                
                var sort:Sort = new Sort();
                sort.compareFunction = compareNumber;
                _submissionList.sort = sort;
                if(event && event.result!=null){
                	var submissions:ArrayCollection=new ArrayCollection();
                	if((_isLocalTesting && event.result.submissions.submission is ArrayCollection)
                	|| (!_isLocalTesting && event.result is ArrayCollection)) { 
                		submissions=event.result as ArrayCollection;
                	}
                	else {
                		submissions.addItem(event.result);
                	}
                	
                	for(var i:int=0;i<submissions.length;i++) {
                		var sub:Dictionary=new Dictionary();
                		
                		sub.id=submissions[i].submissionId;
                		sub.rank=submissions[i].rank;
                		sub.thumbnail=IMAGE_ADDRESS+sub.id+"&sbt=thumb";
                		sub.fullsizepreview=IMAGE_ADDRESS+sub.id+"&sbt=full";
                		sub.submissionContent=submissions[i].submissionContent;
                		sub.price=submissions[i].price;
                		sub.markedForPurchase=Boolean(submissions[i].markedForPurchase);
                		sub.mustPurchase=sub.rank && sub.rank > 0 && sub.price && sub.price > 0;
                		sub.purchased=sub.markedForPurchase || sub.mustPurchase;
                		
                		if (sub.price && sub.price > 0 && sub.price < _leastContestPrize) {
                			_leastContestPrize = sub.price;
                		}
                		
                		_submissionList.addItem(sub);
                		
                		updateRankList(sub);
                		updateSubmission(sub.rank && sub.rank > 0);
                		
                		trace("Submission Id: " + sub.id);
                		trace("Submission Price: " + sub.price);
                		trace("Submission rank: " + sub.rank);
                		trace("Submission markedForPurchase: " + sub.markedForPurchase);
                	}
                }
                
                setSubmissionForMin();
                
                // if there are no submissions then show no-submision screen.
                if (_submissionList.length == 0) {
                	contestViewerCenterPanel.selectedChild=noSubmissionScreen;
                	thumbnailPanel.visible=false;
                }
                else {
                	contestViewerCenterPanel.selectedChild=imageViewerScreen;
                	thumbnailPanel.visible=true;
                	thumbnailPanel.selectedChild=thumbnailPanel_enabled;
                	
                	setSubmission();
                	list.selectedIndex = 0;
                	updatePurchase();
                	handleSelect();
                }
            }
            
            private function handleFail(event:FaultEvent):void {
                handleResult();
            }
            
            private function handleSubFail(event:FaultEvent):void {
                handleSubResult();
            }
            
            private function updateRankList(item:Object):void {
                if (item.rank && (item.rank is Number || item.rank.length > 0 )) {
                    var index:int = parseInt(item.rank) - 1;
                    
                    // get if there is already an object with the given rank.
                    var obj:Object = _rankList.getItemAt(index);
                    if (obj && obj.hasOwnProperty("id") && obj.hasOwnProperty("rank")) {
                        obj.rank = "";
                        obj.mustPurchase=false;
                        obj.purchased=obj.markedForPurchase || obj.mustPurchase;
                    }
                    
                    _rankList.setItemAt(item, index);
                }
            }
            
            private function doFilter():void {
                _contestList.removeAll();
                for each (var item:* in _contestInfoList) {
                    if (showActive.selected && _activeContestTypeIds[item.statusId] == true) {
                        _contestList.addItem(item);
                    } else if (showPast.selected && _pastContestTypeIds[item.statusId] == true) {
                        _contestList.addItem(item);
                    }
                }

		// after filter, need to check select index
		for(var i:int=0 ;i< _contestList.length;i++)
                {
			var item:*=_contestList[i];
			if (item.id == this.defaultcontestid)
			{
				contestCombo.selectedIndex=i;
                		contestlist2.selectedIndex=i;
				return;
			} 
		}

            }
            
            private function removeAll(array:ArrayCollection, item:Object):int {
                if (item.hasOwnProperty("id")) {
                    for (var i:int = 0; i < array.length; i++) {
                        var obj:Object = array.getItemAt(i);
                        if (obj.hasOwnProperty("id") && obj.id == item.id) {
                            array.removeItemAt(i);
                        }
                    }
                }
                return -1;
            }
            
            private function getItemIndex(array:ArrayCollection, item:Object):int {
                if (item.hasOwnProperty("id")) {
                    for (var i:int = 0; i < array.length; i++) {
                        var obj:Object = array.getItemAt(i);
                        if (obj.hasOwnProperty("id") && obj.id == item.id) {
                            return i;
                        }
                    }
                }
                return -1;
            }
            private function goPrev():void {
                var selectedItem:* = list.selectedItem;
                var index:int = getItemIndex(_submissionList, selectedItem);
                if (index > 0) {
                    var prevItem:* = _submissionList.getItemAt(index - 1);
                    if (!activeSubmission.contains(prevItem)) {
                        goUp();
                    }
                    list.selectedItem = prevItem;
                    handleSelect();
                }
            }
            
            private function goNext():void {
                var selectedItem:* = list.selectedItem;
                var index:int = getItemIndex(_submissionList, selectedItem);
                if (index < _submissionList.length - 1) {
                    var nextItem:* = _submissionList.getItemAt(index + 1);
                    if (!activeSubmission.contains(nextItem)) {
                        goDown();
                    }
                    list.selectedItem = nextItem;
                    handleSelect();
                }
            }
            
            private var currentIndex:int = 0;
            
            private function goUp():void {
                if (currentIndex <= 0 || _submissionList.length == 0) {
                    currentIndex = 0;
                } else {
                    if (activeSubmission.getItemAt(0) == 
                            _submissionList.getItemAt(0)) {
                        // Do nothing here.
                    } else {
                        if (list.selectedIndex > activeSubmission.length - 3) {
                            list.selectedItem = activeSubmission.getItemAt(list.selectedIndex - 2);
                            handleSelect();
                        }
                        if (activeSubmission.length > 12) {
                            activeSubmission.removeItemAt(12);
                            if (activeSubmission.length > 12) {
                                activeSubmission.removeItemAt(12);
                            }
                        }
                        activeSubmission.addItemAt(_submissionList.getItemAt((currentIndex - 1) * 2), 0);
                        activeSubmission.addItemAt(_submissionList.getItemAt((currentIndex - 1) * 2 + 1) , 1);
                    }
                    currentIndex--;
                    hideShowUpDownArrow();
                }
            }
            
            private function goDown():void {
                if (currentIndex < _submissionList.length / 2 - 7 && _submissionList.length > 0) {
                    if (list.selectedIndex < 2) {
                        list.selectedItem = activeSubmission.getItemAt(list.selectedIndex + 2);
                        handleSelect();
                    }
                    
                    activeSubmission.removeItemAt(0);
                    activeSubmission.removeItemAt(0);
                    if ((currentIndex + 7) * 2 < _submissionList.length) {
                        activeSubmission.addItem(_submissionList.getItemAt((currentIndex + 7) * 2));
                        if ((currentIndex + 7) * 2 + 1 < _submissionList.length) {
                            activeSubmission.addItem(_submissionList.getItemAt((currentIndex + 7) * 2 + 1));
                        }
                    }
                    currentIndex++;
                    hideShowUpDownArrow();
                }
            }
            
            private function setSubmission():void {
                activeSubmission = new ArrayCollection();
                //trace("Clean the active submission.");
                for (var i:int = currentIndex; i < 7 + currentIndex; i++) {
                    if (i * 2 < _submissionList.length) {
                        var item:* = _submissionList.getItemAt(i * 2);
                        //trace("Get item at " + (i * 2).toString() + " with rank " + item.rank);
                        activeSubmission.addItem(_submissionList.getItemAt(i * 2));
                    } else {
                        break;
                    }
                    
                    if (i * 2 + 1 < _submissionList.length) {
                        //var item:* = _submissionList.getItemAt(i * 2 + 1);
                        //trace("Get item at " + (i * 2 + 1).toString() + " with rank " + item.rank);
                        activeSubmission.addItem(_submissionList.getItemAt(i * 2 + 1));
                    } else {
                        break;
                    }
                }
                
                hideShowUpDownArrow();
            }
            
            private function setSubmissionForMin():void {
                activeSubmissionForMin = new ArrayCollection();
                for (var i:int = 0; i < _submissionList.length && i<14; i++) {
                	 activeSubmissionForMin.addItem(_submissionList.getItemAt(i));
                }
                
            }
            
            private function hideShowUpDownArrow():void {
            	if (list.dataProvider && list.dataProvider.length > 0) {
                	up.visible = (currentIndex > 0);
                	down.visible = (list.dataProvider[list.dataProvider.length - 1].id != _submissionList.getItemAt(_submissionList.length - 1).id);
             	}              
            }
            
            private function compareNumber(a:Object, b:Object, fields:Array = null):int {
                var rank1:String = a.rank;
                var rank2:String = b.rank;
                if (!rank1 && !rank2) {
                    return 0;
                } else if (!rank1) {
                    return 1;
                } else if (!rank2) {
                    return -1;
                } else {
                    var r1:int = parseInt(rank1);
                    var r2:int = parseInt(rank2);
                    if (r1 > r2) {
                        return 1;
                    } else if (r2 > r1) {
                        return -1;
                    } else {
                        return 0;
                    }
                }
            }
            
            private function reorder():void {
                currentIndex = 0;
                var item:* = list.selectedItem;
                if (!_submissionList.sort) {
	                var sort:Sort = new Sort();
	                sort.compareFunction = compareNumber;
	                _submissionList.sort = sort;
                }
                _submissionList.refresh();
                setSubmission();
                if (activeSubmission.contains(item)) {
                    list.selectedItem = item;
                } else {
                    list.selectedIndex = 0;
                }
                
                handleSelect();
            }
            
            private function handleSelect():void {
                var currentItem:* = list.selectedItem;
                if (currentItem) {
                    _currentItemLabel = contestCombo.text + " - #" + currentItem.id;
                    currentImage.source = currentItem.fullsizepreview;
                    
                    if (currentItem.rank) {
                        rankBar.selectedIndex = parseInt(currentItem.rank) - 1;
                    } else {
                        rankBar.selectedIndex = -1;
                    }
                    
                    prev.visible = (list.selectedItem.id != _submissionList.getItemAt(0).id);
                    next.visible = (list.selectedItem.id != _submissionList.getItemAt(_submissionList.length - 1).id);
                    
                    if (currentItem.purchased == true) {
                    	purchase.selected = true;
                    } else {
                    	purchase.selected = false;
                    }
                    
                    // enable purchase box accordingly.
                    if (currentItem.mustPurchase == true) {
                    	purchase.mouseEnabled=false;
                    	purchase.mouseChildren=false;
                    	purchase.focusEnabled=false;
                    }
                    else {
                    	purchase.mouseEnabled=true;
                    	purchase.mouseChildren=true;
                    	purchase.focusEnabled=true;
                    }
                }
            }
            
            private function rankSubmission(event:Event):void {
            	updateSubmission(true);
            }
            
            private function enableRatingSelector():void {
            	rankBar.addEventListener("itemClick", rankSubmission);
            	rankBar.mouseChildren=true;
            	rankBar.mouseEnabled=true;
            	rankBar.focusEnabled=true;
            }
            
            private function disableRatingSelector():void {
            	rankBar.removeEventListener("itemClick", rankSubmission);
            	rankBar.mouseChildren=false;
            	rankBar.mouseEnabled=false;
            	rankBar.focusEnabled=false;
            }
            
            private function enablePurchaseSelector():void {
            	purchase_panel.visible=true;
            	purchasePanel.selectedChild=purchase_enabled;
            }
            
            private function contestActivePurchaseSelector():void {
            	purchase_panel.visible=true;
            	purchasePanel.selectedChild=purchase_disabled;	
            }
            
            private function disablePurchaseSelector():void {
            	purchase_panel.visible=false;	
            }
            
            private function enableNoWinnerSelector():void {
            	noWinner.visible=true;
            }
            
            private function disableNoWinnerSelector():void {
            	noWinner.visible=false;
            	noWinner.selected=false;	
            }
            
            private function handleContest(event:Event):void {
            	contestRankingErrorLbl.visible=false;
                 if (main.height>1 && contestCombo && contestCombo.selectedItem) {
                	_selectedContestId=contestCombo.selectedItem.id;
                	
                	var statusId:int = _contestInfoDictionary[_selectedContestId].statusId;
                	_selectedContestStatusId = statusId;
                    _selectedContestStatus = _statusTypeDictionary[statusId].name;
                    
                    // let's get the status of current selected contest 
                	// and accordingly activate following:
                	//		purchase box -- active for action required only
                	//		i can not choose winner -- active for action required only
                	//		rating selector -- active for any active or action required only.
                	//
                	// I can do both save as draft or continue to checkout here.
                	continue_contestViewer_btn.visible = true;
                	save_contestViewer_btn.visible = true;
                	
                	if (_selectedContestStatusId == _actionRequiredContestTypeId) {
                		enablePurchaseSelector();
                		enableNoWinnerSelector();
                		enableRatingSelector();
                	}
                	else {
                		disableNoWinnerSelector();
                		
	                	if (_activeContestTypeIds[_selectedContestStatusId] == true) {
	                		// remove continue button from here.
	                		continue_contestViewer_btn.visible = false;
	                		enableRatingSelector();	
	                		enablePurchaseSelector();
	                	}
	                	else {
	                		disableRatingSelector();
	                	}
	                	
	                	if (_pastContestTypeIds[_selectedContestStatusId] == true
	                			|| _selectedContestStatusId == _completedContestTypeId) {
	                		// remove save as draft button from here.
	                		save_contestViewer_btn.visible = false;
	                		disablePurchaseSelector();	
	                	}
                	}
                 }
                 else if(main.height<1  && contestlist2 && contestlist2.selectedItem){
                 	_selectedContestId=contestlist2.selectedItem.id;
                 }
                 
                 if(_submissionList)_submissionList.removeAll();
                 
                 if (!_isLocalTesting) {
	            	var header:SOAPHeader=getHeader(username,password);
					ContestServiceFacadeBean.clearHeaders();
	        		ContestServiceFacadeBean.addHeader(header);
	        		ContestServiceFacadeBean.retrieveSubmissionsForContest.send();
                 }
                 else {
					retrieveSubService.send();
                 }
            }
            
            private function gotoContestViewer():void {
            	main.selectedChild=contestViewer;
            }
            
            private function gotoImageViewer():void {
            	contestViewerCenterPanel.selectedChild=imageViewerScreen;
            }
            
            private function gotoAbandonScreen(id:Container):void {
            	contestViewerCenterPanel.selectedChild = id;
            	if (id == abandonedScreen_3) {
            		thumbnailPanel.selectedChild = thumbnailPanel_disabled; 
            	}
            	if (id == abandonedScreen_1) {
            		updateAbandonToWS();
            	}
            }
            
            private function continueFromContestViewer():void {
            	// action required
            	//		continue to confirmation screen if everything okay.
            	//		shows error text if  no submission selections + no winner not selected.
            	//		continue to abandon screen if no winner is selected.
            	if (_selectedContestStatusId == _actionRequiredContestTypeId) {
            		if (noWinner.selected) {
            			gotoAbandonScreen(abandonConfirmationScreen);
            		}
            		else if (!areProperRanking()) { // no submissions ranked.
            			// show error text.
            			contestRankingErrorLbl.visible=true;
            			
            		}
            		else {
            			main.selectedChild=submissionsConfirmationScreen;
            		}
            	}
            	else if (_selectedContestStatusId == _completedContestTypeId
            				|| _pastContestTypeIds[_selectedContestStatusId] == true) {
            		// TODO: do we need to check if there are earlier saved downloads.
            		continueToSubmissionDownloadScreen();
            	}
            }
            
            private function areProperRanking():Boolean {
            	var submissionsCount:int = _submissionList.length;
            	var requiredRatingCount:int = Math.min(5, submissionsCount);
            	
            	var rankingCnt:int = 0;
            	for (var i:int=0; i < _rankList.length; i++) {
            		if (_rankList[i] && _rankList[i].rank && _rankList[i].rank > 0) {
            			rankingCnt++;
            		}
            	}
            	
            	if (rankingCnt == requiredRatingCount) {
            		return true;
            	}
            	
            	return false;
            }
            
            private function continueToSubmissionCheckoutScreen():void {
            	main.selectedChild=submissionCheckoutScreen;
            }
            
            private function continueToSubmissionDownloadScreen():void {
            	main.selectedChild=submissionsDownloadScreen;
            }
            
            private function saveContestAsDraft():void {
            	// TODO: out of scope for this contest.	
            	Alert.show("NOT IN SCOPE OF THIS CONTEST");
            }
            
            private function gotoPurchase():void {
				if (pay.selectedIndex == 0) {
					var index:int = wf1.saveData();
					if (index > 0 && index <= pay.numChildren) {
						pay.selectedIndex = index - 1;
						header.text = "Confirm Your Payment";
						text1.htmlText = "You're almost done! Please confirm that the information below is correct.";
						if (sub1) {
							sub1.label = "Submit Purchase";
						}
						if (sub2) {
							sub2.label = "Submit Purchase";
						}
					}
				} else if (pay.selectedIndex == 1) {
					if (sub1.label == "Submit Purchase") {
						updatePurchaseToWS();
						header.text = "Your Transaction was Approved!";
						text1.htmlText = "Thank you for your order. An email confirmation will be sent as a receipt for this transaction. <b>Your reference # is EBFH53569DWS9.</b>";
						sub1.label = "Download Submissions";
					} else {
						pay.selectedIndex = 0;
						continueToSubmissionDownloadScreen();
					}
				} else if (pay.selectedIndex == 2) {
					if (sub2.label == "Submit Purchase") {
						updatePurchaseToWS();
						header.text = "Your Transaction was Approved!";
						text1.htmlText = "Thank you for your order. An email confirmation will be sent as a receipt for this transaction. <b>Your reference # is EBFH53569DWS9.</b>";
						sub2.label = "Download Submissions";
					} else {
						pay.selectedIndex = 0;
						continueToSubmissionDownloadScreen();
					}
				}
            }
            
            private function handleContestStatusUpdate(event:ResultEvent):void {
            	// do nothing	
            }
            
            private function handleSetSubmissionPlacement(event:ResultEvent):void {
            	// do nothing
            }
            
            private function handleMarkForPurchase(event:ResultEvent):void {
            	// do nothing
            }
            
            private function updatePurchaseToWS():void {
            	_contestInfoDictionary[_selectedContestId].statusId=_completedContestTypeId;
            	
            	if (!_isLocalTesting) {
	            	var header:SOAPHeader=getHeader(username, password);
	
					ContestServiceFacadeBean.clearHeaders();
	            	ContestServiceFacadeBean.addHeader(header);
	            	trace("Updating contest status for: " + _selectedContestId);
					ContestServiceFacadeBean.updateContestStatus(_selectedContestId, _completedContestTypeId);
					
					for (var i:int; i < _downloadList.length; i++) {
						var item:Object = _downloadList[i];
						if (item.rank && item.rank > 0) {
							ContestServiceFacadeBean.clearHeaders();
	            			ContestServiceFacadeBean.addHeader(header);
	            			trace("Updating submission placement for: " + item.id + " to: " + item.rank);
							ContestServiceFacadeBean.setSubmissionPlacement(item.id, item.rank);
						}
						
						if (item.purchased && item.mustPurchase == false) {
							ContestServiceFacadeBean.clearHeaders();
	            			ContestServiceFacadeBean.addHeader(header);
	            			trace("Marking for purchase: " + item.id);
	            			ContestServiceFacadeBean.markForPurchase(item.id);
	     				}	
					}
            	}
				
				handleContest(null);
            }
            
            private function updateAbandonToWS():void {
            	_contestInfoDictionary[_selectedContestId].statusId=_noWinnerChosenContestTypeId;
				handleContest(null);
            }
            
            private function updatePurchase():void {
            	_purchaseTotal = 0;
            	var totalMoney:Number = 0;
            	
            	_purchaseList = new ArrayCollection();
            	_downloadList = new ArrayCollection();
            	
            	for each (var item:Object in list.dataProvider) {
            		trace("Item id: " + item.id);
            		trace("Marked for purchase: " + item.markedForPurchase);
            		trace("Purchased: " + item.purchased);
            		trace("Prize: " + item.price);
            		
            		if (item.purchased && item.purchased == true) {
            			_purchaseTotal++;
            			
            			if (!item.price || item.price <= 0) {
            				totalMoney += _leastContestPrize;
            			}
            			else {
            				totalMoney += item.price;
            			}
            			
            			_purchaseList.addItem(item);
            			_downloadList.addItem(item);
            		}
            	}
            	
            	_purchaseMoney = moneyFormatter.format(totalMoney);
            	var sort:Sort = new Sort();
	            sort.compareFunction = compareNumber;
	            _downloadList.sort = sort;
	            _downloadList.refresh();
	            
	            _purchaseList.sort = sort;
	            _purchaseList.refresh();
            }
            
            private function updateSubmission(isRank:Boolean):void {
            	
            	trace("In update submission: " + list + ", " + list.selectedItem + ", " + list.dataProvider);
            	
				if (list && list.selectedItem && list.dataProvider) {
					
					var item:Object = list.dataProvider[list.selectedIndex];
					if (!item) {
						// this should never happen.
						item = new Object();
						list.dataProvider[list.selectedIndex] = item;
					}

					trace("Item.id: " + item.id);
				    trace("Item.thumbnail: " + item.thumbnail);
				    trace("Item.fullsizepreview: " + item.fullsizepreview);
				    trace("Item.markedForPurchase: " + item.markedForPurchase);
				    trace("Item.rank: " + item.rank);
				    trace("Item.price: " + item.price);
					
					if (isRank && rankBar.selectedIndex >= 0) {
						var oldItem:Object = rankBar.dataProvider[rankBar.selectedIndex];
				        trace("Selected rank is:" + rankBar.dataProvider[rankBar.selectedIndex]);
				        var rank:String = rankBar.dataProvider[rankBar.selectedIndex] as String;
				        
				        if (item.rank && rank == item.rank) {
				        	trace("removing rank for the id:" + item.id);
				            rank = "";
				            rankBar.selectedIndex = -1;
				        } 
				    	
				    	item.rank = rank;
				    } else if (!isRank) {
						item.markedForPurchase = purchase.selected;
					}
					
					// set the purchased attribute correctly.
					item.mustPurchase=item.rank && item.rank > 0 && item.price && item.price > 0;
					item.purchased=item.markedForPurchase || item.mustPurchase;
					
					trace("Item.mustPurchase: " + item.mustPurchase);
				    trace("Item.rank: " + item.rank);
				    trace("Item.markedForPurchase: " + item.markedForPurchase);
				    trace("Item.purchased: " + item.purchased);
				    
				    if (item.mustPurchase == true) {
                    	purchase.mouseEnabled=false;
                    	purchase.mouseChildren=false;
                    	purchase.focusEnabled=false;
                    }
                    else {
                    	purchase.mouseEnabled=true;
                    	purchase.mouseChildren=true;
                    	purchase.focusEnabled=true;
                    }
					
					list.dataProvider[list.selectedIndex] = item;
					
                    var index:int = getItemIndex(_submissionList, item);
                    if (index >= 0) {
                    	_submissionList.setItemAt(item, index);
                    }
                    
                	if (_rankList.contains(item)) {
                    	index = getItemIndex(_rankList, item);
                    	_rankList.setItemAt(new Object(), index);
                	}
                    
                    if (isRank) {
                    	updateRankList(item);
                    } 
                    
                    updatePurchase();
                } 
            }
            
            private function maximizeScreen() {
            	maximize();
            	handleContest(null);
            }
            
            
        ]]>
    </mx:Script>

<mx:WebService id="ContestServiceFacadeBean" 
		wsdl="{contestServiceFacadeWsdl}"> 
	<mx:operation name="getAllContests" 
		resultFormat="object" 
		result="handleResult(event)"
		fault="Alert.show(event.fault.faultString);"> 
	</mx:operation>
		
	<mx:operation name="getStatusList" 
		resultFormat="object" 
		result="handleStatusList(event)"
		fault="Alert.show(event.fault.faultString);"> 
	</mx:operation>
		
	<mx:operation name="retrieveSubmissionsForContest" 
		resultFormat="object" 
		result="handleSubResult(event)"
		fault="Alert.show(event.fault.faultString);"> 
		<mx:request>
			<arg0>{_selectedContestId}</arg0>
		</mx:request>
	</mx:operation>
	
	<mx:operation name="updateContestStatus" 
		resultFormat="object" 
		result="handleContestStatusUpdate(event)"
		fault="Alert.show(event.fault.faultString);"> 
	</mx:operation>
	
	<mx:operation name="setSubmissionPlacement" 
		resultFormat="object" 
		result="handleSetSubmissionPlacement(event)"
		fault="Alert.show(event.fault.faultString);"> 
	</mx:operation>
	
	<mx:operation name="markForPurchase" 
		resultFormat="object" 
		result="handleMarkForPurchase(event)"
		fault="Alert.show(event.fault.faultString);"> 
	</mx:operation>
</mx:WebService>

<mx:RemoteObject id="dataservice" destination="remoteDataService" endpoint="{blazedsendpoint}"
		 fault="Alert.show(event.fault.faultString);">
    <mx:method name="getPassword"  result="processPassword(event)" 
		                   fault="Alert.show(event.fault.faultString);"/>

</mx:RemoteObject>

<mx:DefaultTileListEffect id="myDTLE"
    fadeInDuration="10"
    fadeOutDuration="10"
    moveDuration="200"
    color="0xffffff"/>
<mx:Fade alphaFrom="0" alphaTo="1" duration="1000" id="fade" />
<mx:HTTPService id="retrieveStatusList" url="assets/data/statusTypes.xml"
    fault="handleFail(event)" result="handleStatusList(event)" />
<mx:HTTPService id="retrieveContestService" url="assets/data/contests.xml"
    fault="handleFail(event)" result="handleResult(event)" />
<mx:HTTPService id="retrieveSubService" url="assets/data/submission.xml"
    fault="handleSubFail(event)" result="handleSubResult(event)" />
    
<mx:NumberFormatter id="moneyFormatter" precision="2" useThousandsSeparator="true" useNegativeSign="true" />
<mx:ViewStack id="main" 
	width="100%" 
	height="100%"
	backgroundColor="#cfcfcf">
    <mx:HBox id="contestViewer" width="100%" height="100%" paddingTop="2" paddingLeft="0" paddingRight="0">
        <mx:VBox horizontalAlign="left" height="100%" width="200" 
        	backgroundColor="#cfcfcf" 
        	backgroundAlpha="1.0" 
        	verticalGap="0">
            <mx:ViewStack id="thumbnailPanel" width="100%" height="100%">
            	<mx:VBox id="thumbnailPanel_enabled" horizontalAlign="center">
	            	<mx:Button click="reorder()" label="prioritize" styleName="ButtonStyle"/>
	            	<mx:VBox horizontalAlign="center" height="100%" width="100%"
		                    paddingLeft="0" paddingRight="0" >
		                
		                <mx:Button id="up" styleName="up" click="goUp()" />
		                <mx:TileList id="list" rowCount="4" width="100%" columnCount="2"
		                        selectionDuration="0"
		                        dataProvider="{activeSubmission}" 
		                        itemRenderer="com.topcoder.flex.widgets.widgetcontent.submissionviewerwidget.ListRenderer" itemsChangeEffect="{myDTLE}"
		                        verticalScrollPolicy="off" 
		                        horizontalScrollPolicy="off" 
		                        borderStyle="none"
		                        click="handleSelect()" 
		                        allowMultipleSelection="false" 
		                        allowDragSelection="false"
		                        backgroundColor="#cfcfcf"/>
		                <mx:Button id="down" styleName="down" click="goDown()" />
		            </mx:VBox>
	            </mx:VBox>
	            <mx:VBox id="thumbnailPanel_disabled" 
	            	width="100%" height="100%" 
	            	paddingLeft="15" 
	            	paddingRight="15" 
	            	paddingTop="50">
	            	<mx:Text width="100%" text="Contest submissions are no longer viewable."
	            			fontFamily="Arial" fontSize="15" fontWeight="bold" />
	            </mx:VBox>
            </mx:ViewStack>
        </mx:VBox>
        <mx:VBox width="100%" 
        		height="100%" 
        		verticalGap="0"
        		horizontalGap="0" 
        		backgroundColor="#ffffff"
        		paddingLeft="2"
        		paddingRight="2"
        		>
            <mx:Canvas styleName="BoxStyle"
    					width="100%">
                <mx:Label text="Select a Contest to View:" left="0" top="9" 
                        styleName="normalText" paddingTop="0" paddingBottom="0" />
                <mx:ComboBox id="contestCombo" left="195" width="272" top="9" fontFamily="Arial" fontSize="10"
                        change="handleContest(event)" 
                        labelField="name" itemRenderer="com.topcoder.flex.widgets.widgetcontent.submissionviewerwidget.ComboRenderer" dataProvider="{_contestList}" />
                <mx:Label id="contestRankingErrorLbl" fontFamily="Arial" 
		                                fontWeight="bold" color="red" fontSize="14" width="600" top="38"
		                                text="Before continuing you should give All Rankings or select no winner option." visible="false"/>
                <mx:Label text="Filter By:" right="140" top="9" styleName="normalText" />
                <mx:CheckBox id="showActive" label="Active Contests" right="13" top="9" styleName="CheckBoxStyle"
                        selected="true" change="doFilter()" />
                <mx:CheckBox id="showPast" label="Past Contests" right="19" top="38" styleName="CheckBoxStyle"
                        selected="true" change="doFilter()" />
            </mx:Canvas>
            <mx:Spacer height="4"/>
            <mx:ViewStack width="100%" height="100%" id="contestViewerCenterPanel">
	            <mx:VBox id="imageViewerScreen" 
	            	horizontalAlign="center" 
	            	styleName="BoxStyle"
					width="100%" 
	            	paddingTop="5">
	            	
	            	<mx:HBox horizontalAlign="center">
	                    <mx:VBox height="100%" verticalAlign="middle">
	                        <mx:Button id="prev" styleName="prev" click="goPrev()"/>
	                    </mx:VBox>
	                    <mx:VBox height="100%" 
	                    		width="100%" 
	                    		horizontalAlign="center">
	                    	<mx:Label htmlText="{'&lt;b&gt;' + _currentItemLabel + '&lt;/b&gt;' + ' (Status: ' + _selectedContestStatus + ')'}" 
	                    		fontFamily="Arial"
	                    		textAlign="center" 
		                        fontSize="14" 
		                        width="100%" />
	                        <mx:VBox verticalAlign="middle" horizontalAlign="center"
	                        		paddingLeft="2" paddingRight="2" paddingBottom="2" paddingTop="2" 
	                                borderStyle="solid" width="526" height="276">
	                            <mx:Image id="currentImage" maxWidth="520" maxHeight="270" completeEffect="{fade}" />
	                        </mx:VBox>
	                        <mx:HBox width="100%" horizontalAlign="center" >
		                        <mx:ToggleButtonBar horizontalAlign="center" horizontalGap="20"  
		                                id="rankBar" selectedIndex="-1"
		                                buttonWidth="25" 
		                                buttonHeight="26" 
		                                buttonStyleName="rankButton">
		                            <mx:String>1</mx:String>
		                            <mx:String>2</mx:String>
		                            <mx:String>3</mx:String>
		                            <mx:String>4</mx:String>
		                            <mx:String>5</mx:String>
		                        </mx:ToggleButtonBar>
		                        <mx:Spacer width="100%" />
		                        <mx:CheckBox id="noWinner" label="I can not choose a winner." styleName="CheckBoxStyle" />
	                        </mx:HBox>
	                    </mx:VBox>
	                    <mx:VBox height="100%" verticalAlign="middle">
	                        <mx:Button id="next" styleName="next" click="goNext()"/>
	                    </mx:VBox>
	                </mx:HBox>
	                <mx:HBox id="purchase_panel" 
	                	width="100%" 
	                	horizontalAlign="center"
	                	verticalScrollPolicy="off" 
	                	horizontalScrollPolicy="off">
		            	<mx:VBox width="320" 
		            			height="100%" 
		            			horizontalAlign="center" 
		            			paddingLeft="0" 
		            			paddingRight="0">
		            		<mx:Canvas width="100%">
		            			<mx:Label text="Purchase Option:" styleName="normalText" left="0"/>
		            			<mx:LinkButton label="[+ show hint]" right="0" 
		                            rollOverColor="#ffffff" selectionColor="#ffffff" />
		            		</mx:Canvas>
		            		<mx:ViewStack id="purchasePanel" 
		            			width="100%" 
		            			height="100%">
		            			<mx:VBox id="purchase_enabled" 
		            				borderStyle="solid" 
		            				width="100%" 
		            				verticalScrollPolicy="off" 
			            			horizontalScrollPolicy="off"
			            			height="90"
			            			paddingLeft="18" 
			            			paddingRight="18">
			            			<mx:CheckBox id="purchase" label="I would like to purchase this submission." 
			            					change="updateSubmission(false)" styleName="CheckBoxStyle" />
			            			<mx:Canvas height="1" width="100%" backgroundColor="#797979" />
			            			<mx:Label text="{'Submission Selected to Purchase:' + _purchaseTotal}" styleName="text" />
			            			<mx:Label text="{'Estimated Total Cost: $' + _purchaseMoney}" styleName="text" />
			            		</mx:VBox>
			            		<mx:VBox id="purchase_disabled" 
			            			borderStyle="solid" 
			            			width="100%" 
			            			height="90"
			            			verticalScrollPolicy="off" 
			            			horizontalScrollPolicy="off"
			            			paddingLeft="18" 
			            			paddingRight="18">
		            				<mx:Text width="100%" fontFamily="Arial" fontSize="12" 
		            						text="Your contest is still active. Once it has completed, you will have an opportunity to purchase your wining selections and any additional submissions." />
		            				<mx:HBox horizontalAlign="left">
		            					<mx:Label text="To learn more." fontFamily="Arial" fontSize="12" color="#a4a4a4" />
		            					<mx:LinkButton label="click here" fontFamily="Arial" fontSize="12" color="#a4a4a4" 
		            							rollOverColor="#ffffff" selectionColor="#ffffff" />
		            				</mx:HBox>
		            			</mx:VBox>
		            		</mx:ViewStack>
		            	</mx:VBox>
	                </mx:HBox>
	                <mx:HBox width="100%" horizontalAlign="right" paddingBottom="4" paddingRight="4">
	                    <mx:Button id="save_contestViewer_btn" label="save as draft" styleName="ButtonStyle" click="saveContestAsDraft()" />
	                    <mx:Button id="continue_contestViewer_btn" label="continue &gt;&gt;" styleName="ButtonStyle" click="continueFromContestViewer()" />
	                </mx:HBox>
	            </mx:VBox>
        		<mx:VBox id="abandonConfirmationScreen" paddingTop="22" verticalGap="7" width="100%" styleName="BoxStyle">
        			<mx:Label fontFamily="Arial"  text="{_currentItemLabel}"
                            fontWeight="bold" fontSize="16" width="100%" />
                    <mx:Label fontFamily="Arial" fontWeight="normal" fontSize="14"
                    		htmlText="{'&lt;b&gt;Contest Status: &lt;/b&gt;' + _selectedContestStatus}" width="100%" />
            		<mx:VBox width="100%" paddingTop="35" paddingLeft="12" verticalGap="0">
	            		<mx:Label width="100%" paddingTop="0" fontFamily="Arial" fontWeight="bold" fontSize="14" color="#621910" 
	                    		text="We know that picking a winner is difficult..." />
	                    <mx:Text width="100%" paddingTop="9" fontFamily="Arial" fontWeight="normal" fontSize="12"
	                    		text="However, it is important to fulfill your commitment to this contest. If you decide to choose no winners, you will have no further responsiblity to puurchase any of the submitted designs." />
	                    <mx:Label width="100%" paddingTop="9" fontFamily="Arial" fontWeight="bold" fontSize="12"
	                    		text="Before you choose this option, you should know:" />
	                    <mx:Text width="100%" paddingTop="0" fontFamily="Arial" fontWeight="normal" fontSize="12"
	                    		text="1. This is irreversible; you will not be able to purchase any of the submissions in the future." />
	                    <mx:Text width="100%" paddingTop="0" fontFamily="Arial" fontWeight="normal" fontSize="12"
	                    		text="2. Your profile history will indicate that you ended a competition and chose no winner. This may discourage memebers from competing in your future contests." />
	                    <mx:Text width="100%" paddingTop="0" fontFamily="Arial" fontWeight="normal" fontSize="12"
	                    		text="3. The contest administration fee you paid to launch this competition is non-refundable." />
	                    <mx:Label width="100%" paddingTop="9" fontFamily="Arial" fontWeight="bold" fontSize="12"
	                    		text="Make a choice, but do something." />
	                    <mx:Text width="100%" paddingTop="0" fontFamily="Arial" fontWeight="normal" fontSize="12"
	                    		text="Taking no action at all would be an 'abandonment' of the competition, which also would be indicated in your public profile. Multiple contest abandonments will result in a cancellation of your account." />
        			</mx:VBox>
        			<mx:HBox horizontalAlign="center" width="100%" paddingTop="35">
        				<mx:Button styleName="ButtonStyle" label="Select a Winner" click="gotoImageViewer()" />
        				<mx:Button styleName="ButtonStyle" label="Do Not Choose a Winner" click="gotoAbandonScreen(abandonedScreen_1)" />
        			</mx:HBox>
                </mx:VBox>
                <mx:VBox id="abandonedScreen_1" paddingTop="22" verticalGap="7" width="100%" styleName="BoxStyle">
        			<mx:Label fontFamily="Arial"  text="{_currentItemLabel}"
                            fontWeight="bold" fontSize="16" width="100%" />
                    <mx:Label fontFamily="Arial" fontWeight="normal" fontSize="14"
                    		htmlText="{'&lt;b&gt;Contest Status: &lt;/b&gt;' + 'Completed - No Winner Chosen'}" width="100%" />
            		<mx:VBox width="100%" paddingTop="35" paddingLeft="12" verticalGap="0">
	            		<mx:Label width="100%" paddingTop="0" fontFamily="Arial" fontWeight="bold" fontSize="14" color="#621910" 
	                    		text="You have chosen no winner for this contest." />
	                    <mx:Text width="100%" paddingTop="9" fontFamily="Arial" fontWeight="normal" fontSize="12"
	                    		text="To help the competitors understand your decision, please include some feedback in the area below. This may be overall impression of the contest results or critique of individual submissions." />
	                    <mx:Text width="100%" paddingTop="9" fontFamily="Arial" fontWeight="normal" fontSize="12"
	                    		text="The competitors may want to know why now winner was selected. If you choose not to provide any feedback, this may discourage members from competing in your future contests." />
	     				<mx:TextArea paddingTop="9" width="90%" height="158" />
        			</mx:VBox>
        			<mx:HBox horizontalAlign="center" width="100%" paddingTop="35">
        				<mx:Button styleName="ButtonStyle" label="Select a Winner" click="gotoImageViewer()"  />
        				<mx:Button styleName="ButtonStyle" label="Continue >>" click="gotoAbandonScreen(abandonedScreen_2)" />
        			</mx:HBox>
                </mx:VBox>
                <mx:VBox id="abandonedScreen_2" paddingTop="22" verticalGap="7" width="100%" styleName="BoxStyle">
        			<mx:Label fontFamily="Arial"  text="{_currentItemLabel}"
                            fontWeight="bold" fontSize="16" width="100%" />
                    <mx:Label fontFamily="Arial" fontWeight="normal" fontSize="14"
                    		htmlText="{'&lt;b&gt;Contest Status: &lt;/b&gt;' + 'Completed - No Winner Chosen'}" width="100%" />
            		<mx:VBox width="100%" paddingTop="35" paddingLeft="12" verticalGap="0">
	            		<mx:Label width="100%" paddingTop="0" fontFamily="Arial" fontWeight="bold" fontSize="14" color="#621910" 
	                    		text="Care to try again?" />
	                    <mx:Text width="100%" paddingTop="9" fontFamily="Arial" fontWeight="normal" fontSize="12"
	                    		text="As a valued customer, you have the opportunity to post this contest one more time at no additional cost to you. This is great chance to analyze what worked (and didn't work) in your last contest." />
	                    <mx:Text width="100%" paddingTop="9" fontFamily="Arial" fontWeight="normal" fontSize="12"
	                    		text="By simply making some minor modications to your descriptions, prize amounts, etc., you may increase your chances of getting more successful submissions." />
	     				<mx:Text width="100%" paddingTop="9" fontFamily="Arial" fontWeight="normal" fontSize="12"
	                    		htmlText="You can learn more about reposting contests by &lt;a href=&quot;#&quot; &gt;&lt;font color=&quot;#753535&quot;&gt;visiting our help section.&lt;/font&gt;&lt;/a&gt;" />
	                    <mx:Text width="100%" paddingTop="9" fontFamily="Arial" fontWeight="normal" fontSize="12"
	                    		text="So what would you like to do?" />
        			</mx:VBox>
        			<mx:HBox horizontalAlign="center" width="100%" paddingTop="35">
        				<mx:Button styleName="ButtonStyle" label="Run this Contest Again" click="gotoImageViewer()" />
        				<mx:Button styleName="ButtonStyle" label="No, Thank You" click="gotoAbandonScreen(abandonedScreen_3)" />
        			</mx:HBox>
                </mx:VBox>
                <mx:VBox id="abandonedScreen_3" paddingTop="22" verticalGap="7" width="100%" styleName="BoxStyle">
        			<mx:Label fontFamily="Arial"  text="{_currentItemLabel}"
                            fontWeight="bold" fontSize="16" width="100%" />
                    <mx:Label fontFamily="Arial" fontWeight="normal" fontSize="14"
                    		htmlText="{'&lt;b&gt;Contest Status: &lt;/b&gt;' + 'Completed - Abandoned'}" width="100%" />
            		<mx:VBox width="100%" paddingTop="35" paddingLeft="12" verticalGap="0">
	            		<mx:Label width="100%" paddingTop="0" fontFamily="Arial" fontWeight="bold" fontSize="14" color="#621910" 
	                    		text="Since this contest was abandoned..." />
	                    <mx:Text width="100%" paddingTop="9" fontFamily="Arial" fontWeight="normal" fontSize="12"
	                    		text="Lorem ipsum dolor sit amet, aliquip praesent vereor odio modo conventio pertineo vel, nullus, dolus virtus nulla illum hendrerit. Ratis eros melior in eu lucidus wisi veniam iaceo molior. Natu, Pala adipiscing os vereor jus tristique metuo, ratis defui consequat multo, modo quis paulatim. Causa cogo esse loquor wisi abluo." />
	                    <mx:Text width="100%" paddingTop="9" fontFamily="Arial" fontWeight="normal" fontSize="12"
	                    		text="Quibus refoveo lobortis ut iusto minim fere eros accumsan persto venio lenis enim laoreet enim. Vel gravis velit olim similis melior in neque elit usitas, epulae. In magna praesent ideo autem rusticus nisl erat mos pneum typicus verto iriure et te." />
	     				<mx:Text width="100%" paddingTop="9" fontFamily="Arial" fontWeight="normal" fontSize="12"
	                    		text="Lenis, hos venio transverbero sed ulcisor aliquip torqueo fere feugiat gemino, venio autem virtus os. Dolore delenit pala, consequat iaceo praesent volutpat et. Tum, velit nimis odio capio iustum premo. Illum blandit iustum te feugiat, ea, quia, commoveo vel enim nunc ulcisor. Gemino camur vel pneum, veniam, obruo elig pertineo macto consequat damnum rusticus et et paratus." />
        			</mx:VBox>
                </mx:VBox>
                <mx:VBox id="noSubmissionScreen" paddingTop="22" verticalGap="7" width="100%" styleName="BoxStyle">
        			<mx:Label fontFamily="Arial"  text="There are currently no submissions for this contest."
                            fontWeight="bold" fontSize="16" width="100%" />
                </mx:VBox>
            </mx:ViewStack>
        </mx:VBox>
    </mx:HBox>    	
	<mx:VBox id="submissionsConfirmationScreen" 
		width="100%" 
		height="100%" 
		paddingTop="10" 
		paddingBottom="25" 
		paddingLeft="15" 
		paddingRight="15"
		verticalScrollPolicy="off" 
		horizontalScrollPolicy="off">
		<mx:Label text="Confirm your Selections" fontSize="16" styleName="normalText" />
		<mx:Text width="100%" styleName="text" 
				text="Please confirm your selection of the winning submissions as well as any additional submissions you wish to purchase." />
		<mx:Canvas height="1" width="100%" backgroundColor="#797979" />
        <mx:TileList id="purchaseList" width="100%" columnCount="2"
                selectionDuration="0"
                dataProvider="{_purchaseList}" 
                itemRenderer="com.topcoder.flex.widgets.widgetcontent.submissionviewerwidget.PurchaseListRenderer"
                borderStyle="none"
                allowMultipleSelection="false" 
                allowDragSelection="false"
                height="460"/>
        <mx:Spacer height="100%" />
        <mx:HBox width="100%">
        	<mx:Button styleName="ButtonStyle" label="Modify Selections" click="gotoContestViewer()" />
        	<mx:Spacer width="100%" />
        	<mx:Button styleName="ButtonStyle" label="Checkout" click="continueToSubmissionCheckoutScreen()" />
        </mx:HBox>
	</mx:VBox>
	<mx:VBox id="submissionCheckoutScreen" width="100%" height="100%" paddingTop="10" paddingBottom="25" paddingLeft="15" paddingRight="15">
		<mx:Label id="header" text="Purchase your Submissions" fontSize="16" styleName="normalText" />
		<mx:Text id="text1" width="100%" styleName="text" 
				htmlText="Lorem ipsum dolor sit amet, consequat iusto iustum letatio singularis cogo nibh nonummy populus camur jugis amet. Saepius caecus quadrum appellatio foras epulae consequat. Torqueo, nibh, ut neque nulla torqueo macto nisl minim. Antehabeo antehabeo, hos quadrum indoles pneum ad occuro elit ut." />
		<tc:GridCanvas width="100%" height="100%" listData="{_downloadList}" />
		<mx:ViewStack height="100%" width="100%" id="pay">
			<mx:VBox width="100%" height="100%">
				<tc:PaymentWF id="wf1" width="100%" height="100%" />
				<mx:HBox width="100%">
					<mx:Button styleName="ButtonStyle" label="Add/Modify Selections" click="gotoContestViewer()" />
					<mx:Spacer width="100%" />
					<mx:Button styleName="ButtonStyle" label="Confirm Order" click="gotoPurchase()" />
				</mx:HBox>
			</mx:VBox>
			<mx:VBox width="100%" height="100%">
				<tc:PaymentWFCf id="wf2" paddingRight="6" />
				<mx:HBox width="100%" horizontalAlign="right">
					<mx:Button id="sub1" styleName="ButtonStyle" label="Submit Purchase" click="gotoPurchase()" />
				</mx:HBox>
			</mx:VBox>
			<mx:VBox width="100%" height="100%">
				<tc:PaymentWFCfPO id="wf3" paddingRight="6" />
				<mx:HBox width="100%" horizontalAlign="right">
					<mx:Button id="sub2" styleName="ButtonStyle" label="Submit Purchase" click="gotoPurchase()" />
				</mx:HBox>
			</mx:VBox>
		</mx:ViewStack>
	</mx:VBox>
	<mx:VBox id="submissionsDownloadScreen" 
		width="100%" 
		height="100%" 
		paddingTop="10" 
		paddingBottom="25" 
		paddingLeft="15" 
		paddingRight="15"
		verticalScrollPolicy="off" 
		horizontalScrollPolicy="off"
		>
		<mx:Label text="Download Submissions" fontSize="16" styleName="normalText" />
		<mx:Text width="100%" styleName="text" 
				text="Lorem ipsum dolor sit amet, consequat iusto instum letatio singularis cogo nibh nonummy populus camur jugis amet. Saepius caecus nisi miim. " />
		<mx:Canvas height="1" width="100%" backgroundColor="#797979" />
        <mx:TileList id="downloadList" 
        	width="100%"
        	height="460" 
        	columnCount="2"
            selectionDuration="0"
            dataProvider="{_downloadList}" 
            itemRenderer="com.topcoder.flex.widgets.widgetcontent.submissionviewerwidget.DownloadListRenderer"
            borderStyle="none" 
            allowMultipleSelection="false" 
            allowDragSelection="false"/>
        <mx:HBox width="100%">
        	<mx:Button styleName="ButtonStyle" label="&lt;&lt; Back" click="gotoContestViewer()" />
        </mx:HBox>
	</mx:VBox>    	
</mx:ViewStack>
    
<mx:VBox id="minPage" paddingLeft="10" paddingTop="10" paddingRight="5">
    <mx:HBox width="100%" horizontalGap="0">
        <mx:Image source="@Embed('../assets/select_a_project.png')"/>
        <mx:Text text="Select a contest:" fontWeight="bold"/>
    </mx:HBox>
    <mx:ComboBox id="contestlist2" left="195" width="272" top="9" fontFamily="Arial" fontSize="10" labelField="name" itemRenderer="com.topcoder.flex.widgets.widgetcontent.submissionviewerwidget.ComboRenderer" dataProvider="{_contestList}"
    	 change="handleContest(event)"/>
    <mx:HRule width="100%" strokeColor="#000000"/>
    <mx:HBox width="100%" >
        <mx:Text text="Total Submissions:" fontWeight="bold"/>
        <mx:Text text="{activeSubmissionForMin.length}" id="SubNum" />
    </mx:HBox>
    <mx:VBox id="tb" width="100%" >
        <mx:TileList rowCount="7" width="100%" columnCount="2"
	                        selectionDuration="0"
	                        dataProvider="{activeSubmissionForMin}" itemRenderer="com.topcoder.flex.widgets.widgetcontent.submissionviewerwidget.ListRenderer" itemsChangeEffect="{myDTLE}"
	                        verticalScrollPolicy="off" horizontalScrollPolicy="off" borderStyle="none"
	                        click="maximizeScreen()" allowMultipleSelection="false" allowDragSelection="false"/>
	                
    </mx:VBox>
</mx:VBox>

</tc:SubmissionViewerWidgetCodeBehind>
