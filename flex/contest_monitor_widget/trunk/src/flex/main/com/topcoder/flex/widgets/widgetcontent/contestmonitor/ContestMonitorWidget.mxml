<?xml version="1.0" encoding="utf-8"?>
<tc:ContestMonitorWidgetCodeBehind xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:tc="com.topcoder.flex.widgets.widgetcontent.contestmonitor.*"
    horizontalAlign="left" layout="vertical"
    width="100%" height="100%" headerHeight="0" 
    creationComplete="init()" >

<mx:Style source="styles.css" />

<mx:Script>
    <![CDATA[
        import flash.net.URLLoader;
        import flash.net.URLRequest;
        import flash.events.Event;
        import com.topcoder.flex.Helper;
        import flash.utils.Timer;
        import flash.events.TimerEvent;
        import mx.events.SliderEvent;        
        import mx.collections.ArrayCollection;        
    	import mx.rpc.events.ResultEvent;
    	import mx.core.Application;
        import mx.rpc.soap.SOAPHeader;
        import com.topcoder.flex.widgets.widgetcontent.contestmonitor.skins.*;
        import com.topcoder.flex.widgets.widgetcontent.contestmonitor.CustomSlider;
        
        
            import mx.collections.SortField;
            import mx.collections.Sort;
            
    	import mx.utils.ObjectUtil;

        private var startTime:Date;
        private var endTime:Date;
        
        private static const daySeconds:Number = 24*60*60;
        private static const halfDaySeconds:Number = 12*60*60;
        private static const hourSeconds:Number = 60*60;
        private static const OneHour:Number = 1000 * 60 * 60;

	public static var SLIDER_TICK_LENGTH:Number = 0;
	public static var TRACK_WIDTH:Number = 0;
        private var blazedsendpoint:String= Application.application.parameters.blazedsendpoint;
        private var contestServiceFacadeWsdl:String=Application.application.parameters.contestServiceFacadeWsdl;
        
        private static const WSSE_SECURITY:QName = new QName( "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "Security" );
		
	private var _inputDatePattern:RegExp = /([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})[.]([0-9]{3})([-+])([0-9]{2}):([0-9]{2})/;

		
		[Bindable]
		private var contestNames:ArrayCollection;
		
		public static function getHeader(username:String, password:String):SOAPHeader
		{
			var userToken:String = "UsernameToken-"+Math.round(Math.random()*999999).toString();
			var headerXML : XML =  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         			<wsse:UsernameToken wsu:Id={userToken} xmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'>
	            		<wsse:Username>{username}</wsse:Username>
	            		<wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest">{password}</wsse:Password>
         			</wsse:UsernameToken>
      			</wsse:Security>;
      		var header : SOAPHeader = new SOAPHeader( WSSE_SECURITY, headerXML );
      		return header;
		}
		
        // *** THIS NEEDS TO BE REPLACED WITH CALLS TO A SERVICE ***
        //fetch data from local xml file
        private function fetchData():void {
            var url:URLRequest = new URLRequest("/i/cockpit/data/timeline.xml");
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(Event.COMPLETE, getData);
            loader.load(url);
        }

	private function getParsableDate(flds:Array):String {
            var dt:String = flds[1] + "/" + flds[2] + "/" + flds[3] + " " + flds[4] + ":" + flds[5] + ":" + flds[6] + " " + "GMT" + flds[8] + flds[9] + flds[10];
            return dt;
}

        
        //after loading the xml file, fetch data
        private function getData(event:Event):void {
        	var header:SOAPHeader=getHeader(username,password);
			ContestServiceFacadeBean.clearHeaders();
            ContestServiceFacadeBean.addHeader(header);

           	// ContestServiceFacadeBean.getContest.send();
           	if(pid) ContestServiceFacadeBean.getSimpleContestDataByPID.send();
           	else
        	ContestServiceFacadeBean.getSimpleContestData();
        }


	private function init():void {
		getDataService();
            }


	    private function getDataService():void
		{
				
		    dataservice.getPassword();
		}

		private function processPassword(e:ResultEvent): void
		{
			if(e!=null && e.result!=null){
				password = e.result.toString();
				
			}

			fetchData();
		}
        
        
        //display remaining time
        private function displayRemainTime():void{
            var currentTime:Date = new Date();
            var remainTime:Number = endTime.getTime() - currentTime.getTime();
            if (remainTime < 0){
                timeRem.text = "0 days, 0 hours";
                //stop text effect
                if (textEffect.isPlaying)
                   textEffect.end();
                return;
            }
            var remainDay:String = int(remainTime/(daySeconds*1000)).toString();
            var remainHour:String = int((remainTime - Number(remainDay)*daySeconds*1000)/(hourSeconds*1000)).toString();
            var timeRemain:String = remainDay + " days, " + remainHour + " hours";
            timeRem.text = timeRemain;
            //add effect
            if (Number(remainDay) == 0 && Number(remainHour) <= 12)
            {
                if (!textEffect.isPlaying)
                    textEffect.play();
            }
        }
        
        //timer handler executed every second
        private function timerHandler(event:TimerEvent):void {
            var currentTime:Date = new Date();
            var currentPos:Number = (currentTime.getTime() - startTime.getTime())/1000;
            timeLine.setThumbValueAt(0, currentPos);
            displayRemainTime();
            if(endTime.getTime() - currentTime.getTime() <= 0)
                event.target.stop();
        }
         private function compareDate(a:Object, b:Object, fields:Array = null):int {

		var sflds:Array = _inputDatePattern.exec(a.endDate);
		var aend:Date = new Date(Date.parse(getParsableDate(sflds)));

		var sfldss:Array = _inputDatePattern.exec(b.endDate);
		var bend:Date = new Date(Date.parse(getParsableDate(sfldss)));

               return ObjectUtil.dateCompare(bend,aend);
            }
        private function setContests(e:ResultEvent): void
        {
        	if(e==null || e.result==null)return;
        	if(e.result is  ArrayCollection)
        	{
        		
        	  contestList=e.result  as ArrayCollection;
        	}
        	else
        	{
        		contestList=new ArrayCollection();
        		contestList.addItem(e.result);
        	}
        	
        	
        		if(!contestList.sort)
        		{
        			var sort:Sort = new Sort();   
	                sort.compareFunction = compareDate;
	                contestList.sort = sort;
        		}
        		contestList.refresh();
        	contestNames=new ArrayCollection();
        	var selectIdx=0;
        	for(var i:int=0;i<contestList.length;i++)
        	{
        		var data:*=contestList.getItemAt(i);    
		  	    if(data!=null){
        	     	contestNames.addItem(data.name); 
        	     	if(data.contestId==this.defaultcontestid)selectIdx=i;
        	    }
        	}
        	
        	contestCombo.selectedIndex=selectIdx;
        }


    
        
        private function getDisplayableDateComp(flds:Array):String {
        	return flds[2] + "-" + flds[3] + "-" + flds[1]
        }
        
        private function getDisplayableTimeComp(flds:Array):String {
        	return flds[4] + ":" + flds[5];
        }
        
        private function getDisplayableTimeZoneComp(flds:Array):String {
        	return "GMT" + flds[8] + flds[9] + flds[10];
        }
        
        
        private function handleContest():void
        {
        	if (contestList==null || contestCombo.selectedIndex<0) return ;
        	var result:*=contestList.getItemAt(contestCombo.selectedIndex);
        	if(result==null )return ;
        	regs.text = result.num_reg;//.numberOfRegistrants;
		subms.text = result.num_sub;//.contestData.submissionCount;
         
		//Format like: 2009-01-12T11:00:00.000-05:00
		//var sflds:Array = _inputDatePattern.exec(result.startDate);
		startTime = DateUtil.parseFromString(result.startDate);  //new Date(Date.parse(getParsableDate(sflds)));
		start.text = startTime.toString();


		//var sfldss:Array = _inputDatePattern.exec(result.endDate);
		endTime = DateUtil.parseFromString(result.endDate);  //new Date(Date.parse(getParsableDate(sfldss)));
		end.text = endTime.toString();
		var currentTime:Date = new Date();
		var timeSpan:Number = (endTime.getTime() - startTime.getTime())/1000;
		var currentPos:Number = (currentTime.getTime() - startTime.getTime())/1000;
            
            var tickValuesArry:Array = new Array();
            var labelsArry:Array = new Array();
           	
            var totalHalfDays:int = int(timeSpan/halfDaySeconds);
            var totalDays:int = int(timeSpan/daySeconds);
            if (totalDays == 0){
                tickValuesArry.push(0);
                tickValuesArry.push(timeSpan);
                labelsArry.push("START");
                labelsArry.push("END");
            } else {
                var i:int = 0;
                if (timeSpan == totalHalfDays*halfDaySeconds){
                   for (i = 0; i <= totalDays; i++){
                        tickValuesArry.push(i*daySeconds);
                        if(i == 0)
                            labelsArry.push("START");
                        else if(i == totalDays)
                            labelsArry.push("END");
                        else{      
                            labelsArry.push("DAY " + i.toString());
                        }
                   }
                } else{
                    for (i = 0; i <= totalDays; i++){
                        tickValuesArry.push(i*daySeconds);
                        if(i == 0)
                            labelsArry.push("START");
                        else{
                            labelsArry.push("DAY " + i.toString());
                        }
                    }
                    
                    tickValuesArry.push(timeSpan);
                    labelsArry.push("END");                            
                }
            }
            
            trace("Assigning Values");
            
            timeLine.tickValues = tickValuesArry;
            timeLine.labels = labelsArry;
            SLIDER_TICK_LENGTH = tickValuesArry.length;
            
            timeLine.maximum = timeSpan;
            timeLine.value = currentPos;
            
            displayRemainTime();
            
            timeLine.getThumbAt(0).enabled = false;
            
            timeLine.update();
            
            //update time line every minute
            var timeLineTimer:Timer = new Timer(60*1000, 0);
            timeLineTimer.addEventListener("timer", timerHandler);
            timeLineTimer.start();
        }
    ]]>
</mx:Script>
<mx:WebService id="ContestServiceFacadeBean" 
wsdl="{contestServiceFacadeWsdl}"> 
<mx:operation name="getSimpleContestData" resultFormat="object" result="setContests(event)"> 
</mx:operation>
<mx:operation name="getSimpleContestDataByPID" resultFormat="object" result="setContests(event)"> 
<mx:request>
	<arg0>{pid}</arg0>
	</mx:request> 
</mx:operation>
</mx:WebService>
<mx:RemoteObject id="dataservice" destination="remoteDataService" endpoint="{blazedsendpoint}"
              
		 fault="Helper.showAlertMessage(event.fault.faultString);">
    <mx:method name="getPassword"  result="processPassword(event)" 
		                   fault="Helper.showAlertMessage(event.fault.faultString);"/>

</mx:RemoteObject>

<mx:VBox paddingLeft="20" paddingRight="20" width="100%">
	<mx:Spacer height="10"/>
	<mx:HBox>
	<!--<mx:Canvas width="100%" minWidth="755" height="50">-->
		
		<mx:Label text="Select Contest:" 
	                        styleName="labelStyle" paddingTop="0" paddingBottom="0"/>
	    <mx:ComboBox id="contestCombo" left="195" width="272" top="9"
	                        valueCommit="handleContest()" fontFamily="Arial" fontSize="11"
	                         dataProvider="{contestNames}" />
	<!--</mx:Canvas>-->
	</mx:HBox>
	<mx:Spacer height="10"/>
	<mx:HBox styleName="infoBox" backgroundSize="100%" height="70" width="100%" verticalGap="0" backgroundAlpha="1.0" horizontalAlign="left" verticalAlign="middle" horizontalGap="0">
		<mx:VBox>
	       <mx:Label text="Registrants :" styleName="infoBoxTxt" />
	       <mx:Label text="Submissions :" styleName="infoBoxTxt" />
	    </mx:VBox>
	    <mx:VBox>
	    	<mx:Text id="regs" styleName="infoBoxTxt" />
	       	<mx:Text id="subms" styleName="infoBoxTxt" />
	    </mx:VBox>
	</mx:HBox>
	<mx:Spacer height="5"/>
	<mx:HBox>
		<mx:VBox>
			<mx:Label text="Start Date/Time :" styleName="infoBoxTxt"/>
			<mx:Label text="End Date/Time :" styleName="infoBoxTxt"/>
			<mx:Label text="Time Remaining :" styleName="infoBoxTxt"/>
		</mx:VBox>
		<mx:VBox>
		   <mx:Text id="start" styleName="infoBoxTxtNormal"/>
		   <mx:Text id="end" styleName="infoBoxTxtNormal"/>
		   <mx:Text id="timeRem" styleName="infoBoxTxtNormal"/>
		</mx:VBox>
	</mx:HBox>
	<mx:Spacer height="12"/>
	<mx:HBox styleName="sliderBox" 
			backgroundSize="100%" 
			horizontalAlign="center" 
			verticalScrollPolicy="off" 
			width="100%"
			paddingTop="15"
			paddingLeft="5"
			paddingRight="5" 
			height="50">
		<!--<mx:HSlider id="timeLine" 
		 width="80%" tickColor="black"
	     snapInterval="1" showDataTip="false"
	     allowTrackClick="true" />-->
	     <tc:CustomSlider id="timeLine" 
	     	styleName="customHSlider" 
	     	thumbOffset="0" 
	     	showTrackHighlight="true"  
	     	allowTrackClick="false" 
	     	liveDragging="false"
	     	labelOffset="2" 
	     	tickLength="0"  
	     	labelStyleName="labelStyle"
	     	width="100%"
			showDataTip="false"/>
	</mx:HBox>
</mx:VBox>
    
    <!-- Remaining time text effect -->
    <mx:Parallel id="textEffect" target="{timeRem}" repeatCount="0">
        <mx:Glow id="glowText" duration="2000" 
            alphaFrom="1.0" alphaTo="0.3" 
            blurXFrom="0.0" blurXTo="30.0" 
            blurYFrom="0.0" blurYTo="30.0" 
            color="0xFF0000"/>
    </mx:Parallel>
</tc:ContestMonitorWidgetCodeBehind>
