<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (C) 2009 TopCoder Inc., All Rights Reserved.
-->

<!--

     This mxml component is the main entry point for the User Sync Widget.

     - UserSyncWidget just has single input control to get handle input from the end-user.
     - It synchronizes the input handle to backend UserSyncService (both Jira and Confluence).
     - It shows corresponding status to end-user.

     @author snow01
     @since Jira and Confluence User Sync Widget 1.0
     @version 1.0
-->
<tc:UserSyncWidgetCodeBehind xmlns:mx="http://www.adobe.com/2006/mxml"
                             minHeight="470"
                             width="100%"
                             height="100%"
                             creationComplete="init()"
                             xmlns:tc="com.topcoder.flex.widgets.widgetcontent.usersync.*"
                             horizontalAlign="center"
                             verticalAlign="middle"
                             horizontalScrollPolicy="off"
                             verticalScrollPolicy="off">
    <mx:Style source="./Style.css"/>
    <mx:Script>
        <![CDATA[
            import mx.rpc.AbstractOperation;
            import mx.rpc.soap.SOAPHeader;
            import mx.controls.ButtonLabelPlacement;
            import mx.rpc.events.FaultEvent;
            import com.topcoder.flex.Helper;
            import mx.rpc.events.ResultEvent;
            import mx.core.Application;
            import flash.events.MouseEvent;
            
            /**
             * Constant variable indicating the error message on user synchronization.
             *
             * Note that, if for some reason (that is highlt unlikely as per architect) there is some error in synchronizing the user,
             * then this error is shown to end-user.
             */
            private static const UserSynchronizationError:String="user cannot be synchronized";
            
            /**
             * Constant variable indicating the error message on handle not found or any other UserService error.
             *
             * Note that, this widget does not directly call UserService but UserSyncService calls it to valdiate the handle.
             * If there is some error with the handle (illegal handle or not found handle), in that case UserService throws UserServiceException.
             * For such case this error message is shown to end user.
             */
            private static const HandleNotFoundError:String="handle not found";
            
            /**
             * Indicates the style name to be used in case of showing error message from backend service.
             */
            private static const ErrorLabelStyle:String="errorBoldLabel";
            
            /**
             * Indicates the style name to be used in case of successful status message (user-email) from backend service.
             */
            private static const SuccessLabelStyle:String="normalBoldLabel";
            
            /**
             * Blazed end point application parameter.
             */
            [Bindable]
            private var _blazedsendpoint:String=Application.application.parameters.blazedsendpoint;
            
            /**
             * User service facade wsdl url.
             */
            [Bindable]
            private var _userServiceFacadeWsdl:String=Application.application.parameters.userServiceFacadeWsdl;
            
            /**
             * Indicates if the widget state is dirty.
             * Dirty indicates when search has been made to the backend.
             *
             * When user starts entering new handle dirty is set to false, otherwise it is always set to true.
             */
            private var _dirty:Boolean=false;
            
            /**
             * Holds the reference to the current handle that was synchronized to back-end.
             */
            private var _currentHandle:String="";
            
            /**
             * Handler that gets called on creation complete of this component.
             */
            private function init():void {
                getDataService();
            }
            
            /**
             * Retrieves password from blazed data service.
             */
            private function getDataService():void {
                dataservice.getPassword();
            }
            
            /**
             * Webservice handler for password retrieval from blazed data service.
             *
             * @param e the webservice result event.
             */
            private function processPassword(e:ResultEvent):void {
                if (e != null && e.result != null) {
                    password=e.result.toString();
                    
                }
                
                initWidget();
            }
            
            /**
             * Initializes the widget.
             * This gets called on successful password retrieval.
             */
            private function initWidget():void {
                initWebServices();
            }
            
            /**
             * Initializes web services
             *
             * It adds SOAP header and sets the userServiceFacadeBean instance.
             */
            private function initWebServices():void {
                var header:SOAPHeader=getHeader(username, password);
                
                // initialize user sync service ws.
                UserServiceFacadeBean.clearHeaders();
                UserServiceFacadeBean.addHeader(header);
                this.userServiceFacadeBean=UserServiceFacadeBean;
            }
            
            /**
             * Synchronizes the input handle to the UserSyncService
             */
            private function syncHandle(event:MouseEvent):void {
                _dirty=true;
                _currentHandle=handleInput.text;
                
                // first synchronize jira user 
                // and on successful synchronization of jira, synchronize confluence user. 
                syncJiraUser();
            }
            
            /**
             * Synchronizes the jira user from the backend UserSyncService.
             */
            private function syncJiraUser():void {
                this.userServiceFacadeBean.clearHeaders();
                this.userServiceFacadeBean.addHeader(getHeader(username, password));
                
                var getJiraUser:AbstractOperation=this.userServiceFacadeBean.getOperation("getJiraUser");
                getJiraUser.send(_currentHandle);
                
                showLoadingProgress();
            }
            
            /**
             * Synchronizes the confluence user from the backend UserServiceFacade.
             */
            private function syncConfluenceUser():void {
                this.userServiceFacadeBean.clearHeaders();
                this.userServiceFacadeBean.addHeader(getHeader(username, password));
                
                var getConfluenceUser:AbstractOperation=this.userServiceFacadeBean.getOperation("getConfluenceUser");
                getConfluenceUser.send(_currentHandle);
                
                showLoadingProgress();
            }
            
            /**
             * Handles the successful synchronization of Jira User from UserServiceFacade.
             *
             * On successful synchronization, UserServiceFacade returns the email address of the user.
             * The same gets shown to the end-user
             *
             * @param e the webservice result event.
             */
            private function handleGetJiraUser(e:ResultEvent):void {
                hideLoadingProgress();
                
                trace("handleGetJiraUser: " + e);
                
                if (e && e.result) {
                    jiraUserControl.styleName=SuccessLabelStyle;
                    jiraUserControl.text="Created";//e.result as String;
                    
                    // on successful synchronization of jira, synchronize confluence user. 
                    syncConfluenceUser();
                }
            }
            
            /**
             * Handles the failure on synchronization of Jira User from UserServiceFacade.
             *
             * On some failure, UserServiceFacade throws the exception.
             * If error is related to handle (i.e. a UserServiceException), then "handle not found" is shown to end user.
             * Otherwise "user cannot be synchronized" is shown to end user.
             *
             * @param e the webservice fault event.
             */
            private function handleGetJiraUserServiceError(e:FaultEvent):void {
                hideLoadingProgress();
                
                trace("handleGetJiraUserServiceError: " + e + ", " + e.fault.content);
                
                if (e && e.fault) {
                    //
                    // most clients are not able to decode the web-service fault message, 
                    // so in both cases (a) when webservice fault message has been decoded and it is the case when TC-HANDLE-NOT-FOUND
                    // or (b) when webservice can not be decoded... we show "handle not found" message.
                    //
                    if (e.fault.faultString.search("TC-HANDLE-NOT-FOUND") >= 0 || e.fault.faultString.search("SOAP Response cannot be decoded") >= 0) { 
                        handleErrorLabel.text=HandleNotFoundError;
                        handleErrorLabel.visible=true;
                    } else {
                        jiraUserControl.styleName=ErrorLabelStyle;
                        jiraUserControl.text=UserSynchronizationError;
                        
                        // on error synchronization of jira too, synchronize confluence user. 
                        syncConfluenceUser();
                    }
                }
            }
            
            /**
             * Handles the successful synchronization of Confluence User from UserSyncService.
             *
             * On successful synchronization, UserSyncService returns the email address of the user.
             * The same gets shown to the end-user
             *
             * @param e the webservice result event.
             */
            private function handleGetConfluenceUser(e:ResultEvent):void {
                hideLoadingProgress();
                
                trace("handleGetConfluenceUser: " + e);
                
                if (e && e.result) {
                    confluenceUserControl.styleName=SuccessLabelStyle;
                    confluenceUserControl.text="Created";//e.result as String;
                }
            }
            
            /**
             * Handles the failure on synchronization of Confluence User from UserServiceFacade.
             *
             * On some failure, UserServiceFacade throws the exception
             *
             * @param e the webservice fault event.
             */
            private function handleGetConfluenceUserServiceError(e:FaultEvent):void {
                hideLoadingProgress();
                
                trace("handleGetConfluenceUserServiceError: " + e);
                
                if (e && e.fault) {
                    //
                    // tc handle has already been validated as part of jira call.
                    // so blindly show the "user cannot be synchronized" message.
                    //
                    confluenceUserControl.styleName=ErrorLabelStyle;
                    confluenceUserControl.text=UserSynchronizationError;
                }
            }
            
            /**
             * Resets various output controls (it gets called when user starts typing in new handle)
             */
            private function resetControls():void {
                if (_dirty) {
                    _currentHandle="";
                    handleErrorLabel.visible=false;
                    handleErrorLabel.text="";
                    jiraUserControl.text="";
                    jiraUserControl.styleName=SuccessLabelStyle;
                    confluenceUserControl.text="";
                    confluenceUserControl.styleName=SuccessLabelStyle;
                    
                    _dirty=false;
                }
            }
        ]]>
    </mx:Script>

    <mx:WebService id="UserServiceFacadeBean"
                   wsdl="{_userServiceFacadeWsdl}">
        <mx:operation name="getJiraUser"
                      resultFormat="object"
                      result="handleGetJiraUser(event)"
                      fault="handleGetJiraUserServiceError(event)"/>
        <mx:operation name="getConfluenceUser"
                      resultFormat="object"
                      result="handleGetConfluenceUser(event)"
                      fault="handleGetConfluenceUserServiceError(event)">
        </mx:operation>
    </mx:WebService>

    <mx:RemoteObject id="dataservice"
                     destination="remoteDataService"
                     endpoint="{_blazedsendpoint}"
                     fault="Helper.showAlertMessage('UserSyncWidget remoteDataService: ' + event.fault.faultString);">
        <mx:method name="getPassword"
                   result="processPassword(event)"
                   fault="Helper.showAlertMessage('UserSyncWidget getPassword: ' + event.fault.faultString);"/>
    </mx:RemoteObject>

    <mx:VBox horizontalAlign="left">
        <mx:Label text="Jira and Confluence User Synchronization"
                  styleName="widgetHeading"/>
        <mx:Spacer height="3"/>
        <mx:Grid verticalGap="0">
            <mx:GridRow verticalAlign="middle">
                <mx:GridItem>
                    <mx:Label text="Enter handle:"
                              styleName="normalContentLabel"/>
                </mx:GridItem>
                <mx:GridItem>
                    <mx:TextInput width="200"
                                  id="handleInput"
                                  styleName="input"
                                  height="23"
                                  change="resetControls()"/>
                </mx:GridItem>
                <mx:GridItem>
                    <mx:Button id="searchBtn"
                               label="Sync User"
                               labelPlacement="{ButtonLabelPlacement.LEFT}"
                               styleName="button"
                               buttonMode="true"
                               click="syncHandle(event)"/>
                </mx:GridItem>
            </mx:GridRow>
            <mx:GridRow verticalAlign="middle">
                <mx:GridItem>

                </mx:GridItem>
                <mx:GridItem>
                    <mx:Label id="handleErrorLabel"
                              styleName="{ErrorLabelStyle}"
                              visible="false"/>
                </mx:GridItem>
                <mx:GridItem>

                </mx:GridItem>
            </mx:GridRow>
        </mx:Grid>
        <mx:Grid>
            <mx:GridRow>
                <mx:GridItem horizontalAlign="right">
                    <mx:Label text="Jira User:"
                              styleName="normalContentLabel"/>
                </mx:GridItem>
                <mx:GridItem horizontalAlign="left">
                    <mx:Label id="jiraUserControl"
                              text=""
                              styleName="{SuccessLabelStyle}"/>
                </mx:GridItem>
            </mx:GridRow>
            <mx:GridRow>
                <mx:GridItem horizontalAlign="right">
                    <mx:Label text="Confluence User:"
                              styleName="normalContentLabel"/>
                </mx:GridItem>
                <mx:GridItem horizontalAlign="left">
                    <mx:Label id="confluenceUserControl"
                              text=""
                              styleName="{SuccessLabelStyle}"/>
                </mx:GridItem>
            </mx:GridRow>
        </mx:Grid>
    </mx:VBox>

</tc:UserSyncWidgetCodeBehind>
