<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
          horizontalScrollPolicy="off" verticalScrollPolicy="off">
    <mx:Script>
	    <![CDATA[
	    	import com.topcoder.flex.widgets.widgetcontent.LaunchAContestWidget.webservice.data.DocumentType;
	    	import mx.collections.ArrayCollection;
	    	import mx.controls.TextArea;
	    	import mx.controls.HRule;
	    	import com.topcoder.flex.widgets.widgetcontent.LaunchAContestWidget.webservice.data.UploadedDocument;
	    	import com.topcoder.flex.Helper;
	    	import mx.rpc.soap.WebService;
	    	import mx.rpc.events.ResultEvent;
	    	import mx.containers.VBox;
	    	import flash.text.engine.FontWeight;
	    	import com.topcoder.flex.widgets.widgetcontent.LaunchAContestWidget.LaunchWidget;
	        import flash.events.MouseEvent;
	        import flash.net.FileReference;
	        import flash.events.Event;
	        import mx.containers.HBox;
	        import mx.controls.Label;
	        import mx.controls.Text;
	        import mx.controls.Spacer;
	        
	        import mx.rpc.AbstractOperation;
            import mx.rpc.events.ResultEvent;
            
            import com.topcoder.flex.widgets.widgetcontent.LaunchAContestWidget.utils.ObjectTranslatorUtils;
	        
	        [Bindable]
	        public var mainWidget:LaunchWidget;
	        public var FileDescHint:String;
	        private var file:FileReference;
	        private static const ADDEDHEIGHT:Number = 80;
	        
			private static const mimeTypes:Array=["application/msword",
	                                             "application/rtf",
	                                             "text/plain",
	                                             "application/pdf",
	                                             "application/postscript",
	                                             
	                                             "text/html",
	                                             "text/rtf",
	                                             "image/jpeg",  
	                                             "image/gif",
	                                             "image/png",
	                                             
	                                             "image/bmp",
	                                             "application/vnd.ms-excel",
	                                             "image/pjpeg",
	                                             "image/x-png",
	                                             "application/zip",
	                                             
	                                             "application/x-zip-compressed",
	                                             "audio/mpeg",
	                                             "audio/mp3",
	                                             "application/x-zip",
	                                             "application/java-archive",
	                                             
	                                             "application/x-java-archive",
	                                             "application/vnd.ms-powerpoint",
	                                             "application/octet"];	
	        private var extMimeMap:Dictionary;
	        
	        [Bindable]
	        private var fileTypes:ArrayCollection = new ArrayCollection();     	        
	        
	        [Bindable]
	        [ArrayElementType("com.topcoder.flex.widgets.widgetcontent.LaunchAContestWidget.webservice.data.UploadedDocument")]
	        private var docUploads:Array;
	        
	        private var currentDoc:UploadedDocument;
	        
	        public function initData():void{
	        	uploadFilesVBox.removeAllChildren();
	        	
	        	fileToUpload.htmlText = "";
	        	
	        	docUploads = new Array();	
	        	
	        	for each (var doc:UploadedDocument in this.mainWidget.competition.contestData.documentationUploads){
	        		addDoc(doc);
	        	}
	        	
	        	this.mainWidget.competition.contestData.documentationUploads = docUploads;
	        	
	        	this.addEventListener("UPLOADDOC_ALL_COMPLETED", allCompleteHandler );
	        	
	        	currentDoc = new UploadedDocument();
	        	
				extMimeMap=new Dictionary();
                extMimeMap["doc"]="application/msword";
	            extMimeMap["rtf"]= "application/rtf";
	            extMimeMap["txt"]=  "text/plain";
	            extMimeMap["pdf"]=  "application/pdf";
	            extMimeMap["ps"]= "application/postscript";
	                                             
	            extMimeMap["htm"]=     "text/html";
	            extMimeMap["html"]=     "text/html";
	            extMimeMap["jpg"]=    "image/jpeg";  
	            extMimeMap["jpeg"]=    "image/jpeg";  
	            extMimeMap["gif"]=  "image/gif";
	            extMimeMap["png"]= "image/png";
	                                             
	            extMimeMap["bmp"]=    "image/bmp";
	            extMimeMap["xsl"]=  "application/vnd.ms-excel";
	            extMimeMap["zip"]="application/zip";
	                                             
	            extMimeMap["rar"]="application/x-zip-compressed";
	            extMimeMap["mpg"]="audio/mpeg";
	            extMimeMap["mp3"]="audio/mp3";
	            extMimeMap["jar"]="application/java-archive";
	            extMimeMap["ppt"]="application/vnd.ms-powerpoint";
	            extMimeMap["pps"]="application/vnd.ms-powerpoint";	
	            
	            loadDocumentTypes();        	
	        }
	        
	        // TCCC-1023
	        private function loadDocumentTypes():void{
	            var getAllDocumentTypesOp:AbstractOperation = mainWidget._csws.getOperation("getAllDocumentTypes");
                getAllDocumentTypesOp.addEventListener("result", getAllDocumentTypesHandler);
                getAllDocumentTypesOp.send();
	        }
	        
	        // TCCC-1023
	        private function getAllDocumentTypesHandler(e:ResultEvent):void{
	            trace("getAllDocumentTypesHandler: " + e + ", " + e.result);
                
            	if(e && e.result){
            	    var docTypes:ArrayCollection = ObjectTranslatorUtils.translateCollection(e.result, DocumentType);
            	    trace("getAllDocumentTypesHandler:: docTypes: " + docTypes);
	            
    	        	fileTypes = new ArrayCollection();
    	        	
    	        	for each (var dt:DocumentType in docTypes){
            			fileTypes.addItem({label:dt.description, data:dt.documentTypeId});
            		}
	            }
	        }
	        
	        // TCCC-1023
	        private function addDoc(doc:UploadedDocument):void{
	        	var docVBox:VBox = new VBox();
	        	docVBox.percentWidth = 100;
	        	docVBox.id = doc.documentId.toString();
	        	docVBox.data = doc;
	        	
	        	var hbox1:HBox = new HBox();
	        	docVBox.addChild(hbox1);
	        	
	        	var descLabel:Label = new Label();
	        	hbox1.addChild(descLabel);
	        	descLabel.text = "File Description:";
	        	descLabel.setStyle("fontWeight","bold");
	        	
	        	var descText:Text = new Text();
	        	hbox1.addChild(descText);
	        	descText.text = doc.description;
	        	
	        	var hbox2:HBox = new HBox();
	        	docVBox.addChild(hbox2);
	        	
	        	var nameLabel:Label = new Label();
	        	hbox2.addChild(nameLabel);
	        	nameLabel.text = "File Name:";
	        	nameLabel.setStyle("fontWeight","bold");
	        	
	        	var nameText:Text = new Text();
	        	hbox2.addChild(nameText);
	        	nameText.text = doc.fileName;
	        	
	        	var hbox3:HBox = new HBox();
	        	docVBox.addChild(hbox3);
	        	var removeBtn:LinkButton=new LinkButton();
	        	removeBtn.label="remove";
	        	removeBtn.data=docVBox;
	        	removeBtn.addEventListener(MouseEvent.CLICK,removeDoc);
	        	hbox3.addChild(removeBtn);	      
	        	
	        	var hrule:HRule = new HRule();
	        	hrule.percentWidth = 100;
	        	docVBox.addChild(hrule);
	        	
	        	var spacer:Spacer = new Spacer();
	        	spacer.height = 5;
	        	docVBox.addChild(spacer);
	        	
	        	uploadFilesVBox.addChild(docVBox);
	        	
	        	docUploads.push(doc);
	        }
	        
	        private function removeDoc(e:MouseEvent):void{
	        	if (e && e.target){
	        		var button:LinkButton=e.target as LinkButton;
	        		var box:VBox = button.data as VBox;	
	        	    var doc:UploadedDocument=box.data as UploadedDocument;
	        	    
	        	    var index:int = docUploads.indexOf(doc);
	        	    if (index != -1){
	        	    	docUploads.splice(index,1);
	        	    	
	        	    	sendRemoveDocRequest(doc);
	        	    }
	        	    
	        	    box.parent.removeChild(box);
	        	}
	        }
	        
	        // TCCC-1023
	        private function sendRemoveDocRequest(doc:UploadedDocument):void{
				var contestId:Number = mainWidget.competition.contestData.contestId;
				if (contestId == -1){
				    var removeDocumentOp:AbstractOperation = mainWidget._csws.getOperation("removeDocument");
                    //removeDocumentOp.addEventListener("result", eventHandler);
                    removeDocumentOp.send(doc.documentId);
			   } else {
			        var removeDocumentFromContestOp:AbstractOperation = mainWidget._csws.getOperation("removeDocumentFromContest");
                    //removeDocumentOp.addEventListener("result", eventHandler);
                    doc.contestId=contestId;
                    removeDocumentFromContestOp.send(doc);
			   }
	        }
	        
	        private function showfileDecsHint(event:MouseEvent):void {
                if (event.target.label == "[+ show hint]"){
                    event.target.label = "[- show hint]";
                    fileDescHint.height = ADDEDHEIGHT;
                    fileDescHint.text = FileDescHint;
                    fileDescHint.visible = true;
                }else{
                    event.target.label = "[+ show hint]";
                    fileDescHint.height = 0;
                    fileDescHint.text = "";
                    fileDescHint.visible = false;
                }
	        }
	        
	        private function browseFile():void {
	        	file= new FileReference();
	        	file.addEventListener(Event.SELECT, selectHandler);
	        	file.addEventListener(Event.COMPLETE, loadCompleteHandler);
	        	file.browse();
	        }
	        
	        private function selectHandler(event:Event):void {
                fileToUpload.text = file.name;
            }
            
            private function uploadFile():void {
            	if (file== null || file.name == ""){
            		Helper.showAlertMessage("Please select a file to upload");
            		return;
            	}
            	
            	if (fileDescInput.text == ""){
            		Helper.showAlertMessage("Please enter a description for the file");
            		return;
            	}
            	
            	file.load();
            	
            	//load mimetype id via WebService
            	var getMimeTypeIdOp:AbstractOperation = mainWidget._csws.getOperation("getMimeTypeId");
                getMimeTypeIdOp.addEventListener("result", loadMimeTypeIdHandler);
                
                var dotpos:int=file.name.lastIndexOf('.');
            	var ftype:String=dotpos<0?file.type:file.name.substring(dotpos+1);
            	
                getMimeTypeIdOp.send(getMimetypeByFileName(ftype));
            }
            
            private function getMimetypeByFileName(ext:String):String{
            	var typename:String=extMimeMap[ext];
	        	if(typename==null)
	        	{
	        		typename="text/plain";
	        	}
	        	
	        	return typename;
            }
            
            private function loadCompleteHandler(event:Event):void{
            	currentDoc.file = file.data;
            	currentDoc.description = fileDescInput.text;
            	currentDoc.fileName = file.name;
		        
		        // BUGR-1172
            	currentDoc.documentTypeId = -1;//this.filetypeCombo.selectedItem.data;
            	currentDoc.contestId = -1;
            	currentDoc.documentId = -1;
            	
            	//mimetype id has been loaded
            	if (!isNaN(currentDoc.mimeTypeId)){
            		this.dispatchEvent(new Event("UPLOADDOC_ALL_COMPLETED"));
            	}
            }
            
            // TCCC-1023
            private function loadMimeTypeIdHandler(e:ResultEvent):void{
                trace("loadMimeTypeIdHandler: " + e + ", " + e.result);
                
            	if (e && e.result) {
            	    
            	    currentDoc.mimeTypeId = ObjectTranslatorUtils.translate(e.result, Number) as Number;
            	    trace("loadMimeTypeIdHandler:: currentDoc.mimeTypeId: " + currentDoc.mimeTypeId);
            	    
    				//file content has been loaded            	
                	if (currentDoc.file != null){
                		this.dispatchEvent(new Event("UPLOADDOC_ALL_COMPLETED"));
                	}
            	}
            }
            
            //This method is called when the metatypeId is returned and the file content is uploaded
            private function allCompleteHandler(event:Event):void{
            	if (currentDoc == null){
            		return; // the document has been sent
            	}
            	
            	//invoke uploadDocumentForContest for existing contest
            	//for a new contest, the service will automatically upload the document
            	if (this.mainWidget.competition.contestData.contestId != -1){
            		currentDoc.contestId = this.mainWidget.competition.contestData.contestId;
            		
            		// TCCC-1023
            		var uploadDocumentForContestOp:AbstractOperation = mainWidget._csws.getOperation("uploadDocumentForContest");
                    uploadDocumentForContestOp.addEventListener("result", uploadDocumentForContestHandler);
                    uploadDocumentForContestOp.send(currentDoc);
            	} else {
            		addDoc(currentDoc);
            		//clear up
            		currentDoc = new UploadedDocument();
            		fileDescInput.text = "";
            		fileToUpload.text = "";
            	}
            	
            }
            
            // TCCC-1023
            private function uploadDocumentForContestHandler(e:ResultEvent):void {
                
                trace("getAllProjectsHandler: " + e + ", " + e.result);
                
            	if(e && e.result){
            	    var docUploaded:UploadedDocument = ObjectTranslatorUtils.translate(e.result, UploadedDocument) as UploadedDocument;
            	    trace("uploadDocumentForContestHandler:: docUploaded: " + docUploaded);
            	    
                	//Clear the content once the file has been uploaded to save memory
                	docUploaded.file = null; 
                	addDoc(docUploaded);
                	
                	//clear up
                	currentDoc = new UploadedDocument();
                	fileDescInput.text = "";
                	fileToUpload.text = "";
                	
                	file=null;
                }
            }
	    ]]>
    </mx:Script>
    <mx:VBox width="100%" height="100%" styleName="boxStyle" >
	<mx:HBox horizontalAlign="right" width="100%">
		<mx:Label text="Attach Files" fontWeight="bold" fontSize="12" width="80%"/>
		<mx:Spacer width="100" />	
		<mx:LinkButton baseline="middle" styleName="linkBtn" label="Preview Contest" click="this.mainWidget.previewContest()" />
		    <mx:Image source="@Embed('../../assets/more_info.png')"/>
	</mx:HBox>
        <mx:Text width="100%" id="attachFiles">
            <mx:htmlText>
            <![CDATA[If you have your logo in vector format, photographs or images, PSD files or any other documents you think will help the competitors, upload them here. <b>**NOTE:</b> If you are trying to provide examples of the other designs that you do not own, provide a link to them in your contest description. <b>Do not upload files you do not own.</b>]]>
           </mx:htmlText>
        </mx:Text>
        <mx:Spacer height="5"/>
        <mx:VBox paddingLeft="10">
        	<mx:VBox width="100%" id="uploadFilesVBox">
        		
        		
        	</mx:VBox>
		    
            <mx:VBox width="100%" verticalGap="0">
	            <mx:HBox >
	                <mx:Label text="File Description:" fontWeight="bold"/>
	                <mx:Spacer width="290"/>
	                <mx:LinkButton label="[+ show hint]" click="showfileDecsHint(event)"/>
	            </mx:HBox>
	            <mx:Text id="fileDescHint" color="0x888888" width="500" height="0" visible="false">
	                <mx:text>
	                </mx:text>
	            </mx:Text>
	            <mx:TextArea id="fileDescInput" width="500" height="50" text=""/>
            </mx:VBox>
            <mx:Spacer height="5"/>
            <mx:HBox >
                <mx:Label text="File to Upload:" fontWeight="bold"/>
                <mx:TextInput id="fileToUpload" editable="false" />
                <mx:Button id="browse" buttonMode="true" label="Browse" click="browseFile()" styleName="RedButton"/>
            </mx:HBox>
            <mx:VBox paddingLeft="90">
            	<mx:Button id="upload" buttonMode="true" label="Upload File" click="uploadFile()" styleName="RedButton"/>
            	<mx:Text text="You may add more files after uploading." color="0x888888"/>
            </mx:VBox>
        </mx:VBox>
        
    </mx:VBox>
</mx:Canvas>
