<?xml version="1.0" encoding="utf-8"?>
<tc:ProjectWidgetCodeBehind xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:tc="com.topcoder.flex.widgets.widgetcontent.projectwidget.*"
    xmlns:ns1="com.topcoder.flex.widgets.widgetcontent.projectwidget.com.*"
    horizontalAlign="center" width="100%" height="100%"
    creationComplete="initWidget()">
<mx:Style source="./Style.css" />
<mx:Script>
    <![CDATA[
    	import com.topcoder.flex.widgets.widgetcontent.projectwidget.qs.Contest;
    	import mx.rpc.events.ResultEvent;
    	import mx.controls.scrollClasses.ScrollBar;
    	import mx.events.ResizeEvent;
        import mx.collections.ArrayCollection;
        import mx.core.IUIComponent;
        import mx.core.UIComponent;
        import mx.controls.Button;
        import mx.controls.Alert;
        import mx.core.DragSource;
        import flash.events.MouseEvent;
        import mx.containers.Canvas;
        import mx.events.DragEvent;
        import mx.events.CloseEvent;
        import mx.rpc.soap.SOAPHeader;
        
        import com.topcoder.flex.widgets.widgetcontent.projectwidget.com.ProjectList;
	import com.topcoder.flex.widgets.widgetcontent.projectwidget.qs.Project;
	import mx.core.Application;

        /**
         * Handle cursor's image class.
         */
        [Embed(source="../assets/image/cursor.gif")]
            private var cursor:Class;
        [Embed(source="../assets/image/arrow_left.gif")]
            private var leftArrow:Class;
        [Embed(source="../assets/image/arrow_right.gif")]
            private var rightArrow:Class;

        private var closeBtn : Button = new Button();
        private var maxrestoreBtn : Button = new Button();
        private var refreshBtn : Button = new Button();
        private var collapseBtn : Button = new Button();
        private var helpBtn : Button = new Button();
        private var isMax : Boolean = false;
        private var originalHeight:Number;
        private var myprjData:ArrayCollection;

        private var windowState:Number=WINDOW_STATE_DEFAULT;

        public static const WINDOW_STATE_DEFAULT:Number = -1;
        public static const WINDOW_STATE_COLLAPSED:Number = 0;
        public static const WINDOW_STATE_MAXIMIZED:Number = 1;
        public static const COLLAPSED_HEIGHT:Number = 50;
        public static const LEFTSPACE:Number=25;

        private var iconSize:int=18;
        private var iconGap:int=10;

        private var loader:URLLoader = new URLLoader();

        public function get maximized():Boolean
        {
            return isMax;
        }

        /**
         * Current selected column index.
         */
        [Bindable]
        public var columnIndx: int;

        /**
         * Current selected row index.
         */
        [Bindable]
        public var rowIndx: int;
        [Bindable]
        private var projectId:int;
        
        private var pname:String;
        private var pdesc:String;
        
        private var contests:ArrayCollection;
        
        private var prjArray:ArrayCollection;
        
        private var prjIdx:int=0;
        
        private var statusDict:Dictionary=new Dictionary();
        
        private var username:String=Application.application.parameters.username;  //"user"
        private var password:String=Application.application.parameters.password;  //"password"

	private var projectServiceFacadeWsdl:String=Application.application.parameters.projectServiceFacadeWsdl; 
        private var contestServiceFacadeWsdl:String=Application.application.parameters.contestServiceFacadeWsdl; 
        
        private static const WSSE_SECURITY:QName = new QName( "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "Security" );
		
		
		public static function getHeader(username:String, password:String):SOAPHeader
		{
			var userToken:String = "UsernameToken-"+Math.round(Math.random()*999999).toString();
			var headerXML : XML =  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         			<wsse:UsernameToken wsu:Id={userToken} xmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'>
	            		<wsse:Username>{username}</wsse:Username>
	            		<wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest">{password}</wsse:Password>
         			</wsse:UsernameToken>
      			</wsse:Security>;
      		var header : SOAPHeader = new SOAPHeader( WSSE_SECURITY, headerXML );
      		return header;
		}



        private function initWidget():void{
        	//flash.system.Security.loadPolicyFile("http://localhost:8003/widget_app/crossdomain.xml");
        	prjList.widgetFramework=this.widgetFramework;
            loader.addEventListener(Event.COMPLETE, loadData);
            loader.load(new URLRequest("data/moch.xml"));
			
            
        }
        // this function load an XML as data provider of the main container
        // of the projectList
        private function loadXML(e:Event):void
        {
            result = new XML(e.target.data);
            prjList.dataProvider=result;
        }
        private function loadData(e:Event):void
        {
            ContestServiceFacadeBean.clearHeaders();
        	ContestServiceFacadeBean.addHeader(getHeader(username,password));
        	ContestServiceFacadeBean.getStatusList();
			
            
        }
        private function setProject(e:ResultEvent): void
        {
        	if(e!=null && e.result!=null && e.result is ArrayCollection){
        		prjArray=e.result as ArrayCollection;
        		prjIdx=0;
        		if(prjIdx<prjArray.length)
        		{
        			pname=prjArray[prjIdx].name;
        			pdesc=prjArray[prjIdx].description;
        			projectId=prjArray[prjIdx].projectId;
        			prjIdx++;
        			ContestServiceFacadeBean.clearHeaders();
        			ContestServiceFacadeBean.addHeader(getHeader(username,password));
        			ContestServiceFacadeBean.getContestsForProject.send();
        		}
        	}
        }
        private function setContests(e:ResultEvent): void
        {
        	contests=new ArrayCollection();
        	if(e!=null && e.result!=null)
        	{
        		var arr:ArrayCollection=e.result as ArrayCollection;
        		for(var i:int=0;i<arr.length;i++)
        		{
        			var datePattern:RegExp = /-/g;
            		var datePattern2:RegExp = /T/g;
            		var endTimeTmp:String = arr[i].endTime[0];
            		var timeZoneIndex:Number = endTimeTmp.lastIndexOf("-");
            		endTimeTmp = endTimeTmp.substring(0, timeZoneIndex);
            		timeZoneIndex = endTimeTmp.indexOf("T");
            		var endTimeTmp1:String = endTimeTmp.substring(0, timeZoneIndex).replace(datePattern, "/");
            		var endTimeTmp2:String = endTimeTmp.substring(timeZoneIndex+1, endTimeTmp.length);  
            		var startTimeTmp:String = arr[i].startTime[0];
            		timeZoneIndex = startTimeTmp.lastIndexOf("-");
            		startTimeTmp=startTimeTmp.substring(0, timeZoneIndex);
            		timeZoneIndex = startTimeTmp.indexOf("T");
            		var startTimeTmp1:String = startTimeTmp.substring(0, timeZoneIndex).replace(datePattern, "/");
            		var startTimeTmp2:String = startTimeTmp.substring(timeZoneIndex+1, startTimeTmp.length);
        			var c:Contest=new Contest(arr[i].contestData.contestId,arr[i].contestData.name,startTimeTmp1+" "+startTimeTmp2,
        			endTimeTmp1+" "+endTimeTmp2,arr[i].contestData.numberOfRegistrants,           arr[i].contestData.submissionCount,
        			arr[i].contestData.forumPostCount,arr[i].contestData.forumId,
        			statusDict[arr[i].contestData.statusId]);
        			contests.addItem(c);
        		}
        	}
        	
        	var list:ProjectList=new ProjectList();
			prjList.addChild(list);
			list.setStyle("verticalScrollPolicy","off");
			list.dataProvider=new Project(pname,pdesc,"",contests);
			
				if(prjIdx<prjArray.length)
        		{
        			pname=prjArray[prjIdx].name;
        			pdesc=prjArray[prjIdx].description;
        			projectId=prjArray[prjIdx].projectId;
        			prjIdx++;
        			ContestServiceFacadeBean.clearHeaders();
        			ContestServiceFacadeBean.addHeader(getHeader(username,password));
        			ContestServiceFacadeBean.getContestsForProject.send();
        		}
        	
        	
        }
        private function preprocessStatuses(e:ResultEvent): void
        {
        	if(e!=null && e.result!=null){
        		var statuses:ArrayCollection=e.result as ArrayCollection;
        		for(var i:int=0;i<statuses.length;i++)
        		{
        			statusDict[statuses[i].statusId]=statuses[i].name;
        		}
        		
        	}
        	ProjectServiceFacadeBean.clearHeaders();
            ProjectServiceFacadeBean.addHeader(getHeader(username,password));

            ProjectServiceFacadeBean.getAllProjects();
        }
    ]]>
</mx:Script>
<mx:WebService id="ProjectServiceFacadeBean" 
wsdl="{projectServiceFacadeWsdl}"> 
<mx:operation name="getAllProjects" resultFormat="object" result="setProject(event)"  /> 
</mx:WebService>
<mx:WebService id="ContestServiceFacadeBean" 
wsdl="{contestServiceFacadeWsdl}"> 
<mx:operation name="getStatusList" resultFormat="object" result="preprocessStatuses(event)"  /> 
<mx:operation name="getContestsForProject" resultFormat="object" result="setContests(event)"> 
<mx:request>
<arg0>{projectId}</arg0>
</mx:request>
</mx:operation>
</mx:WebService>


		<mx:Box id="container" paddingTop="5" paddingRight="5" width="100%" height="98%"
				horizontalAlign="center" horizontalScrollPolicy="off" verticalScrollPolicy="auto">
		    <ns1:ProjectsContainer id="prjList"  horizontalScrollPolicy="off" verticalScrollPolicy="auto" maxHeight="500"  width="100%" height="100%">
		    </ns1:ProjectsContainer>
		</mx:Box>		

</tc:ProjectWidgetCodeBehind>
