<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (C) 2009 TopCoder Inc., All Rights Reserved.
-->

<!--

     This mxml component is to render contest row.
     
     Updated for Cockpit Release Assembly 3 [RS: 1.1.2]
        - For read only, when a user selects the contest, it will go to launch a contest just like now, 
        - but the user can only view the contest information and can not update any thing. 
     
     Updated for Cockpit Release Assembly 2 [BUGR-1830]
        - Made Model class and its uses non singleton.
        
     Version 1.0.1 (Spec Reviews Finishing Touches v1.0) Change Notes:
        - added icon for spec review status.
        - removed the extra column. 
     Version 1.0.2 (Cockpit Release Assembly 10 - My Projects 1.0) Change Notes:
        - Look and feel changed to match the prototype.
        - Refer http://www.topcoder.com/wiki/display/docs/Other+Cockpit+Release+Assembly+10+-+My+Projects

     @author TCSDEVELOPER, TCSASSEMBLER
     @since My Project Widget Overhaul
     @version 1.0.2
-->
<mx:VBox 
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:filters="flash.filters.*"
    xmlns:degrafa="http://www.degrafa.com/2007"
    width="100%"
    borderStyle="solid"
    borderSides="bottom"
    styleName="ContestRowStyle"
    backgroundSize="100%">
    <mx:Script>
        <![CDATA[
            import com.topcoder.flex.widgets.widgetcontent.projectwidget.ProjectWidget;
            import mx.controls.ButtonLabelPlacement;
            import com.topcoder.flex.widgets.model.IWidget;
            import com.topcoder.flex.widgets.widgetcontent.projectwidget.vo.Contest;
            import com.topcoder.flex.widgets.widgetcontent.projectwidget.model.Model;
            import com.topcoder.flex.widgets.widgetcontent.submissionviewerwidget.SubmissionViewerWidget;
            import mx.formatters.DateFormatter;
            import mx.collections.ArrayCollection;
            import flash.utils.Dictionary;
            import com.topcoder.flex.Helper;
            import mx.controls.PopUpButton;
            import mx.controls.Alert;
            import mx.events.MenuEvent;
	    import mx.controls.Menu;
	    import mx.binding.utils.BindingUtils;
        
            /**
             * Row number of this contest row.
             */
            private var _rowNum:int;

            /**
             * Contest for this contest row.
             */
            [Bindable]
            private var contest:Contest;
        
            /**
             * Menu in the PopupButton
             */
            private var actionMenu:Menu;

            /**
             * Reference to the instance of Project Widget class.
             * 
             * @since Cockpit Release Assembly 2 [BUGR-1830]
             */
            [Bindable]
            public var parentWidget:ProjectWidget=null;

            /**
             * The base url for the link of studio contents;
             */
            private var studioContentDetailUrlBase:String="http://studio.topcoder.com/?module=ViewContestDetails&ct=";

            /**
             * The base url for the link of software contents;
             */
            private var softwareContentDetailUrlBase:String = "http://www.topcoder.com/tc?module=ProjectDetail&pj=";
            
            /**
             * The base url for the link of OR;
             */
            private var softwareConetestORurl:String = "http://software.topcoder.com/review/actions/ViewProjectDetails.do?method=viewProjectDetails&pid=";

            /**
             * The base url for the link of forum;
             */
            private var studioForumUrlBase:String="http://studio.topcoder.com/forums?module=ThreadList&forumID=";

            /**
             * The base url for the link of contents;
             */
            private var softwareForumUrlBase:String="http://forums.topcoder.com/?module=Category&categoryID=";
            
            /**
             * The selected index in popupbutton;
             */
            private var sltIndex:int = 0;
            
            /**
             * The width of status bar;
             */
            [Bindable]
            private var capacityWidth:int = 240;

            /**
             * The green filled width of status bar;
             */
            [Bindable]
            private var greenWidth:int;
            /**
             * The yellow filled width of status bar;
             */
            [Bindable]
            private var yellowWidth:int;

            /**
             * The const string;
             */
            private static var STUDIO_TYPE:String = "Studio";

            /**
             * Sets the data for this contest row.
             *
             * @param value the contest data.
             */
            override public function set data(value:Object):void {
                contest=value as Contest;
                super.data=value;
                startDate=contest.startDate;
                endDate=contest.endDate;
                var midDate:Date = null;

                // only show green/yellow if not draft or scheduled
                if (contest.status.toLowerCase() != "draft" && contest.status.toLowerCase() != "scheduled")
                {

                    if (contest.milestoneDate != null) {
                        midDate = contest.milestoneDate;
                    }
                    if (contest.submissionEndDate != null) {
                        midDate = contest.submissionEndDate;
                    }
                            var widthToday:int = Math.max(capacityWidth * (new Date().getTime() - contest.start.getTime()) 
                        / (contest.end.getTime() - contest.start.getTime()), 0);

                    if (midDate != null) {
                        var widthMid:int = capacityWidth * (midDate.getTime() - contest.start.getTime())  / (contest.end.getTime() - contest.start.getTime());
                        greenWidth = Math.min(widthToday, widthMid);
                        yellowWidth = widthToday;
                    } else {
                        greenWidth = yellowWidth = widthToday;
                    }

          
                    greenWidth = Math.min(greenWidth, capacityWidth);
                    yellowWidth = Math.min(yellowWidth, capacityWidth);
                }
                // else reset
                else
                {
                    greenWidth = 0;
                    yellowWidth = 0;
                }
            }

            /**
             * Sets the row number of this contest row.
             *
             * @param temp row number.
             */
            public function set rowNum(temp:Number):void {
                _rowNum=temp;
                if ((_rowNum % 2) == 0) {
                    var o:Object=getStyle("oddRowColor");
                    this.setStyle("backgroundColor", getStyle("oddRowColor"))
                } else {
                    this.setStyle("backgroundColor", getStyle("evenRowColor"))
                }
            }

            /**
             * Gets the row number of this contest row.
             *
             * @return the row number.
             */
            public function get rowNum():Number {
                return _rowNum;
            }

            /**
             * Handles the set of status label.
             */
            public function handleStatus(input:String):String {
                statusBtn.label=input;
                switch (input.toLowerCase()) {
                    case "active":
                    case "terminated":
                    case "completed":
                    case "draft":
                    case "scheduled":
                    case "danger":
                        return input.toLocaleLowerCase();
                    default:
                        return "standard";
                }
            }

            /**
             * Handles the set of link properties (when specified value > 0) for forum and submissions.
             *
             * @param input the input value.
             * @param linkButton the reference to link button.
             * @param clickHandler the reference to click handler that need to be called on link button click.
             */
            private function setLinkProperties(input:int, linkButton:LinkButton, clickHandler:Function):String {
                if (contest.type == STUDIO_TYPE) {
                    if (input >= 0) {
                        linkButton.addEventListener(MouseEvent.CLICK, clickHandler);
                    }
                    if (input == 0 && linkButton == lblForumPosts) {
                        return "0";
                    }
                    return "" + input;
                } else {
                    linkButton.addEventListener(MouseEvent.CLICK, clickHandler);
                    return "" + input;
                }
            }

            /**
             * Handles the set of review status link properties.
             * 
             * Updated for Version 1.0.1
             *    - style name is set as per the status.
             *
             * @param input the review status value.
             * 
             * @since Cockpit Launch Contest Widget - Inline Spec Reviews - Part 1
             */
            private function getReviewStatusBtnStyle(status:String):String {
                var styleName:String="";
                if (status == "PASSED") {
                    styleName="reviewPassedIcon";
                } else if (status == "FAILED") {
                    styleName="reviewFailedIcon";
                } else {
                    styleName="reviewNeededIcon";    
                } 

                return styleName;
            }
            
            /**
             * Shows the contest monitor widget for this contest row.
             */
            private function showStats():void {
                if (contest.type == STUDIO_TYPE) {
                    // restore widget to normal width if it's not already.
                    if (parentWidget.isMaximized()) {
                        parentWidget.restoreScreen();
                    }
                    
                    // call method on widget to load the selected contest.
                    var tabName:String=parentWidget.widgetFramework.getActiveTabName();
                    var widgetName:String="Contest Monitor";
                    openWidget(tabName, widgetName);
                } else {
                    navigateToURL(new URLRequest(softwareConetestORurl + contest.id));
                }
            }

            /**
             * Shows the submission viewer widget for this contest row.
             */
            private function showSubmission(event:MouseEvent):void {
                if (contest.type == STUDIO_TYPE) {
                    
                    if (contest.submissions > 0) {
                        
                        // restore widget to normal width if it's not already.
                        if (parentWidget.isMaximized()) {
                            parentWidget.restoreScreen();
                        }
                        
                        var tabName:String=null;
                        var widgetName:String=null;
                        // open submission viewer widget and load the current contest.
                        tabName=parentWidget.widgetFramework.getActiveTabName();
                        widgetName="Submission Viewer";
                        openWidget(tabName, widgetName);
                        
                        // open contest monitor widget and load the current contest.
                        tabName=parentWidget.widgetFramework.getActiveTabName();
                        widgetName="Contest Monitor";
                        openWidget(tabName, widgetName);
                    }
                } else {
                    navigateToURL(new URLRequest(softwareConetestORurl + contest.id));
                }
            }

            /**
             * utility function that creates / opens the Submission Viewer or Contest Monitor widget.
             *
             * @param tabName the tab in which to open the widget.
             * @param widgetName name of the widget to be opened.
             */
            private function openWidget(tabName:String, widgetName:String):void {
                var widget:IWidget=parentWidget.widgetFramework.openWidget(tabName, widgetName);

                var props:Dictionary=new Dictionary();
                props["pid"]=parentWidget.model.currentProj.id;
                props["toBeLoadedContestId"]=contest.id;
                if (widget == null) {
                    // properties (or attributes) of widget that need to be created new.
                    var propertiesObj:Dictionary=new Dictionary();
                    propertiesObj["tabName"]=tabName;
                    propertiesObj["name"]=widgetName;
                    propertiesObj["title"]=widgetName;
                    propertiesObj["column"]="2";
                    propertiesObj["minimized"]="true";
                    propertiesObj["maximized"]="false";
                    propertiesObj["allowclose"]="true";
                    propertiesObj["rowspan"]=1

                    if (widgetName == "Submission Viewer") {
                        propertiesObj["row"]="1";
                        propertiesObj["columnspan"]=5;
                    } else if (widgetName == "Contest Monitor") {
                        propertiesObj["row"]="2";
                        propertiesObj["columnspan"]=4;
                    }

                    propertiesObj["widgetConfig"]=props;
                    parentWidget.widgetFramework.addWidgetWithProperties(propertiesObj);
                } else {
                    props["reload"]=true;
                    widget.setAttributes(props);
                }
            }

            /**
             * Handler for contest label click.
             */
            private function handleClick():void {
                if (contest.type == "Studio") {
                    navigateToURL(new URLRequest(studioContentDetailUrlBase + contest.id), "_blank");
                } else {
                    navigateToURL(new URLRequest(softwareContentDetailUrlBase + contest.id), "_blank");
                }
            }
            
           
            /**
             * Init the pop up button.
             */           
            private function initActionPopBtn():void {
	        actionMenu = new Menu();
		BindingUtils.bindProperty(actionMenu, "width", actionPopBtn, "width");
                var labels:Object;
                if (editable()) {
                    labels = [{label: "View"}, {label: "Edit"}, {label: "Submissions"}];        
                } else {
                    labels = [{label: "View"}, {label: "Submissions"}];        
                }
                actionMenu.dataProvider = labels;
                actionMenu.selectedIndex = 0;       
                actionMenu.addEventListener("itemClick", itemClickHandler);
                actionPopBtn.popUp = actionMenu;
                actionPopBtn.label = actionMenu.dataProvider[actionMenu.selectedIndex].label;
            }
            
            /**
             * Handler for pop up button item selection.
             */           
            private function itemClickHandler(event:MenuEvent):void {    
	    	actionPopBtn.close();
		if (event != null) {
			sltIndex = event.index;
		}
                if (!editable() && sltIndex == 1) {
                    sltIndex = 2;
                }
                if (sltIndex == 0) {
                    //View contest
                    handleClick();
                } else if (sltIndex == 1) {
                    //Edit
                    editContest();
                } else if (sltIndex == 2) {
                    //View submisions
                    if (contest.type == "Studio") {
                        showSubmission(null);
                    } else {
                        navigateToURL(new URLRequest(softwareConetestORurl + contest.id), "_blank");
                    }                    
                }            }

            /**
             * Handler for forum link click.
             */
            private function openForum(event:MouseEvent):void {
                if (contest.type == STUDIO_TYPE) {
                    
                    if (contest.forumId == null || contest.forumId == "-1") {
                        return;
                    }
                    navigateToURL(new URLRequest(studioForumUrlBase + contest.forumId));
                } else {

                    if (contest.forumId == null || contest.forumId == "0") {
                        return;
                    }

                    navigateToURL(new URLRequest(softwareForumUrlBase + contest.forumId));
                }
            }

            /**
             * Row mouse over handler.
             * 
             * Updated for Cockpit Release Assembly 1 v1.0 [BUGR-1847]
             * Show edit button for non studio contests also which are of type active or inactive.
             * 
             * <p>
             * Updated for Cockpit Release Assembly 3 [RS: 1.1.2]
             *    - earlier for read only contest (as per the permission), launch widget could not be launched.
             * </p>
             *
             * Fix for [BUGR-2038]: if type is not studio, show edit button if
             * status is 'draft' or 'scheduled' instead of status 'active'.
             */
            private function editable():Boolean {
                if (!contest || !contest.type || !contest.status)
                {
                    return false;
                }
                if ((contest.type.toLocaleLowerCase() == "studio" 
                        && (contest.status.toLocaleLowerCase() == "draft" 
                                || contest.status.toLocaleLowerCase() == "unactive - not yet published" 
                                || contest.status.toLocaleLowerCase() == "scheduled")) 
                    || (contest.type.toLocaleLowerCase() != "studio" 
                        && (contest.status.toLocaleLowerCase() == "draft" 
                                || contest.status.toLocaleLowerCase() == "scheduled"
                                || contest.status.toLocaleLowerCase() == "inactive"))) {

                    return true;
                }
                return false;
            }

            /**
             * Handler for click on edit contest button.
             * 
             * Updated for Cockpit Release Assembly 1 v1.0 [BUGR-1847]
             * Additionally pass contest type so that launch widget can distinguish between software and studio contests.
             * 
             * <p>
             * Updated for Cockpit Release Assembly 3 [RS: 1.1.2]
             *    - launch widget should distinguish between read only and write allowed contests.
             *    - earlier for read only contest (as per the permission), launch widget could not be launched.
             * </p>
             */
            private function editContest():void {

                var widget:IWidget=parentWidget.widgetFramework.getWidget("Launch Contests", "Launch Contest");
            var props:Dictionary=new Dictionary();
            props["contestType"]=contest.type;
            props["contestid"]=contest.id;
            props["projectid"]=contest.projId;
            props["projectName"]=contest.projName;
                
            var mode:String="READ";
                
            if(contest.permission=="contest_full" 
                    || contest.permission=="contest_write"
                    || (contest.permission==null && 
                            (parentWidget.model.currentProj.permission=="project_full" 
                                || parentWidget.model.currentProj.permission=="project_write"))) {
                    mode="WRITE";				                
                }
                
                props["mode"]=mode;
            
            widget.setAttributes(props);
            parentWidget.widgetFramework.openWidget("Launch Contests", "Launch Contest");
            }

            /**
             * Setters for start date of the contest
             *
             * @param temp start date.
             */
            private function set startDate(temp:String):void {
                var dateStr:String=temp;
                if (dateStr) {
                    var dataStrArr:Array=dateStr.split("T");
                    var timeStrArray:Array=dataStrArr[1].split(".");
                    var timeStr:String=timeStrArray[1];
                    lblStartDatePart.text=dataStrArr[0] + " " + timeStrArray[0].substr(0,5) + " EST";
                }
            }

            /**
             * Setters for end date of the contest.
             *
             * @param temp end date of the contest.
             */
            private function set endDate(temp:String):void {
                var dateStr:String=temp;
                if (dateStr) {
                    var dataStrArr:Array=dateStr.split("T");
                    var timeStrArray:Array=dataStrArr[1].split(".");
                    var timeStr:String=timeStrArray[1];
                    lblEndDatePart.text=dataStrArr[0] + " " + timeStrArray[0].substr(0,5) + " EST";
                }
            }
            
            /**
             * Handler for click on review status button.
             * 
             * Updated for Version 1.0.1
             *    - pass the mode to Launch Widget.
             *
             * @since Cockpit Launch Contest Widget - Inline Spec Reviews - Part 1
             */
            private function openReviewScreen(event:MouseEvent):void {
                if (!editable()) {
                    // TCCC-1473
                    // disable review button click if launch action is not allowed.
                    return;
                }
                var widget:IWidget=parentWidget.widgetFramework.getWidget("Launch Contests", "Launch Contest");
                var props:Dictionary=new Dictionary();
                props["contestType"]=contest.type;
                props["contestid"]=contest.id;
                props["projectid"]=contest.projId;
                props["projectName"]=contest.projName;
                props["screen"]="Review";
                props["creator"]=contest.createUser;
                
                var mode:String="READ";
                
                if(contest.permission=="contest_full" 
                    || contest.permission=="contest_write"
                    || (contest.permission==null && 
                            (parentWidget.model.currentProj.permission=="project_full" 
                                || parentWidget.model.currentProj.permission=="project_write"))) {
                    mode="WRITE";				                
                }
                
                props["mode"]=mode;
                
                widget.setAttributes(props);
                parentWidget.widgetFramework.openWidget("Launch Contests", "Launch Contest");
            }         
        ]]>
    </mx:Script>
    <mx:HBox width="100%"
             styleName="rowContent">
        <mx:LinkButton buttonMode="true"
                           useHandCursor="true"
                           id="lblContextName"
                           styleName="linkBtn"
                           label="{contest.name}"
                           click="handleClick()"
                           width="30%" />
        <mx:Text width="18%"
                 styleName="rowContentLabel"
                 id="lblStartDatePart"/>
        <mx:Text width="18%"
                 styleName="rowContentLabel"
                 id="lblEndDatePart"/>
        <mx:Text width="10%"
                 styleName="rowContentLabel"
                 id="lblType"
                 htmlText="{contest.type}"/>
        <mx:HBox width="10%">
            <mx:Spacer width="100%"/> 
            <mx:Button id="reviewStatusBtn"
                       styleName="{getReviewStatusBtnStyle(contest.reviewStatus)}"
                       width="20"
                       height="20"
                       visible="true"
                       click="openReviewScreen(event)"/>   
            <mx:Spacer width="100%"/> 
        </mx:HBox>
        <mx:PopUpButton 
            id="actionPopBtn" 
            creationComplete="initActionPopBtn();"
            width="15%"
            click="itemClickHandler(null)" />
    </mx:HBox>
    <mx:HBox width="100%"
             styleName="rowContent">
        <mx:HBox width="30%">
            <mx:VBox  verticalAlign="center">
                <mx:LinkButton 
                    buttonMode="true"
                    id="statusBtn"
                    styleName="{handleStatus(contest.status)}"
                    labelPlacement="bottom"
                    click="showStats()"/>
            </mx:VBox>
            <mx:HBox>
                <mx:VBox horizontalAlign="right" verticalAlign="top">
                    <mx:Text
                        paddingTop="-2"
                        paddingBottom="-2"
                        height = "15"
                        htmlText="Registrations: "/>
                    <mx:Text
                        paddingTop="-2"
                        paddingBottom="-2"
                        height = "15"
                        htmlText="Submissions: "/>
                    <mx:Text
                        paddingTop="-2"
                        paddingBottom="-2"
                        height = "15"
                        htmlText="Forum Posts: "/>
                </mx:VBox>
                <mx:VBox horizontalAlign="left" verticalAlign="top">
                    <mx:Text 
                        paddingTop="-2"
                        paddingBottom="-2"
                        width="100%"
                        height = "15"
                        id="lblRegistrants"
                        htmlText="{contest.registrants}"/>
                    <mx:LinkButton 
                        paddingTop="-2"
                        paddingBottom="-2"
                        paddingLeft="0"
                        paddingRight="0"
                        height = "15"
                        id="lblSubmissions"
                        textDecoration="underline"
                        label="{setLinkProperties(contest.submissions, lblSubmissions, showSubmission)}"/>
                    <mx:LinkButton 
                        paddingTop="-2"
                        paddingBottom="-2"
                        paddingLeft="0"
                        paddingRight="0"
                        height = "15"
                        id="lblForumPosts"
                        textDecoration="underline"
                        label="{setLinkProperties(contest.forumPosts, lblForumPosts, openForum)}"/>
                </mx:VBox>
            </mx:HBox>
        </mx:HBox>  
        <mx:HBox width="{capacityWidth}">
            <!-- Masked Surface and Filter for the Capacity Indicator -->
            <degrafa:Surface
                id="capacitySurface"
                verticalCenter="0"
                horizontalCenter="0"
                width="{capacityWidth}"
                height="15"
                mask="{roundMask}">
                
                <degrafa:GeometryGroup
                    id="roundMask">
                    <degrafa:RoundedRectangle
                        width="{capacityWidth}"
                        height="{capacitySurface.height}"
                        cornerRadius="20"
                        fill="{colorOne}"/>
                            <degrafa:GeometryComposition
                                graphicsTarget="{[capacitySurface]}">
                            
                            <degrafa:fills>
                                <degrafa:SolidFill
                                    id="colorOne"
                                    color="#479B55"/>
                                <degrafa:SolidFill
                                    id="colorTwo"
                                    color="#F0E765"/>
                                <degrafa:SolidFill
                                    id="colorThree"
                                    color="#FFFFFF"/>
                            </degrafa:fills>
                            
                            <degrafa:strokes>
                                <degrafa:SolidStroke
                                    id="whiteStroke"
                                    color="#FFF"
                                    weight="1"
                                    alpha=".15"/>
                                <degrafa:SolidStroke
                                    id="darkStroke"
                                    color="#000"
                                    weight="1"
                                    alpha=".2"/>
                            </degrafa:strokes>
                            
                                    
                                <degrafa:RegularRectangle
                                    id="thirdRect"
                                    width="{capacityWidth}"
                                    height="{capacitySurface.height}"
                                    fill="{colorThree}"/>
                                <degrafa:RegularRectangle
                                    id="secondRect"
                                    width="{yellowWidth}"
                                    height="{capacitySurface.height}"
                                    fill="{colorTwo}"/>	
                                <degrafa:RegularRectangle
                                    id="firstRect"
                                    width="{greenWidth}"
                                    height="{capacitySurface.height}"
                                    fill="{colorOne}"/>
                                    
                                <degrafa:VerticalLineRepeater
                                    x="20"
                                    y="0"
                                    y1="{capacitySurface.height}"
                                    moveOffsetX="20"
                                    count="{capacityWidth/20}"
                                    stroke="{darkStroke}"/>
                                <degrafa:VerticalLineRepeater
                                    x="21"
                                    y="0"
                                    y1="{capacitySurface.height}"
                                    moveOffsetX="20"
                                    count="{capacityWidth/20}"
                                    stroke="{whiteStroke}"/>
                        
                        </degrafa:GeometryComposition>
                        
                </degrafa:GeometryGroup>
                
                <degrafa:filters>
                    <filters:GlowFilter
                        color="#000000"
                        alpha=".1"
                        blurX="4"
                        blurY="4"
                        inner="true"
                        quality="6"/>

                </degrafa:filters>
            </degrafa:Surface>
        </mx:HBox>
        <mx:Spacer width="20%" />
    </mx:HBox>    
</mx:VBox>
