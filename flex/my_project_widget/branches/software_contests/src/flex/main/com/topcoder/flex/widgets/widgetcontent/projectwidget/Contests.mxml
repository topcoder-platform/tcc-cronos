<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (C) 2009 TopCoder Inc., All Rights Reserved.
-->

<!--

     This mxml component is to render contest page.

     @author TCSDEVELOPER
     @since My Project Widget Overhaul
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:flex="com.topcoder.flex.widgets.widgetcontent.projectwidget.*"
           horizontalScrollPolicy="off"
           verticalScrollPolicy="off"
           width="100%"
           height="100%"
           creationComplete="init()">
    <mx:Script>
        <![CDATA[
            import mx.collections.SortField;
            import com.topcoder.flex.widgets.widgetcontent.projectwidget.utils.Status;
            import mx.utils.ObjectUtil;
            import mx.collections.Sort;
            import com.topcoder.flex.widgets.widgetcontent.projectwidget.vo.Cate;
            import com.topcoder.flex.widgets.widgetcontent.projectwidget.vo.Contest;
            import com.topcoder.flex.widgets.widgetcontent.projectwidget.model.Model;
            import com.topcoder.flex.widgets.widgetcontent.projectwidget.vo.Project;
            import mx.managers.PopUpManager;
            import mx.collections.ArrayCollection;
            import mx.controls.ButtonLabelPlacement;

            /**
             * Reference to singleton instance of Project Widget Model class.
             */
            [Bindable]
            private var model:Model=Model.instance;

            /**
             * Project for this contest page.
             */
            [Bindable]
            public var proj:Project;

            /**
             * Status group for this contest page.
             */
            [Bindable]
            public var statusGroup:Dictionary=new Dictionary();

            /**
             * Type group for this contest page.
             */
            [Bindable]
            public var typeGroup:Dictionary=new Dictionary();

            /**
             * It gets called on this component initialization
             */
            private function init():void {
                this.shower.dataProvider=proj.contests;
                setContest=this.proj;
            }

            /**
             * Updates this contests page data.
             * It simply calls setContest.
             */
            public function set update(nouse:Boolean):void {
                setContest=model.currentProj;
            }

            /**
             * Sets the contest for this contests page.
             *
             * @param value project for this contest.
             */
            public function set setContest(value:Project):void {
                this.proj=value;
                if (initialized && proj) {
                    statusGroup=new Dictionary();
                    typeGroup=new Dictionary();
                    for each (var cont:Contest in value.contests) {
                        var type:String=cont.type;
                        var status:String=cont.status;
                        if (!statusGroup[status]) {
                            statusGroup[status]=new ArrayCollection();
                        }
                        var arr:ArrayCollection=statusGroup[status] as ArrayCollection;
                        arr.addItem(cont);
                        if (!typeGroup[type]) {
                            typeGroup[type]=new ArrayCollection();
                        }
                        arr=typeGroup[type] as ArrayCollection;
                        arr.addItem(cont);
                    }
                    changeGroup();
                }
            }

            /**
             * Handler logic for contest group change.
             */
            private function changeGroup():void {
                if (groupCB.selectedIndex == 0) {
                    stack.selectedChild=shower;

                    // for no group sort the contests by name.
                    sortByName(proj.contests);

                    shower.dataProvider=proj.contests;
                } else {
                    stack.selectedChild=group;
                    model.contest=new ArrayCollection();
                    if (groupCB.selectedIndex == 1) {

                        for (var i:int=0; i < Status.STATUS_SORT_ORDER.length; i++) {
                            var status:String=Status.STATUS_SORT_ORDER[i];
                            var a1:ArrayCollection=statusGroup[status] as ArrayCollection;
                            if (a1) {
                                // sort contests within individual group by name.
                                sortByName(a1);

                                var cate:Cate=new Cate();
                                cate.label=status;
                                cate.contests=a1;

                                model.contest.addItem(cate);
                            }
                        }
                    } else {
                        for (var type:String in typeGroup) {
                            var cate2:Cate=new Cate();
                            cate2.label=type;
                            cate2.contests=typeGroup[type] as ArrayCollection;

                            // sort contests within individual group by name.
                            sortByName(cate2.contests);

                            model.contest.addItem(cate2);

                        }
                    }
                    group.dataProvider=model.contest;
                }
                invalidateDisplayList();
            }

            /**
             * Shows the date picker.
             */
            private function showDatePicker():void {
                model.showDateChooser=!model.showDateChooser;
            }

            /**
             * Over-rides this component's updateDisplayList
             *
             * @param unscaledWidth unscaled width of the component.
             * @param unscaledHeight unscaled height of the component.
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {

                super.updateDisplayList(unscaledWidth, unscaledHeight);
                if (initialized) {
                    stack.height=this.height - topBar.height - bottomBar.height;
                }
            }

            /**
             * Handler for click on add contest button.
             */
            private function addContest():void {
                var dict:Dictionary=new Dictionary();
                var tabDict:Dictionary=new Dictionary();
                tabDict["columnNum"]=1;

                model.projectWidget.widgetFramework.addWidgetEx2("Launch Contest", "Launch Contest", "Launch Contest", dict, tabDict);
            }

            /**
             * Sorts the given collection by name
             *
             * @param coll specified array collection to be sorted.
             */
            private function sortByName(coll:ArrayCollection):void {
                var sort:Sort=new Sort();
                sort.compareFunction=compareName;
                coll.sort=sort;

                coll.refresh();
            }

            /**
             * Callback function on sorting by name.
             */
            private function compareName(a:Object, b:Object, fields:Array=null):int {
                return ObjectUtil.stringCompare(b.name, a.name, true);
            }
        ]]>
    </mx:Script>
    <mx:Binding source="model.currentProj"
                destination="setContest"/>
    <mx:Binding source="model.changeProj"
                destination="update"/>
    <mx:VBox width="100%"
             height="100%"
             verticalGap="0"
             paddingTop="0"
             paddingBottom="0">
        <mx:HBox width="100%"
                 horizontalAlign="right"
                 verticalAlign="middle"
                 id="topBar">
            <mx:Label text="Group By:"
                      styleName="normalStyle"/>
            <mx:ComboBox id="groupCB"
                         valueCommit="changeGroup()"
                         width="85"
                         styleName="normalStyle"
                         enabled="{!model.showDateChooser}">
                <mx:dataProvider>
                    <mx:String>No Group</mx:String>
                    <mx:String>Status Type</mx:String>
                    <mx:String>Contest Type</mx:String>
                </mx:dataProvider>
            </mx:ComboBox>
            <mx:Label text="Date Filter:"
                      styleName="normalStyle"/>
            <mx:Button styleName="miniButton"
                       buttonMode="true"
                       width="14"
                       height="14"
                       click="showDatePicker()"/>
            <mx:VBox verticalGap="0">
                <mx:Label text="From:"/>
                <mx:TextInput id="fromDate"
                              text="{model.currentProj.startDateFilter}"
                              editable="false"
                              width="75"/>
            </mx:VBox>
            <mx:VBox verticalGap="0">
                <mx:Label text="To:"/>
                <mx:TextInput id="toDate"
                              text="{model.currentProj.endDateFilter}"
                              editable="false"
                              width="75"/>
            </mx:VBox>
        </mx:HBox>
        <mx:ViewStack width="100%"
                      id="stack">
            <flex:ContestShower id="shower"
                                height="100%"
                                width="100%"
                                dataProvider="{proj.contests}"
                                isTabMode="false"/>
            <flex:DragAbleAccordion width="100%"
                                    id="group"/>
        </mx:ViewStack>
        <mx:Spacer height="100%"/>
        <mx:HBox width="100%"
                 horizontalAlign="right"
                 paddingRight="2"
                 paddingBottom="2"
                 id="bottomBar">
            <mx:Button label="ADD NEW CONTEST"
                       labelPlacement="{ButtonLabelPlacement.LEFT}"
                       styleName="button"
                       buttonMode="true"
                       click="addContest()"/>
        </mx:HBox>
    </mx:VBox>
    <flex:DateChooser right="5"
                      top="30"
                      id="popUp"
                      visible="{model.showDateChooser}"/>
</mx:Canvas>
