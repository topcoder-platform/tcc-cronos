<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (C) 2009 TopCoder Inc., All Rights Reserved.
-->

<!--

     This mxml component is the main entry point for the my project widget.
     
     Updated for Cockpit Release Assembly 2 [BUGR-1830]
        - Added a button for "Open in New Tab"
        - Added handler for the same.
        - Made Model class non singleton. 

     @author TCSDEVELOPER
     @since My Project Widget Overhaul
-->
<tc:ProjectWidgetCodeBehind xmlns:mx="http://www.adobe.com/2006/mxml"
                            width="100%"
                            height="100%"
                            horizontalGap="-1"
                            creationComplete="init()"
                            paddingLeft="0"
                            paddingRight="7"
                            paddingTop="9"
                            paddingBottom="11"
                            xmlns:tc="com.topcoder.flex.widgets.widgetcontent.projectwidget.*"
                            xmlns:mxeffects="com.adobe.ac.mxeffects.*"
			    resizeEffect="{resize}">
    <mx:Style source="./Style.css"/>
    <mx:Script>
        <![CDATA[
            import mx.events.EffectEvent;
            import mx.utils.ObjectUtil;
            import mx.collections.Sort;
            import com.topcoder.flex.util.date.DateUtil;
            import com.topcoder.flex.widgets.widgetcontent.projectwidget.vo.Contest;
            import mx.controls.Alert;
            import mx.collections.ArrayCollection;
            import com.topcoder.flex.Helper;
            import mx.rpc.events.ResultEvent;
            import mx.core.Application;
            import com.topcoder.flex.widgets.widgetcontent.projectwidget.vo.Project;
            import com.topcoder.flex.widgets.widgetcontent.projectwidget.model.Model;
            import mx.core.UIComponent;
            import flash.events.Event;
            import mx.controls.ButtonLabelPlacement;

            /**
             * Blazed end point application parameter.
             */
            [Bindable]
            private var blazedsendpoint:String=Application.application.parameters.blazedsendpoint;


            /**
             * Contest service facade url.
             */
            [Bindable]
            private var contestServiceFacadeWsdl:String=Application.application.parameters.contestServiceFacadeWsdl;

            /**
             * Index of the currently selected button (Details or Contests).
             */
            private var buttonSelectedIndex:int=0;

            /**
             * Indicates if left project panel is open or closed.
             */
            private var open:Boolean=true;

            /**
             * Timer for flip animation effects.
             */
            private var timer:Timer=new Timer(300, 1);

            /**
             * Animation ui component.
             */
            private var coms:UIComponent=null;

            /**
             * Animation flip direction - top or left/right.
             */
            private var _direction:String;

            /**
             * Temporary variable that gets used during rotate animation.
             */
            private var v:Boolean=false;

            /**
             * Page index for project list pagination.
             */
            private var index:int=0;
            
            //private var _maxWidth:Number=0;
            //private var _maxHeight:Number=0;

            /**
             * Retrieves password from blazed data service.
             */
            private function getDataService():void {
                dataservice.getPassword();
            }

            /**
             * Webservice handler for password retrieval from blazed data service.
             *
             * @param e the webservice result event.
             */
            private function processPassword(e:ResultEvent):void {
                if (e != null && e.result != null) {
                    password=e.result.toString();

                }

                initWidget();
            }

            /**
             * Initializes the widget.
             * This gets called on successful password retrieval.
             */
            private function initWidget():void {
                loadData();
                if (this.contest) {
                    this.contest.addEventListener("SET_CONTEST_COMPLETE", rotateInEventHandler);
                }
                
                if (this.proDetail) {
                    this.proDetail.addEventListener("SET_CONTEST_COMPLETE", rotateInEventHandler);
                }
                
                timer.addEventListener(TimerEvent.TIMER_COMPLETE, rotate);
            }

            /**
             * Handler for left project panel open / close.
             */
            private function openCloseLeft():void {
                open=!open;
                arrow.selected=open;
                if (open) {
                    proList.visible=proList.includeInLayout=true;
                    openEffect.play()
                } else {
                    closeEffect.play();
                }
            }

            /**
             * Effect handler for left project panel close.
             */
            public function handleClose():void {
                proList.visible=proList.includeInLayout=false;
            }

            /**
             * Event handler that gets called after this widget creation completes.
             * This function initiates data load from webservice and acts as main entry point.
             */
            private function init():void {
                this.contest.parentWidget=this;
                this.details.parentWidget=this;
                getDataService();
            }

            /**
             * Sets isMax attribute for this widget.
             *
             * @param value is max attribute.
             */
            [Bindable]
            public function set isMaxMode(value:Boolean):void {
                //trace(">>>>>>>> isMaxMode start: " + new Date());
                model.isMax=value;
                proList.invalidateSize();
                viewContainer.invalidateSize();

                //trace(">>>>>>>>>>>>>>>>>>>>>>>>>> isMax: " + isMaxMode);
                //trace(">>>>>>>> isMaxMode end: " + new Date());
            }

            /**
             * Gets the isMax attribute for this widget.
             *
             * @return is max attribute.
             */
            public function get isMaxMode():Boolean {
                return model.isMax;
            }

            /**
             * Handles select of project.
             * This initiates the vertical flip animation.
             */
            private function handleSelect():void {
                //trace(">>>>>>>> handleSelect start: " + new Date());
                if (proList.selectedItem || (model.proList && proList.selectedIndex >= 0 && proList.selectedIndex < model.proList.length)) {
                    doFadeOut();
                } else {
                    return;
                }
                
                //trace(">>>>>>>> handleSelect end: " + new Date());
            }

            /**
             * Do the vertical flip animation.
             */
            private function doFadeOut():void {
                //trace(">>>>>>>> doFadeOut start: " + new Date());
                
                
                if (viewContainer.numChildren > 1) {
                    viewContainer.removeChildAt(1);
                }

                //trace(">>>>>>>>>>>>>>>>>>>>>>> doFadeOut - buttonSelectedIndex: " + buttonSelectedIndex + ", isMax: " + isMaxMode);
                //trace(">>>>>>>>>>>>>>>>>>>>>>>> doFadeOut(1): " + stack.width + "," + stack.height);
                //trace(">>>>>>>>>>>>>>>>>>>>>>>> doFadeOut(2): " + viewContainer.width + "," + viewContainer.height);

                var newWidth:Number=viewContainer.width - 3;
                var newHeight:Number=viewContainer.height;
                
                model.showDateChooser=false;
                var bm:BitmapData=new BitmapData(newWidth, newHeight);
                bm.draw(stack);
                coms=new UIComponent();
                coms.addChild(new Bitmap(bm));
                coms.width=newWidth;
                coms.height=newHeight;
                coms.x=3;
                viewContainer.addChildAt(coms, 1);
                _direction="TOP";
                v=false;
                timer.start();
                
                //trace(">>>>>>>> doFadeOut end: " + new Date());
            }

            /**
             * Initiate horizontal flip animation
             *
             * @param event timer event.
             */
            private function rotate(event:TimerEvent):void {
                //trace(">>>>>>>> rotate start: " + new Date());
                
                // scroll to zero position so that animation is contained inside viewable area.
                this.viewContainer.horizontalScrollPosition = 0;
                
                if (v) {

                    stack.selectedIndex=buttonSelectedIndex;
                    if (buttonSelectedIndex == 0) {
			       		detailsBtn.enabled = true;
						contestBtn.enabled = false;
                        _direction="LEFT";
                    } else {
						detailsBtn.enabled = false;
						contestBtn.enabled = true;
                        _direction="RIGHT";
                    }
                    
                    if (contest) {
                        contest.dispatchEvent(new Event("SET_CONTEST_COMPLETE"));
                    } else {
                        details.dispatchEvent(new Event("SET_CONTEST_COMPLETE"));
                    }
                    
                } else {
                    if (proList.selectedItem) {
                        trace("change item");
                        model.currentProj=proList.selectedItem as Project;
                    } else if (model.proList && proList.selectedIndex >= 0 && proList.selectedIndex < model.proList.length) {
                        model.currentProj=model.proList.getItemAt(proList.selectedIndex) as Project;
                    }
                }
                
                //trace(">>>>>>>> rotate end: " + new Date());
            }

            private function rotateInEventHandler(e:Event):void {
                //trace(">>>>>>>> rotate before play: " + new Date());
                if (coms) {
                    flipIn.target=coms;
                    flipIn.siblings=[stack];
                    flipIn.direction=_direction;
                    flipIn.duration=1000;
                    flipIn.play();
                }
            }
            
            private function effectEnd(e:EffectEvent):void {
            }
            
            /**
             * Do the horizontal flip animation.
             */
            private function doRotate(event:Event):void {
                //trace(">>>>>>>> doRotate start: " + new Date());
                
                if (event.currentTarget.label == "DETAILS") {
                    buttonSelectedIndex=1;
                } else {
                    buttonSelectedIndex=0;
                }
                if (buttonSelectedIndex == stack.selectedIndex) {
                    return;
                }
                
                if (buttonSelectedIndex == 0) {
                    _direction="left";
                } else {
                    _direction="right";
                }
                
                if (viewContainer.numChildren > 1) {
                    viewContainer.removeChildAt(1);
                }

                //trace(">>>>>>>>>>>>>>>>>>>>>>> buttonSelectedIndex: " + buttonSelectedIndex + ", isMax: " + isMaxMode);
                //trace(">>>>>>>>>>>>>>>>>>>>>>>> doRotate(1): " + stack.width + "," + stack.height);
                //trace(">>>>>>>>>>>>>>>>>>>>>>>> doRotate(2): " + viewContainer.width + "," + viewContainer.height);

                var newWidth:Number=viewContainer.width - 3;
                var newHeight:Number=viewContainer.height;

                model.showDateChooser=false;
                var bm:BitmapData=new BitmapData(newWidth, newHeight);
                bm.draw(stack);
                coms=new UIComponent();
                coms.addChild(new Bitmap(bm));
                coms.width=newWidth;
                coms.height=newHeight;
                coms.x=3;
                viewContainer.addChildAt(coms, 1);
                v=true;
                timer.start();
                
                //trace(">>>>>>>> doRotate end: " + new Date());
            }

            /**
             * Sets the project list selected index.
             */
            public function set setList(value:int):void {
                //trace(">>>>>>>> setList start: " + new Date());
                if (proList) {
                    proList.selectedIndex=0;
                }
                
                //trace(">>>>>>>> setList end: " + new Date());
            }

            /**
             * Pagination handler for project list.
             *
             * @param up true if up pagination, false if down pagination.
             */
            private function moveList(up:Boolean):void {
                //trace(">>>>>>>> moveList start: " + new Date());
                if (index > 0 && up) {
                    index--;
                    proList.verticalScrollPosition=proList.verticalScrollPosition - 1;
                } else if (!up && index < proList.dataProvider.length - 7) {

                    index++;
                    proList.verticalScrollPosition=proList.verticalScrollPosition + 1;
                }

                if (index == 0) {
                    prevBtn.visible=false;
                } else {
                    prevBtn.visible=true
                }
                if (index >= model.proList.length - 7) {
                    nextBtn.visible=false;
                } else {
                    nextBtn.visible=true;
                }
                
                //trace(">>>>>>>> moveList end: " + new Date());
            }

            /**
             * Webservice result event handler for project contest data retrieval.
             *
             * @param e webservice result event.
             */
            private function setProject(e:ResultEvent):void {
                //trace(">>>>>>>> setProject start: " + new Date());
                
                hideLoadingProgress();

                if (e != null && e.result != null) {
                    var prjArray:ArrayCollection=new ArrayCollection;
                    if (e.result is ArrayCollection)
                        prjArray=e.result as ArrayCollection;
                    else
                        prjArray.addItem(e.result);

                    model.proList=new ArrayCollection();
                    for (var prjIdx:int=0; prjIdx < prjArray.length; ) {
                        var pname:String=prjArray[prjIdx].pname;
                        var pdesc:String=prjArray[prjIdx].description;
                        var projectId:String=prjArray[prjIdx].projectId;
                        var owner:String=prjArray[prjIdx].createUser;
                        var contests:ArrayCollection=new ArrayCollection();
                        for (var i:int=prjIdx; i < prjArray.length; i++) {
                            if (projectId != prjArray[i].projectId) {
                                break;
                            }
                            if (prjArray[i].contestId != null && prjArray[i].contestId != 0) {
                                var c:Contest=new Contest(pname,projectId,prjArray[i].contestId, prjArray[i].cname, prjArray[i].startDate, prjArray[i].endDate, prjArray[i].num_reg, prjArray[i].num_sub, prjArray[i].num_for, prjArray[i].forumId, prjArray[i].sname, prjArray[i].type, prjArray[i].specReviewStatus, owner);
                                c.permission=prjArray[i].cperm;
                                if (prjArray[i].endDate != null) {
                                    c.date=DateUtil.parseFromString(prjArray[i].endDate);
                                }
                                contests.addItem(c);
                            }

                        }

                        sortByName(contests);

                        
                        var newp:Project=new Project(projectId.toString(),pname,pdesc,"",owner,contests);
        			          newp.permission=prjArray[prjIdx].pperm;
        			          prjIdx=i;
                        model.proList.addItem(newp);
                    }

                    sortByName(model.proList);

                    if (model.proList.length > 0) {
                        model.currentProj=model.proList.getItemAt(0) as Project;
                        model.index=1;
                    }
                }
                
                //trace(">>>>>>>> setProject end: " + new Date());
            }

            /**
             * Sorts the given collection by name
             *
             * @param coll specified array collection to be sorted.
             */
            private function sortByName(coll:ArrayCollection):void {
                //trace(">>>>>>>> sortByName start: " + new Date());
                if (!coll.sort) {
                    var sort:Sort=new Sort();
                    sort.compareFunction=compareName;
                    coll.sort=sort;
                }

                coll.refresh();
                
                //trace(">>>>>>>> sortByName end: " + new Date());
            }

            /**
             * Callback function on sorting by name.
             */
            private function compareName(a:Object, b:Object, fields:Array=null):int {
                return ObjectUtil.stringCompare(a.name, b.name, true);
            }

            /**
             * force widget to a maximized view
             */
            public function maximizeScreen():void {
                //trace(">>>>>>>> maximizeScreen start: " + new Date());
                if (this.container) {
                    this.container.startMaximize();
                }
                
                //trace(">>>>>>>> maximizeScreen end: " + new Date());
            }

            /**
             * force widget to a restored view
             */
            public function restoreScreen():void {
                if (this.container) {
                    this.container.startRestore();
                }
            }
            
            /**
             * Opens current project in new tab of the cockpit app.
             *
             * @since Cockpit Release Assembly 2 [BUGR-1830]
             */
            private function openProjectInNewTab():void {
                var props:Dictionary=new Dictionary();

                props["pid"]=model.currentProj.id;
                
                var dict:Dictionary=new Dictionary();
                dict["name"]=model.currentProj.name;
                dict["allowclose"]="true";
                dict["columnNum"]=2;
                this.widgetFramework.addTabCtlWithProperties(dict);
                
                dict["tabName"]=model.currentProj.name;
                dict["name"]="My Projects";
                dict["title"]="My Projects";
                dict["widgetConfig"]=props;
                this.widgetFramework.addWidgetWithProperties(dict);
                
                dict["name"]="Submission Viewer";
                dict["title"]="Submission Viewer";
                this.widgetFramework.addWidgetWithProperties(dict);
                
                dict["name"]="Contest Monitor";
                dict["title"]="Contest Monitor";
                this.widgetFramework.addWidgetWithProperties(dict);
            }
        ]]>
    </mx:Script>

    <mx:Binding source="this.isMax"
                destination="this.isMaxMode"/>
    <mx:WebService id="ContestServiceFacadeBean"
                   useProxy="true"
                   destination="contest-facade">
        <mx:channelSet>
            <mx:ChannelSet id="contestfacadeChannelSet">
                <mx:channels>
                    <mx:SecureAMFChannel uri="{blazedsendpoint}"/>
                </mx:channels>
            </mx:ChannelSet>
        </mx:channelSet>

        <mx:operation name="getCommonProjectContestData"
                      resultFormat="object"
                      result="setProject(event)"
                      fault="hideLoadingProgress(); Alert.show('getCommonProjectContestData: ' + event.fault.faultString);"/>
        <mx:operation name="getCommonProjectContestDataByPID"
                      resultFormat="object"
                      result="setProject(event)"
                      fault="hideLoadingProgress(); Alert.show('getCommonProjectContestData: ' + event.fault.faultString);">
            <mx:request>
                <arg0>{pid}</arg0>
            </mx:request>
        </mx:operation>
    </mx:WebService>

    <mx:RemoteObject id="dataservice"
                     destination="remoteDataService"
                     endpoint="{blazedsendpoint}"
                     fault="Alert.show(event.fault.faultString);">
        <mx:method name="getPassword"
                   result="processPassword(event)"
                   fault="Alert.show(event.fault.faultString);"/>

    </mx:RemoteObject>

    <mx:Binding source="model.index"
                destination="setList"/>
    <mx:DefaultTileListEffect id="myDTLE"
                              fadeInDuration="10"
                              fadeOutDuration="10"
                              moveDuration="200"
                              color="0xffffff"/>
    <mxeffects:CubeRotate id="flipIn"
                          duration="1000"
                          suspendBackgroundProcessing="true"
                          effectEnd="effectEnd(event)"/>
    <mx:Resize widthFrom="160"
               widthTo="1"
               heightFrom="{proDetail.height}"
               heightTo="{proDetail.height}"
               id="closeEffect"
               effectEnd="handleClose()"
               target="{left}"/>
    <mx:Resize widthFrom="1"
               widthTo="160"
               heightFrom="{proDetail.height}"
               heightTo="{proDetail.height}"
               id="openEffect"
               target="{left}"/>
    <mx:VBox height="100%"
             width="160"
             paddingLeft="0"
             paddingRight="0"
             borderSides="right"
             backgroundColor="#E6E6E6"
             horizontalScrollPolicy="off"
             borderStyle="solid"
             borderColor="#D5D5D5"
             id="left"
             horizontalAlign="center">
        <mx:Button id="prevBtn"
                   buttonMode="true"
                   click="moveList(true)"
                   styleName="up"
                   visible="false"/>
        <mx:TileList id="proList"
                     width="152"
                     height="100%"
                     variableRowHeight="true"
                     rowHeight="50"
                     backgroundColor="#E6E6E6"
                     rollOverColor="#FAFAFA"
                     paddingLeft="0"
                     paddingRight="0"
                     borderStyle="none"
                     rowCount="7"
                     selectionColor="#FFFFFF"
                     dataProvider="{model.proList}"
                     labelField="name"
                     wordWrap="true"
                     allowMultipleSelection="false"
                     allowDragSelection="false"
                     useHandCursor="true"
                     change="handleSelect()"
                     verticalScrollPolicy="off"
                     horizontalScrollPolicy="off"
                     selectable="true"
                     columnCount="1"
                     styleName="listStyle"
                     itemsChangeEffect="{myDTLE}"/>
        <mx:Button id="nextBtn"
                   buttonMode="true"
                   click="moveList(false)"
                   styleName="down"/>
    </mx:VBox>

    <mx:VBox id="proDetail"
             width="100%"
             height="100%"
             borderColor="#D5D5D5"
             verticalGap="0"
             paddingTop="0"
             paddingBottom="0"
             paddingLeft="0"
             paddingRight="0">
        <mx:HBox id="buttonBar"
                 width="100%"
                 height="38"
                 paddingTop="0"
                 paddingBottom="0"
                 paddingLeft="0"
                 paddingRight="0">
            <mx:Button id="arrow"
                       styleName="arrowBtnStyle"
                       selected="true"
                       click="openCloseLeft()"/>
            <mx:Spacer width="100%"/>
            <mx:Button id="detailsBtn"
                       label="DETAILS"
                       labelPlacement="{ButtonLabelPlacement.LEFT}"
                       styleName="button"
                       buttonMode="true"
                       click="doRotate(event)"/>
            <mx:Spacer width="5"/>
            <mx:Button id="contestBtn"
                       label="CONTESTS"
		       		   enabled="false"
                       labelPlacement="{ButtonLabelPlacement.LEFT}"
                       styleName="button"
                       buttonMode="true"
                       click="doRotate(event)"/>
            <mx:Spacer width="5"/>
            <mx:Button id="openPrjInNewTabBtn"
                       label="Open in New Tab"
                       labelPlacement="{ButtonLabelPlacement.LEFT}"
                       styleName="button"
                       buttonMode="true"
                       click="openProjectInNewTab()"/>
        </mx:HBox>
        <mx:HBox width="100%"
                 horizontalAlign="center">
            <mx:Text styleName="listStyle"
                     text="{details.prjName.text}"/>
        </mx:HBox>
        <mx:Canvas minHeight="368"
                   height="100%"
                   id="viewContainer"
                   verticalScrollPolicy="off"
                   width="100%">
            <mx:ViewStack width="100%"
                          left="3"
                          minHeight="368"
                          height="100%"
                          backgroundAlpha="1.0"
                          paddingLeft="12"
                          paddingRight="0"
                          paddingTop="15"
                          paddingBottom="0"
                          resizeToContent="true"
                          clipContent="true"
                          id="stack">
                <tc:Contests width="100%" height="100%" id="contest"
                             backgroundColor="#ffffff"/>
                <tc:ProjectDetails width="100%" height="100%" id="details"
                                   backgroundColor="#ffffff"/>
            </mx:ViewStack>
        </mx:Canvas>
    </mx:VBox>
    <mx:Resize id="resize" /> 
</tc:ProjectWidgetCodeBehind>
