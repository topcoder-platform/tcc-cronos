{\rtf1\ansi\ansicpg1252\deff0\deflang1033\deflangfe1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial;}{\f1\froman\fprq2\fcharset0 Times New Roman;}{\f2\froman\fprq2\fcharset2 Symbol;}{\f3\fmodern\fprq1\fcharset0 Courier New;}{\f4\fnil Courier New;}{\f5\fnil\fcharset0 Courier New;}}
{\colortbl ;\red255\green0\blue0;\red192\green192\blue192;\red100\green100\blue100;\red232\green242\blue254;\red0\green0\blue0;\red127\green0\blue85;\red0\green0\blue255;\red51\green102\blue255;\red51\green153\blue102;\red0\green128\blue0;\red0\green0\blue192;\red42\green0\blue255;\red212\green212\blue212;\red63\green127\blue95;}
{\stylesheet{ Normal;}{\s1 heading 1;}{\s2 heading 2;}{\s3 heading 3;}}
{\*\generator Msftedit 5.41.15.1507;}\viewkind4\uc1\pard\keepn\nowidctlpar\s1\sb120\sa60\sl240\slmult0\tx720\ul\b\f0\fs28 Submission Manager 1.0 Component Specification\par
\pard\li720\sa120\ulnone\b0\fs20\par
\pard\keepn\nowidctlpar\s1\sb120\sa60\sl240\slmult0\tx360\b\f1 1.\tab\f0\fs24 Design\par
\pard\li720\b0 This component provides operations on contest like add CRUD operations on the submission, prize, review and submission payment; update submission status and placement; add and remove prizes from submission. Component runs as stateless EJB. This component is used Hibernate JPA implementation to work with persistence. It is used by Studio Service and can be used for the other services.\par
\par
This component comprises a stateless session EJB for creating, storing, and loading instances of the Prize, Submission, SubmissionPayment, and SubmissionReview. The session EJB can be accessed via a remote or local interface. Logging can be added.\par
\pard\fi720\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1\fs20 1.1\tab\f0 Design Patterns \par
\pard\li720\b0\fs24 None used.\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1\fs20 1.2\tab\f0 Industry Standards \par
\pard\fi-360\li1440\tx1440\b0\f2\'b7\tab\f0\fs24 EJB 3.0\par
\pard\fi-360\li1440\f2\'b7\tab\f0 JPA 1.0\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1\fs20 1.3\tab\f0 Required Algorithms\par
\pard\keepn\nowidctlpar\s3\sb120\sa60\sl240\slmult0\tx0\b0\i\f1 1.3.1\tab\f0 Handling collisions when updating submission results\par
\pard\li720\i0\fs24 The approach to updating ranks in a submission must incorporate the scenario where the update involves a rank already claimed by another submission. \par
\par
For example, suppose that after appeal responses stage, ranks are assigned, but there are pending re-appeals that eventually bump a submission to a new rank. In such a case, the other ranked submissions may have to be automatically changed.\par
\par
More formally, suppose we have the following rankings after appeal response phase:\par
\par
submission1: rank 1\par
submission2: rank 2\par
submission3: rank 3\par
submission4: rank 4\par
\par
Suppose that after a re-appeal, submission3 is awarded first place. The update algorithm must then bump the other submissions down, so we end up in the following new order:\par
\par
submission3: rank 1\par
submission1: rank 2\par
submission2: rank 3\par
submission4: rank 4\par
\par
The algorithm will be as follows (This is a simple recursive step):\par
\pard\fi-360\li1080\tx1080\f1 1.\tab For promotion, \f0 determine if there is any existing submission that currently occupies the rank of the submission being updated. If yes, repeat this step with this existing submission as being the updated one, but its rank bumped by 1.\par
\cf1 2.  For demotion, the same alogrithm applied, just decrease rank instead of bump.\cf0\par
\pard\par
\pard\li720 So let\rquote s see how this plays out, step-by-step, in our example. We start with, as above, with submission3 now having rank 1.\par
\par
We apply the algorithm and find that submission1 currently occupies that rank. We thus save submission3 with the new rank (and prizes for this rank), and assign submission1 a rank of 2.\par
\par
submission3: rank 1, submission1: rank 2\par
submission2: rank 2\par
submission4: rank 4\par
\par
We now repeat the process for submission1. We quickly see that there is submission2 that also has this rank. So we save submission1 with rank 2 (and again, the prizes for that rank), and bump submission2\rquote s rank to 3. \par
\par
submission3: rank 1\par
submission1: rank 2\par
submission2: rank 3\par
submission4: rank 4\par
\par
Now we repeat the process for submission2. We quickly see that there is no conflicting submission, so we have arrived at the end of the process. We simply save submission2 with rank 3 (and the appropriate prizes for that rank), and we are done.\par
\par
\pard\keepn\nowidctlpar\s3\sb120\sa60\sl240\slmult0\tx0\i\f1\fs20 1.3.2\tab\f0 Logging standards\par
\pard\li720\i0\fs24 This section is the central place to describe how logging is performed in lieu of stating this in each method in the tcuml.\par
\par
Logging will be performed in every business operation in the EJB if the logger is configured for it. There will be no logging in any constructor or initialization method anywhere.\par
\par
Logging should be performed in the following common manner:\par
\pard\fi-360\li1080\tx1080\f1 -\tab\f0 All method entrance and exit will be logged with INFO level. \par
\pard\fi-360\li1800\tx1800\f3 o\tab\f0 Entrance format: \highlight2 [Entering method \{\i className\i0 .\i methodName\}]\highlight0\i0\par
\pard\fi-360\li1800\f3 o \f0 Exit format: \highlight2 [Exiting method \{\i className\i0 .\i methodName\}\i0 ]\highlight0 . Only do this if there are no exceptions.\par
\pard\fi-360\li1080\tx1080\f1 -\tab\f0 All exceptions will be logged at ERROR level. When logging exceptions, log the inner exceptions as well\par
\pard\fi-360\li1800\tx1800\f3 o\tab\f0 Format: Simply log the text of exception and inner exceptions: \highlight2 [Error in method \{\i className\i0 .\i methodName\}\i0 : Details \{\i error details\i0\}]\highlight0\par
\pard\li720\par
Any other logging is at the developer\rquote s discretion. The developer is also free to improve on the above template. Such logging should be at the DEBUG level.\par
\par
\pard\keepn\nowidctlpar\s3\sb120\sa60\sl240\slmult0\tx0\i\f1\fs20 1.3.3\tab\f0 EJB transactions and exceptions\par
\pard\li720\i0\fs24 The current EJB framework provides for two means of handling application exceptions (of which all non-runtime custom exceptions are application exceptions).\par
\pard\fi-360\li1080\tx1080\f1 -\tab\f0 We can put into the code of each method handling of each exception to roll back be transaction with the use of the session context\rquote s setRollbackOnly(true).\par
\f1 -\tab\f0 We can configure in the XML or via annotations the exceptions to cause a rollback.\par
\pard\par
\pard\li720 the second option (with either the XML or annotation approach)  is choosen by this implementation, by adding \cf3\highlight4\f4\fs20 @ApplicationException\cf5 (rollback = \cf6\b true\cf5\b0 )\f5  for all custom exception.\cf0\highlight0\f0\fs24\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1\fs20 1.4\tab\f0 Component Class Overview\par
\pard\li720\b0\fs24\par
\b SubmissionManager\par
\b0 The business interface that defines methods for managing a submission, prize, submission payment, and submission review. In general, but not always, it has methods to create, update, delete, get, and list these entities, as well as some methods to perform more nuanced operations. These include getting submissions for a contest or member, updating a submission status or result, adding or removing a prize from a submission, and getting and deleting submission reviews for a submission and/or a reviewer.\par
\par
\b SubmissionManagerLocal\par
\b0 The local EJB interface that simply extends the SubmissionManager interface, with no additional facilities. This interface should be marked with @Local annotation representing it's a remote interface.\par
\par
\b SubmissionManagerRemote\par
\b0 The remote EJB interface that simply extends the SubmissionManager interface, with no additional facilities. This interface should be marked with @Remote annotation representing it's a remote interface.\par
\par
\b SubmissionManagerBean\par
\b0 The stateless session bean that performs the CRUDE specified by the SubmissionManagerRemote and SubmissionManagerLocal interfaces. It uses JPA perform all operations and the Log for logging.\par
\par
This interface should be marked with @Stateless annotation representing it's a stateless session bean. Also, it must have the @TransactionAttribute(REQUIRED) annotation to indicate all operations require transactional control. Finally, it will add the annotation @RolesAllowed(\ldblquote Administrator\rdblquote ) to allow this role to access this bean.\par
\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1\fs20 1.5\tab\f0 Component Exception Definitions\par
\pard\li720\b0\fs24 This component defines four custom exceptions.\par
\par
\b SubmissionManagementException\par
\b0 Extends BaseCriticalException. It is thrown by all CRUDE methods if there is an error during an operation.\par
\par
\b EntityNotFoundException\par
\b0 Extends SubmissionManagementException. It is thrown by the updateXXX and removeXXX methods if the given entity is not found in persistence.\par
\par
\b EntityExistsException\par
\b0 Extends SubmissionManagementException. It is thrown by some of the addXXX methods if the given entity already exists in persistence.\par
\par
\b SubmissionManagementConfigurationException\par
\b0 Extends BaseRuntimeException. Constitutes a general configuration exception that all implementations that require such configuration can throw it something goes wrong during that configuration. Called by the SubmissionManagerBean\rquote s \i initialize\i0  method if the \ldblquote unitName\rdblquote  is not available.\par
\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1\fs20 1.6\tab\f0 Thread Safety\par
\pard\li720\b0\fs24 This component is effectively thread-safe. The SubmissionManagerBean is technically mutable since its session context, unit name, and logger properties are set after construction, but the container will not call the initialize method more than once for the session bean. The SubmissionManagerBean also operates on non-thread-safe entities, thus rendering it non-thread-safe. This is not an issue with the remote interface, since the bean will be called via the remote interface with an effective copy of the entities, the entity will not be shared by multiple threads. Therefore, the container makes the session bean effectively thread-safe in this case. The local interface is called in the same JVM without the overhead of a distributed object protocol, so entities will in fact be passed by reference, thus making it possible that multiple client threads, if they have access to the same entity, to operate on it while the session bean works on it. However, the persistence container makes its own local copy of the entity instance per transaction basis, so we are protected from the issues of concurrent access to the entity.\par
\par
All methods (create, update, and delete) are transitionally managed by the container. Transaction scope is Required.\par
\par
There are no explicit data store concurrency issues that are in the scope of this component.\par
\par
\pard\keepn\nowidctlpar\s1\sb120\sa60\sl240\slmult0\tx360\b\f1 2.\tab\f0 Environment Requirements\tab\tab\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\f1\fs20 2.1\tab\f0 Environment\par
\pard\fi-360\li1080\tx1080\b0\f2\'b7\tab\f0\fs24 Java 1.5\par
\pard\fi-360\li1080\f2\'b7\tab\f0 EJB 3.0\par
\f2\'b7\tab\f0 Hibernate 3.2 or Higher\par
\f2\'b7\tab\f0 JPA 1.0\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1\fs20 2.2\tab\f0 TopCoder Software Components\par
\pard\fi-360\li1080\sa120\tx1080\b0\f2\'b7\tab\f1\fs24 Base Exception 2.0\par
\pard\fi-360\li1800\sa120\tx1800\f3 o\tab\f1 TopCoder standard for all custom exceptions.\par
\pard\fi-360\li1080\sa120\tx1080\f2\'b7\tab\f1 Contest and Submission Entities 1.0\par
\pard\fi-360\li1800\sa120\tx1800\f3 o\tab\f1 Provides the entities used by this component.\par
\pard\fi-360\li1080\sa120\tx1080\f2\'b7\tab\f1 Logging Wrapper 2.0\par
\pard\fi-360\li1800\sa120\tx1800\f3 o\tab\f1 Used for logging operations in the SubmissionManagerBean\i .\i0\par
\pard\sa120\f0\fs20\par
\pard\li720\i\fs24 NOTE: The default location for TopCoder Software component jars is../lib/tcs/COMPONENT_NAME/COMPONENT_VERSION relative to the component installation.\cf5   Setting the tcs_libdir property in topcoder_global.properties will overwrite this default location.\cf0\i0\fs20\par
\pard\li720\sa120\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1 2.3\tab\f0 Third Party Components\tab\par
\pard\li720\b0\fs24 There are no third party components that need to be used directly by this component.\par
\pard\keepn\nowidctlpar\s1\sb120\sa60\sl240\slmult0\tx360\b\f1 3.\tab\f0 Installation and Configuration\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\f1\fs20 3.1\tab\f0 Package Names\par
\pard\li720\b0\fs24 com.topcoder.service.studio.submission\par
\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1\fs20 3.2\tab\f0 Configuration Parameters\par
\pard\li720\b0\fs24 Configuration occurs from JNDI ENC in the initialize method of the \f1 SubmissionManagerBean\f0 . The \ldblquote unitName\rdblquote  must be provided as an environment entry, and it must point to a valid EntityManager. The \ldblquote logger\rdblquote  entry is optional.\par
\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1\fs20 3.3\tab\f0 Dependencies Configuration\par
\pard\li720\b0\fs24 None\par
\pard\keepn\nowidctlpar\s1\sb120\sa60\sl240\slmult0\tx360\b\f1 4.\tab\f0 Usage Notes\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\f1\fs20 4.1\tab\f0 Required steps to test the component\par
\pard\fi-360\li1080\sa120\tx1080\b0\f2\'b7\tab\f0 Extract the component distribution.\par
\pard\f2\'b7\tab\f0 Follow {\field{\*\fldinst{HYPERLINK "C:\\\\filez\\\\work\\\\tc\\\\tcs_corp\\\\templates\\\\component\\\\" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\l "_Dependencies_Configuration" }}{\fldrslt{\cf7\ul Dependencies Configuration}}}\cf0\ulnone\f0\fs20 .\par
\f2\'b7\tab\f0 Execute \lquote ant test\rquote  within the directory that the distribution was extracted to.\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1 4.2\tab\f0 Required steps to use the component\par
\pard\li720\b0\fs24 The \cf8\f3\fs18 SubmissionManager \cf0\f0\fs24 interfaces and bean should be deployed in an EJB 3.0 container.\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1\fs20 4.3\tab\f0 Demo\par
\pard\li720\b0\fs24\par
This demo will show typical use of the management mechanism. This demo will mostly show how to use the remote interface to manage a Prize and Submission. The use of the local interface, and the management of the other entities (such as payments and reviews), are done in the same manner, and will not be shown.\par
\par
Here\rquote s the relevant excerpt from as possible deployment descriptor of the SubmissionManagerRemote bean and interfaces: \par
\par
\cf8\f3\fs18 <enterprise-beans>\par
  <session>\par
    <ejb-name>SubmissionManager</ejb-name>\par
      <ejb-class>\par
com.topcoder.service.studio.submission.SubmissionManagerBean\par
      </ejb-class>\par
    <session-type>stateless</session-type>\par
    <transaction-type>Container</transaction-type>\par
    <resource-ref>\par
\pard\fi720\li720\cf9 <!-- This could define the actual DB connection info-->\tab\par
\pard\li720\cf8     </resource-ref>\par
    <env-entry>\par
\tab <env-entry-name>unitName</env-entry-name>\par
\tab <env-entry-type>java.lang.String</env-entry-type>\par
\tab <env-entry-value>targetDB</env-entry-value>\par
    </env-entry>\par
    <env-entry>\par
\tab <env-entry-name>logger</env-entry-name>\par
\tab <env-entry-type>java.lang.String</env-entry-type>\par
\tab <env-entry-value>myLogger</env-entry-value>\par
    </env-entry>\par
  </session>\par
</enterprise-beans>\par
\cf0\f0\fs24\par
To obtain the SubmissionManagerRemote, the following typical JNDI code will be used:\par
\par
\cf10\f3\fs18 // Get hold off remote interface\par
\cf5\f4\fs20 Properties env = \cf6\b new\cf5\b0  Properties();\cf0\par
\cf5 env.setProperty(Context.\cf11\i SECURITY_PRINCIPAL\cf5\i0 , \cf12 "admin"\cf5 );\cf0\par
\cf5 env.setProperty(Context.\cf11\i SECURITY_CREDENTIALS\cf5\i0 , \cf12 "password"\cf5 );\cf0\par
\cf5 env.setProperty(Context.\cf11\i INITIAL_CONTEXT_FACTORY\cf5\i0 , \cf12 "org.jboss.security.jndi.JndiLoginInitialContextFactory"\cf5 );\cf0\par
\cf5 InitialContext ctx = \cf6\b new\cf5\b0  InitialContext(env);\cf0\par
\par
\cf11\highlight13 manager\f5  \cf5\highlight0\f4 = (SubmissionManager) ctx.lookup(\cf12 "remote/SubmissionManagerBean"\cf5 );\par
\cf0\f3\fs24\par
Then we can manage a Prize\par
\par
\cf5\f4\fs20         \cf14 // create prize type\cf0\par
\cf5         PrizeType type = \cf6\b new\cf5\b0  PrizeType();\cf0\par
\cf5         type.setPrizeTypeId(1L);\cf0\par
\cf5         \cf14 // Create a prize and fill it\cf0\par
\cf5         Prize prize = \cf6\b new\cf5\b0  Prize();\cf0\par
\cf5         prize.setPlace(1);\cf0\par
\cf5         prize.setAmount(900.00);\cf0\par
\cf5         prize.setCreateDate(\cf6\b new\cf5\b0  Date());\cf0\par
\cf5         prize.setType(type);\cf0\par
\cf5         \cf14 // and other field are omitted for clarity\cf0\par
\cf5         Prize createdPrize = \cf11 manager\cf5 .addPrize(prize);\cf0\par
\cf5         \cf14 // Checking the ID of the prize, it would be filled. We assume ID=11\cf0\par
\cf5         Long prizeId = createdPrize.getPrizeId();\cf0\par
\par
\cf5         \cf14 // At a later point, we can retrieve and update the prize to bump the\cf0\par
\cf5         \cf14 // prize to half.\cf0\par
\cf5         Prize retrievedPrize = \cf11 manager\cf5 .getPrize(prizeId);\cf0\par
\cf5         prize.setPlace(2);\cf0\par
\cf5         prize.setAmount(450.00);\cf0\par
\cf5         \cf11 manager\cf5 .updatePrize(retrievedPrize);\cf0\par
\par
\cf5         \cf14 // We can remove the prize if it no longer meets our needs.\cf0\par
\cf5         \cf11 manager\cf5 .removePrize(retrievedPrize.getPrizeId());\cf0\par
\par
\cf5         \cf14 // This shows basic CRUD operations for a simple entity. We can proceed\cf0\par
\cf5         \cf14 // to more involved examples of managing a submission:\cf0\par
\par
\cf5         \cf14 // Suppose we have 4 submissions for a given contest (contestId=1).\cf0\par
\cf5         \cf14 // The relevant fields are to be denoted as:\cf0\par
\cf5         \cf14 // submission 1: submissionId=1, rank=1\cf0\par
\cf5         \cf14 // submission 2: submissionId=2, rank=2\cf0\par
\cf5         \cf14 // submission 3: submissionId=3, rank=3\cf0\par
\cf5         \cf14 // submission 4: submissionId=4, rank=4\cf0\par
\par
\cf5         \cf14 // If we wanted to retrieve and update some properties of a submission,\cf0\par
\cf5         \cf14 // we would do the following:\cf0\par
\cf5         Submission submission = \cf11 manager\cf5 .getSubmission(2);\cf0\par
\cf5         submission.setHeight(2);\cf0\par
\par
\cf5         \cf11 manager\cf5 .updateSubmission(submission);\cf0\par
\par
\cf5         \cf14 // If we wanted to retrieve the submissions, without the actual files, we\cf0\par
\cf5         \cf14 // would do the following:\cf0\par
\cf5         List<Submission> submissions = \cf11 manager\cf5 .getSubmissionsForContest(1, \cf6\b false\cf5\b0 );\cf0\par
\cf5         \cf14 // This would return a list of 4 submissions shown above\cf0\par
\par
\cf5         \cf14 // Suppose that after additional appeals, the rankings were changed, and\cf0\par
\cf5         \cf14 // submission 3 was promoted to rank 1. The submission result would be\cf0\par
\cf5         \cf14 // updated:\cf0\par
\cf5         Submission submission3 = \cf11 manager\cf5 .getSubmission(3);\cf0\par
\cf5         submission.setRank(1);\cf0\par
\cf5         \cf11 manager\cf5 .updateSubmissionResult(submission3);\cf0\par
\cf5         \cf14 // This would result in the rankings to be recalculated to accommodate\cf0\par
\cf5         \cf14 // the change in ranks. The submissions for the given contest would be\cf0\par
\cf5         \cf14 // adjusted as follows:\cf0\par
\cf5         \cf14 // submission 3: submissionId=3, rank=1\cf0\par
\cf5         \cf14 // submission 1: submissionId=1, rank=2\cf0\par
\cf5         \cf14 // submission 2: submissionId=2, rank=3\cf0\par
\cf5         \cf14 // submission 4: submissionId=4, rank=4\cf10\f3\fs18\par
\pard\cf0\fs24\tab\par
\par
\par
\pard\keepn\nowidctlpar\s1\sb120\sa60\sl240\slmult0\tx360\b\f1 5.\tab\f0 Future Enhancements\par
\pard\fi720\b0 None\par
}
 