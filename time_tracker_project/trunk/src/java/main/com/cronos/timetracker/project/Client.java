/*
 * Copyright (C) 2006 TopCoder Inc., All Rights Reserved.
 */
package com.cronos.timetracker.project;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * <p>
 * This class holds the information about a client associated with the projects.
 * </p>
 *
 * <p>
 * When creating an instance of this class the user has two options:
 *
 * <ul>
 * <li> Use the default constructor and allow the GUID Generator component to
 * generate a unique id. </li>
 * <li> Use one of the parameterized constructors and provide an id for the
 * Client instance; if the id is already used by another client from the
 * persistence, then the newly created client will not be added to it. </li>
 * </ul>
 * </p>
 *
 * <p>
 * Also the user should not populate the creationDate and modificationDate
 * fields, because if he does, the client will not be added to the persistence.
 * These fields will be handled automatically by the component (the current date
 * will be used). When loading from the persistence, all the fields will be
 * properly populated.
 * </p>
 *
 * <p>
 * Version 2.0 added companyId field, setter and getter for this field and
 * constructors that initialize this new field.
 * </p>
 *
 *
 * @author DanLazar, colau, costty000
 * @version 2.0
 *
 * @since 1.0
 */
public class Client {
    /**
     * <p>
     * Represents the id of the client. A value of -1 means that the user wants
     * this component to generate a value for this field using the GUID
     * Generator. This field can be initialized in the parameterized constructor
     * or by using the setId method.
     * </p>
     */
    private int id = -1;

    /**
     * <p>
     * Represents the name of the client. It can be set using the setName
     * method. Valid values: non-null, non-empty string.
     * </p>
     */
    private String name = null;

    /**
     * <p>
     * Represents the creation date of the client, which is the date when the
     * client was newly added into the persistence. This field should not be
     * initialized by the user. It will be handled automatically by the
     * component (the current date will be used or loaded from persistence).
     * </p>
     */
    private Date creationDate = null;

    /**
     * <p>
     * Represents the user which created the client. Must be initialized by the
     * user, using the setCreationUser method. Valid values: non-null, non-empty
     * string.
     * </p>
     */
    private String creationUser = null;

    /**
     * <p>
     * Represents the modification date of the client, which is the date when
     * the client was updated in the persistence. This field should not be
     * initialized by the user. It will be handled automatically by the
     * component (the current date will be used or loaded from persistence).
     * </p>
     */
    private Date modificationDate = null;

    /**
     * <p>
     * Represents the user which modified the client. Must be initialized by the
     * user, using the setModificationUser method. Valid values: non-null,
     * non-empty string.
     * </p>
     */
    private String modificationUser = null;

    /**
     * <p>
     * A map holding the projects of the client. It maps the project ids
     * (Integer) to Project instances. It is initialized in the constructors and
     * the reference cannot be changed.
     * </p>
     */
    private Map projects = null;

    /**
     * <p>
     * Represents the id of the Company that this Client is bound to (the
     * company associated with this client). It will be initialized in the
     * parameterized constructor. Can also be initialized by using the setter.
     * </p>
     * Added from v2.0
     */
    private int companyId = -1;

    /**
     * <p>
     * Creates a new instance. The client will be assigned an id generated by
     * the GUID Generator, and have no projects associated with.
     * </p>
     */
    public Client() {
        this(-1); // id will be assigned by the GUID Generator
    }

    /**
     * <p>
     * Creates a new instance. The client will be assigned the given id, and
     * have no projects associated with.
     * </p>
     * <p>
     * If the given id has the value of -1, the actual id will be assigned by
     * the GUID Generator.
     * </p>
     *
     * @param id
     *            the id of the client
     */
    public Client(int id) {
        this(id, new ArrayList());
    }

    /**
     * <p>
     * Creates a new instance. The client will be assigned the given id and
     * associated with the given projects.
     * </p>
     * <p>
     * If the given id has the value of -1, the actual id will be assigned by
     * the GUID Generator.
     * </p>
     *
     * @param id
     *            the id of the client
     * @param projects
     *            the projects of the client
     * @throws NullPointerException
     *             if the projects is null
     * @throws IllegalArgumentException
     *             if the projects contains null or non-Project element
     */
    public Client(int id, List projects) {
        this.projects = new HashMap();

        setId(id);
        setProjects(projects);
    }

    /**
     * <p>
     * Create a new instance. Initialize the id field. Initialize the clientId
     * field. Initialize the projects map to the empty map.
     * </p>
     *
     * @param id
     *            this value that will be assigned to the id field
     * @param companyId
     *            the value that will be assigned to the companyId field
     * @since 2.0
     */
    public Client(int id, int companyId) {
        this(id);
        setCompanyId(companyId);
    }

    /**
     * <p>
     * Create a new instance. Initialize the id field. Initialize the companyId
     * field. Initialize the projects map. For each project instance from the
     * List a pair of this form will be added into the map: {projectId, project
     * instance).
     * </p>
     *
     * @param id
     *            this value that will be assigned to the id field
     * @param companyId
     *            the value that will be assigned to the companyId field
     * @param projects
     *            the projects of the client
     * @throws NullpointerException -
     *             if the projects argument is null
     * @throws IllegalArgumentException -
     *             if the projects argument doesn't contain only Project
     *             instances
     * @since 2.0
     */
    public Client(int id, int companyId, java.util.List projects) {
        this(id, projects);
        setCompanyId(companyId);
    }

    /**
     * <p>
     * Setter for the id of the client. If the given id has the value of -1, the
     * actual id will be assigned by the GUID Generator.
     * </p>
     *
     * @param id
     *            the id of the client
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * <p>
     * Setter for the creation date of the client, which is the date when the
     * client was newly added into the persistence. The user should not use this
     * method. This method should only be used by the persistence layer.
     * </p>
     *
     * @param creationDate
     *            the creation date of the client
     * @throws NullPointerException
     *             if the creationDate is null
     */
    public void setCreationDate(Date creationDate) {
        if (creationDate == null) {
            throw new NullPointerException("creationDate is null");
        }
        this.creationDate = creationDate;
    }

    /**
     * <p>
     * Setter for the user which created the client.
     * </p>
     *
     * @param creationUser
     *            the user which created the client
     * @throws NullPointerException
     *             if the creationUser is null
     * @throws IllegalArgumentException
     *             if the creationUser is the empty string
     */
    public void setCreationUser(String creationUser) {
        Util.checkString(creationUser);
        this.creationUser = creationUser;
    }

    /**
     * <p>
     * Setter for the modification date of the client, which is the date when
     * the client was updated in the persistence. The user should not use this
     * method. This method should only be used by the persistence layer.
     * </p>
     *
     * @param modificationDate
     *            the modification date of the client
     * @throws NullPointerException
     *             if the modificationDate is null
     */
    public void setModificationDate(Date modificationDate) {
        if (modificationDate == null) {
            throw new NullPointerException("modificationDate is null");
        }
        this.modificationDate = modificationDate;
    }

    /**
     * <p>
     * Setter for the user which modified the client.
     * </p>
     *
     * @param modificationUser
     *            the user which modified the client
     * @throws NullPointerException
     *             if the modificationUser is null
     * @throws IllegalArgumentException
     *             if the modificationUser is the empty string
     */
    public void setModificationUser(String modificationUser) {
        Util.checkString(modificationUser);
        this.modificationUser = modificationUser;
    }

    /**
     * <p>
     * Setter for the name of the client.
     * </p>
     *
     * @param name
     *            the name of the client
     * @throws NullPointerException
     *             if the name is null
     * @throws IllegalArgumentException
     *             if the name is the empty string
     */
    public void setName(String name) {
        Util.checkString(name);
        this.name = name;
    }

    /**
     * <p>
     * Setter for the projects of the client. All the old projects associated
     * with the client will be cleared first before adding the given projects.
     * The projects will be copied to an inner map.
     * </p>
     *
     * @param projects
     *            the projects of the client
     * @throws NullPointerException
     *             if the projects is null
     * @throws IllegalArgumentException
     *             if the projects contains null or non-Project element
     */
    public void setProjects(List projects) {
        if (projects == null) {
            throw new NullPointerException("projects is null");
        }

        // check the List elements
        for (Iterator i = projects.iterator(); i.hasNext();) {
            Object obj = i.next();

            if (obj == null) {
                throw new IllegalArgumentException(
                        "projects contains null element");
            }
            if (!(obj instanceof Project)) {
                throw new IllegalArgumentException(
                        "projects contains non-Project element");
            }
        }

        // if everything is fine, clear the old projects and add the new ones
        this.projects.clear();

        for (Iterator i = projects.iterator(); i.hasNext();) {
            addProject((Project) i.next());
        }
    }

    /**
     * <p>
     * Getter for the id of the client. If it returns the value of -1, the
     * actual id will be assigned by the GUID Generator.
     * </p>
     *
     * @return the id of the client
     */
    public int getId() {
        return id;
    }

    /**
     * <p>
     * Getter for the creation date of the client, which is the date when the
     * client was newly added into the persistence.
     * </p>
     *
     * @return the creation date of the client
     */
    public Date getCreationDate() {
        return creationDate;
    }

    /**
     * <p>
     * Getter for the user which created the client.
     * </p>
     *
     * @return the user which created the client
     */
    public String getCreationUser() {
        return creationUser;
    }

    /**
     * <p>
     * Getter for the modification date of the client, which is the date when
     * the client was updated in the persistence.
     * </p>
     *
     * @return the modification date of the client
     */
    public Date getModificationDate() {
        return modificationDate;
    }

    /**
     * <p>
     * Getter for the user which modified the client.
     * </p>
     *
     * @return the user which modified the client
     */
    public String getModificationUser() {
        return modificationUser;
    }

    /**
     * <p>
     * Getter for the name of the client.
     * </p>
     *
     * @return the name of the client
     */
    public String getName() {
        return name;
    }

    /**
     * <p>
     * Getter for the projects associated with the client. Returns a shallow
     * copy of the values from the inner map.
     * </p>
     *
     * @return a List containing the projects associated with the client
     */
    public List getProjects() {
        return new ArrayList(projects.values());
    }

    /**
     * <p>
     * Adds the given project to the client. If a project with the same id
     * already exists in the client, it will not be added and false is returned.
     * </p>
     *
     * @param project
     *            the project to add
     * @return true if the project was added, false otherwise
     * @throws NullPointerException
     *             if the project is null
     */
    public boolean addProject(Project project) {
        if (project == null) {
            throw new NullPointerException("project is null");
        }

        Integer id = new Integer(project.getId());

        if (projects.containsKey(id)) {
            // if a project with the same id already exists, do not add it
            return false;
        } else {
            // otherwise, add the project to the map
            projects.put(id, project);
            return true;
        }
    }

    /**
     * <p>
     * Removes the project of the given id from the client. If a project with
     * the given id does not exist in the client, nothing happens and false is
     * returned.
     * </p>
     *
     * @param projectId
     *            the id of the project to remove
     * @return true if the project was removed, false otherwise
     */
    public boolean removeProject(int projectId) {
        Integer id = new Integer(projectId);

        return (projects.remove(id) != null);
    }

    /**
     * <p>
     * Setter for the companyId field.
     * </p>
     *
     * @param companyId
     *            the id of the company that this client will be assigned to
     * @since 2.0
     */
    public void setCompanyId(int companyId) {
        this.companyId = companyId;
    }

    /**
     * <p>
     * Getter for companyId field.
     * </p>
     *
     * @return the id of the company that this client is assigned to
     * @since 2.0
     */
    public int getCompanyId() {
        return companyId;
    }
}
