/*
 * Copyright (C) 2006 TopCoder Inc., All Rights Reserved.
 */
package com.cronos.timetracker.project.accuracytests.persistence;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.Date;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

import com.cronos.timetracker.project.accuracytests.Helper;
import com.cronos.timetracker.project.persistence.DatabaseSearchUtility;
import com.cronos.timetracker.project.searchfilters.BinaryOperation;
import com.cronos.timetracker.project.searchfilters.BinaryOperationFilter;
import com.cronos.timetracker.project.searchfilters.CompareOperation;
import com.cronos.timetracker.project.searchfilters.Filter;
import com.cronos.timetracker.project.searchfilters.MultiValueFilter;
import com.cronos.timetracker.project.searchfilters.NotFilter;
import com.cronos.timetracker.project.searchfilters.ValueFilter;

/**
 * The class <code>DatabaseSearchUtilityAccuracytest</code> contains tests for the class
 * {@link <code>DatabaseSearchUtility</code>}.
 * @author FireIce
 * @version 1.1
 */
public class DatabaseSearchUtilityAccuracytest extends TestCase {
    /**
     * The SQL statement to insert a client.
     */
    private static final String SQL_INS_CLIENT = "INSERT INTO Clients VALUES (?, ?, ?, ?, ?, ?)";

    /**
     * The DatabaseSearchUtility instance to test against.
     */
    private DatabaseSearchUtility utility = null;

    /**
     * Represents the connection.
     */
    private Connection connection;

    /**
     * The prepared statement generated by the utility.
     */
    private PreparedStatement pstmt = null;

    /**
     * The resultset obtained by executing the prepared statement.
     */
    private ResultSet rs = null;

    /**
     * The search filter to apply.
     */
    private Filter filter = null;

    /**
     * accuracy test for constructor.
     * @throws Exception
     *             to JUnit
     */
    public void testCtorAccuracy() throws Exception {
        new DatabaseSearchUtility(Helper.getConnection(),
                "com.cronos.timetracker.project.accuraytests.DatabaseSearchUtility.clients");
    }

    /**
     * accuracy test for prepareSearchStatement method.
     */
    public void testPrepareSearchStatementAccuracy() throws Exception {
        filter = new ValueFilter(CompareOperation.LIKE, "Creation User", "creation%");
        pstmt = utility.prepareSearchStatement(filter);
        rs = pstmt.executeQuery();
        assertTrue("Prepares an incorrect statement", rs.next());
        assertEquals("query returned incorrect", 1, rs.getInt(1));
        assertFalse("Prepares an incorrect statement", rs.next());
        rs.close();
        pstmt.close();

        filter = new ValueFilter(CompareOperation.LIKE, "Creation User", "mock%");
        pstmt = utility.prepareSearchStatement(filter);
        rs = pstmt.executeQuery();
        assertFalse("Prepares an incorrect statement", rs.next());
        rs.close();
        pstmt.close();

        filter = new MultiValueFilter("Creation User", new Object[] {"creationUser", "modificationUser"});
        pstmt = utility.prepareSearchStatement(filter);
        rs = pstmt.executeQuery();
        assertTrue("Prepares an incorrect statement", rs.next());
        assertEquals("query returned incorrect", 1, rs.getInt(1));
        assertFalse("Prepares an incorrect statement", rs.next());
        rs.close();
        pstmt.close();

        Filter leftOperand = new ValueFilter(CompareOperation.EQUAL, "Name", "name");
        Filter rightOperand = new ValueFilter(CompareOperation.EQUAL, "Creation User", "creationUser");

        filter = new BinaryOperationFilter(BinaryOperation.AND, leftOperand, rightOperand);
        pstmt = utility.prepareSearchStatement(filter);
        rs = pstmt.executeQuery();
        assertTrue("Prepares an incorrect statement", rs.next());
        assertEquals("query returned incorrect", 1, rs.getInt(1));
        assertFalse("Prepares an incorrect statement", rs.next());
        rs.close();
        pstmt.close();

        Filter operand = new ValueFilter(CompareOperation.EQUAL, "Name", "abc");
        filter = new NotFilter(operand);
        pstmt = utility.prepareSearchStatement(filter);
        rs = pstmt.executeQuery();
        assertTrue("Prepares an incorrect statement", rs.next());
        assertEquals("query returned incorrect", 1, rs.getInt(1));
        assertFalse("Prepares an incorrect statement", rs.next());
        rs.close();
        pstmt.close();
    }

    /**
     * Prepares a DatabaseSearchUtility instance for testing. Also adds a client to the database so that it can be
     * selected by the generated prepared statement. The client has the name "name" and creation user "creationUser".
     * @throws Exception
     *             if any unexpected exception occurs.
     */
    protected void setUp() throws Exception {
        Helper.addConfig();
        Helper.clearTables();
        // prepare the connection and search utility
        connection = Helper.getConnection();
        utility = new DatabaseSearchUtility(connection, Helper.DB_SEARCH_UTILITY_CLIENTS);

        // add a client to the database
        Date date = new Date();
        PreparedStatement pstmt = connection.prepareStatement(SQL_INS_CLIENT);

        pstmt.setInt(1, 1);
        pstmt.setString(2, "name");
        pstmt.setTimestamp(3, new Timestamp(date.getTime()));
        pstmt.setString(4, "creationUser");
        pstmt.setTimestamp(5, new Timestamp(date.getTime()));
        pstmt.setString(6, "modificationUser");

        pstmt.executeUpdate();
        pstmt.close();
    }

    /**
     * Clears all the namespaces and database resources.
     * @throws Exception
     *             if any unexpected exception occurs.
     */
    protected void tearDown() throws Exception {
        Helper.clearTables();
        Helper.clearConfig();
        if (connection != null) {
            connection.close();
        }
    }

    /**
     * Aggragates all tests in this class.
     * @return test suite aggragating all tests.
     */
    public static Test suite() {
        return new TestSuite(DatabaseSearchUtilityAccuracytest.class);
    }
}
