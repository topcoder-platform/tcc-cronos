/*
 * Copyright (C) 2008 TopCoder Inc., All Rights Reserved.
 */
package com.topcoder.service.studio;

import com.topcoder.service.studio.ejb.UserNotAuthorizedFault;

import javax.ejb.EJBAccessException;
import javax.xml.ws.WebFault;

/**
 * <p> This exception is thrown automatically by the web service interface when the user is not authorized to perform
 * the operation. It is related with"user_not_authorized_faultMsg" fault in WSDL, but it contains only annotations
 * about"user_not_authorized_fault" because the messages are automatically constructed.</p>
 *
 * <p> It was generated by JBoss tools and I changed the name, the inheritance and other changes. This exception extends
 * EJBAccessException because EJBAccessException is thrown by the EJBean when an authorization fails when the
 * annotations are used. To maintain the same behavior, I used the same exception.</p>
 *
 * <p> The constructors with UserNotAuthorizedFault and the getter are necessary for the correct webservices
 * serialization/deserialization. The other constructors are added for the future implementations of the service
 * interface.</p>
 *
 * @author fabrizyo, TCSDEVELOPER
 * @version 1.0
 */
@WebFault(name = "user_not_authorized_fault", faultBean = "com.topcoder.service.studio.ejb.UserNotAuthorizedFault")
public class UserNotAuthorizedException extends EJBAccessException {
    /**
     * <p> Represents the faultInfo, Java type that goes as soapenv:Fault detail element.</p>
     */
    private final UserNotAuthorizedFault faultInfo;

    /**
     * <p> Represents the userIdNotFound. I updated the WSDL, now it's an long. It is retrieved from
     * UserNotAuthorizedFault.</p>
     */
    private final long userIdNotAuthorized;

    /**
     * <p> Construct the exception. Call the super constructor, set the fault info and set the userIdNotAuthorized from
     * the faultInfo.</p>
     *
     * @param message   the message
     * @param faultInfo the fault info which contains the userIdNotAuthorized
     */
    public UserNotAuthorizedException(String message, UserNotAuthorizedFault faultInfo) {
        super(message);
        this.faultInfo = faultInfo;
        this.userIdNotAuthorized = (faultInfo == null) ? -1 : faultInfo.getUserIdNotAuthorized();
    }

    /**
     * <p>Constructor with error message.</p>
     *
     * @param message             the error message
     * @param userIdNotAuthorized the role's id not found
     */
    public UserNotAuthorizedException(String message, long userIdNotAuthorized) {
        super(message);
        this.faultInfo = null;
        this.userIdNotAuthorized = userIdNotAuthorized;
    }

    /**
     * <p> Return the userIdNotAuthorized</p>
     *
     * @return the userIdNotAuthorized
     */
    public long getUserIdNotAuthorized() {
        return userIdNotAuthorized;
    }

    /**
     * <p> Return the fault bean. This method is necessary for the serialization/deserialization. it returns null if the
     * constructors without fault bean are used.</p>
     *
     * @return returns fault bean
     */
    public UserNotAuthorizedFault getFaultInfo() {
        return faultInfo;
    }
}

