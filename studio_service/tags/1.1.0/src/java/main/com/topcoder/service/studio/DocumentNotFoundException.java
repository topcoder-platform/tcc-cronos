/*
 * Copyright (C) 2008 TopCoder Inc., All Rights Reserved.
 */
package com.topcoder.service.studio;

import com.topcoder.service.studio.ejb.DocumentNotFoundFault;
import com.topcoder.util.errorhandling.ExceptionData;

import javax.xml.ws.WebFault;

/**
 * <p> This exception is thrown automatically by the web service interface when a document is not found. It is related
 * with "document_not_found_faultMsg" fault in WSDL, but it contains only annotations about "document_not_found_fault"
 * because the messages are automatically constructed. It was generated by JBoss tools and I changed the name, the
 * inheritance and other changes.</p>
 *
 * <p> The constructors with DocumentNotFoundFault and the getter are necessary for the correct webservices
 * serialization/deserialization. The other constructors are added for the future implementations of the service
 * interface.</p>
 *
 * @author fabrizyo, TCSDEVELOPER
 * @version 1.0
 */
@WebFault(name = "document_not_found_fault", faultBean = "com.topcoder.service.studio.ejb.DocumentNotFoundFault")
public class DocumentNotFoundException extends StudioServiceException {
    /**
     * <p> Represents the faultInfo, Java type that goes as soapenv:Fault detail element.</p>
     */
    private final DocumentNotFoundFault faultInfo;

    /**
     * <p> Represents the documentNotFound. I updated the WSDL, now it's an long. It is retrieved from
     * DocumentNotFoundFault.</p>
     */
    private final long documentIdNotFound;

    /**
     * <p> Construct the exception. Call the super constructor,set the fault info and set the documentIdNotFound from
     * the faultInfo.</p>
     *
     * @param message   the message
     * @param faultInfo the fault info which contains the documentIdNotFound
     */
    public DocumentNotFoundException(String message, DocumentNotFoundFault faultInfo) {
        super(message);
        this.faultInfo = faultInfo;
        this.documentIdNotFound = (faultInfo == null) ? -1 : faultInfo.getDocumentIdNotFound();
    }

    /**
     * <p> Construct the exception. Call the super constructor,set the fault info and set the documentIdNotFound from
     * the faultInfo.</p>
     *
     * @param message   the message
     * @param faultInfo the fault info which contains the documentIdNotFound
     * @param cause     the cause
     */
    public DocumentNotFoundException(String message, DocumentNotFoundFault faultInfo, Throwable cause) {
        super(message, cause);
        this.faultInfo = faultInfo;
        this.documentIdNotFound = (faultInfo == null) ? -1 : faultInfo.getDocumentIdNotFound();
    }

    /**
     * <p>Constructor with error message.</p>
     *
     * @param message            the error message
     * @param documentIdNotFound the document's id not found
     */
    public DocumentNotFoundException(String message, long documentIdNotFound) {
        super(message);
        this.documentIdNotFound = documentIdNotFound;
        this.faultInfo = null;
    }

    /**
     * <p>Constructor with error message and inner cause.</p>
     *
     * @param message            the error message
     * @param cause              the cause of this exception
     * @param documentIdNotFound the document's id not found
     */
    public DocumentNotFoundException(String message, Throwable cause, long documentIdNotFound) {
        super(message, cause);
        this.documentIdNotFound = documentIdNotFound;
        this.faultInfo = null;
    }

    /**
     * <p>Constructor with error message and exception data</p>
     *
     * @param message            the error message
     * @param documentIdNotFound the document's id not found
     * @param data               the exception data
     */
    public DocumentNotFoundException(String message, ExceptionData data, long documentIdNotFound) {
        super(message, data);
        this.documentIdNotFound = documentIdNotFound;
        this.faultInfo = null;
    }

    /**
     * <p>Constructor with error message and inner cause and exception data</p>
     *
     * @param message            the error message
     * @param cause              the cause of this exception
     * @param data               the exception data
     * @param documentIdNotFound the document's id not found
     */
    public DocumentNotFoundException(String message, Throwable cause, ExceptionData data, long documentIdNotFound) {
        super(message, cause, data);
        this.documentIdNotFound = documentIdNotFound;
        this.faultInfo = null;
    }

    /**
     * <p> Return the documentId NotFound</p>
     *
     * @return the documentId NotFound
     */
    public long getDocumentIdNotFound() {
        return documentIdNotFound;
    }

    /**
     * <p> Return the fault bean. This method is necessary for the serialization/deserialization. it returns null if the
     * constructors without fault bean are used.</p>
     *
     * @return returns fault bean
     */
    public DocumentNotFoundFault getFaultInfo() {
        return faultInfo;
    }
}

