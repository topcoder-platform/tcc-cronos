/*
 * Copyright (C) 2008 TopCoder Inc., All Rights Reserved.
 */
package com.topcoder.service.studio;

import com.topcoder.service.studio.ejb.PersistenceFault;
import com.topcoder.util.errorhandling.ExceptionData;

import javax.xml.ws.WebFault;

/**
 * <p> This exception is thrown automatically by the web service interface when an error occurs in the persistence
 * layer. It wraps the generic persistence exceptions (not specific thrown by the interface of this component) thrown by
 * the DocumentManagerBean used in the ejb implementation. It is related with "persistence_faultMsg" fault in WSDL, but
 * it contains only annotations about "persistence_fault" because the messages are automatically constructed. It was
 * generated by JBoss tools and I changed the name, the inheritance and other changes.</p>
 *
 * <p> The constructors with PersistenceFault and the getter are necessary for the correct webservices
 * serialization/deserialization. The other constructors are added for the future implementations of the service
 * interface.</p>
 *
 * @author fabrizyo, TCSDEVELOPER
 * @version 1.0
 */
@WebFault(name = "persistence_fault", faultBean = "com.topcoder.service.studio.ejb.PersistenceFault")
public class PersistenceException extends StudioServiceException {
    /**
     * <p> Represents the faultInfo, Java type that goes as soapenv:Fault detail element.</p>
     */
    private final PersistenceFault faultInfo;

    /**
     * <p> Represents the persistenceMessage. I updated the WSDL, now it's an String. It is retrieved from
     * PersistenceFault.</p>
     */
    private final String persistenceMessage;

    /**
     * <p> Construct the exception. Call the super constructor,set the fault info and set the persistenceMessage from
     * the faultInfo.</p>
     *
     * @param message   the message
     * @param faultInfo the fault info which contains the persistenceMessage
     */
    public PersistenceException(String message, PersistenceFault faultInfo) {
        super(message);
        this.faultInfo = faultInfo;
        this.persistenceMessage = (faultInfo == null) ? null : faultInfo.getPersistenceMessage();
    }

    /**
     * <p> Construct the exception. Call the super constructor,set the fault info and set the persistenceMessage from
     * the faultInfo.</p>
     *
     * @param message   the message
     * @param faultInfo the fault info which contains the persistenceMessage
     * @param cause     the cause
     */
    public PersistenceException(String message, PersistenceFault faultInfo, Throwable cause) {
        super(message, cause);
        this.faultInfo = faultInfo;
        this.persistenceMessage = (faultInfo == null) ? null : faultInfo.getPersistenceMessage();
    }

    /**
     * <p>Constructor with error message.</p>
     *
     * @param message            the error message
     * @param persistenceMessage the competition's id not found
     */
    public PersistenceException(String message, String persistenceMessage) {
        super(message);
        this.persistenceMessage = persistenceMessage;
        this.faultInfo = null;
    }

    /**
     * <p>Constructor with error message and inner cause.</p>
     *
     * @param message            the error message
     * @param cause              the cause of this exception
     * @param persistenceMessage the competition's id not found
     */
    public PersistenceException(String message, Throwable cause, String persistenceMessage) {
        super(message, cause);
        this.persistenceMessage = persistenceMessage;
        this.faultInfo = null;
    }

    /**
     * <p>Constructor with error message and exception data</p>
     *
     * @param message            the error message
     * @param data               the exception data
     * @param persistenceMessage the competition's id not found
     */
    public PersistenceException(String message, ExceptionData data, String persistenceMessage) {
        super(message, data);
        this.persistenceMessage = persistenceMessage;
        this.faultInfo = null;
    }

    /**
     * <p>Constructor with error message and inner cause and exception data</p>
     *
     * @param message            the error message
     * @param cause              the cause of this exception
     * @param data               the exception data
     * @param persistenceMessage the competition's id not found
     */
    public PersistenceException(String message, Throwable cause, ExceptionData data, String persistenceMessage) {
        super(message, cause, data);
        this.persistenceMessage = persistenceMessage;
        this.faultInfo = null;
    }

    /**
     * <p> Return the persistenceMessage</p>
     *
     * @return the persistenceMessage
     */
    public String getPersistenceMessage() {
        return persistenceMessage;
    }

    /**
     * <p> Return the fault bean. This method is necessary for the serialization/deserialization. it returns null if the
     * constructors without fault bean are used.</p>
     *
     * @return returns fault bean
     */
    public PersistenceFault getFaultInfo() {
        return faultInfo;
    }
}