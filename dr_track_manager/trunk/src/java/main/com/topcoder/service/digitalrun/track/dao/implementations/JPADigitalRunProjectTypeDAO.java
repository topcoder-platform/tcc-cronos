/*
 * Copyright (C) 2008 TopCoder Inc., All Rights Reserved.
 */
package com.topcoder.service.digitalrun.track.dao.implementations;

import com.topcoder.service.digitalrun.entity.ProjectType;
import com.topcoder.service.digitalrun.track.DigitalRunProjectTypeDAO;
import com.topcoder.service.digitalrun.track.DigitalRunTrackManagerPersistenceException;
import com.topcoder.service.digitalrun.track.EntityNotFoundException;
import com.topcoder.service.digitalrun.track.Helper;

import java.util.List;


/**
 * <p>
 * This class implements <code>DigitalRunProjectTypeDAO</code> interface. It also extends the <code>AbstractDAO</code>
 * class. This class manages <code>ProjectType</code> entities in a JPA persistence (currently the JPA persistence
 * will use Hibernate as a provider but any provider can be used). Each public method performs logging.
 * </p>
 *
 * <p>
 * This class is not completely thread safe because it doesn't manage transactions and it is also mutable. Anyway, the
 * intent is to use this implementation in a state less session bean so there will be no thread safety issues
 * generated by this class since the container will ensure thread safety.
 * </p>
 *
 * @see com.topcoder.service.digitalrun.track.DigitalRunProjectTypeDAO
 * @see com.topcoder.service.digitalrun.track.dao.implementations.AbstractDAO
 * @author DanLazar, waits
 * @version 1.0
 */
public class JPADigitalRunProjectTypeDAO extends AbstractDAO implements DigitalRunProjectTypeDAO {
    /**
     * <p>
     * Default constructor.
     * </p>
     */
    public JPADigitalRunProjectTypeDAO() {
    }

    /**
     * <p>
     * Gets the ProjectType entity identified by the given id from the persistence.
     * </p>
     *
     * @param projectTypeId the id that identifies the entity top be retrieved
     *
     * @return the entity identified by the id
     *
     * @throws IllegalArgumentException id argument is negative
     * @throws EntityNotFoundException if there is no ProjectType with the given id in persistence
     * @throws DigitalRunTrackManagerPersistenceException if any errors occur when accessing the persistent storage
     */
    public ProjectType getProjectType(long projectTypeId)
        throws EntityNotFoundException, DigitalRunTrackManagerPersistenceException {
        Helper.logEntranceInfo("getProjectType(projectTypeId)", getLogger());

        try {
            return find(ProjectType.class, projectTypeId);
        } finally {
            Helper.logExitInfo("getProjectType(projectTypeId)", getLogger());
        }
    }

    /**
     * <p>
     * Gets the ProjectType entity identified by the given id from the persistence.
     * </p>
     *
     * @return a list containing all reference types or an empty list if there is no such entity
     *
     * @throws DigitalRunTrackManagerPersistenceException if any errors occur when accessing the persistent storage
     */
    public List < ProjectType > getAllProjectTypes()
        throws DigitalRunTrackManagerPersistenceException {
        Helper.logEntranceInfo("getAllProjectTypes()", getLogger());

        try {
            return findAll(ProjectType.class);
        } finally {
            Helper.logExitInfo("getAllProjectTypes()", getLogger());
        }
    }
}
