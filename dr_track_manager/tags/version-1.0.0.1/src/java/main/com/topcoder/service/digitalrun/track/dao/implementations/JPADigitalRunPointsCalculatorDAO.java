/*
 * Copyright (C) 2008 TopCoder Inc., All Rights Reserved.
 */
package com.topcoder.service.digitalrun.track.dao.implementations;

import com.topcoder.service.digitalrun.entity.PointsCalculator;
import com.topcoder.service.digitalrun.track.DigitalRunPointsCalculatorDAO;
import com.topcoder.service.digitalrun.track.DigitalRunTrackManagerPersistenceException;
import com.topcoder.service.digitalrun.track.EntityNotFoundException;
import com.topcoder.service.digitalrun.track.Helper;

import java.util.List;


/**
 * <p>
 * This class implements <code>DigitalRunPointsCalculatorDAO</code> interface. It also extends the
 * <code>AbstractDAO</code> class. This class manages <code>PointsCalculator</code> entities in a JPA persistence
 * (currently the JPA persistence will use Hibernate as a provider but any provider can be used). Each public method
 * performs logging.
 * </p>
 *
 * <p>
 * This class is not completely thread safe because it doesn't manage transactions and it is also mutable. Anyway, the
 * intent is to use this implementation in a state less session bean so there will be no thread safety issues
 * generated by this class since the container will ensure thread safety.
 * </p>
 *
 * @see com.topcoder.service.digitalrun.track.DigitalRunPointsCalculatorDAO
 * @see com.topcoder.service.digitalrun.track.dao.implementations.AbstractDAO
 * @author DanLazar, waits
 * @version 1.0
 */
public class JPADigitalRunPointsCalculatorDAO extends AbstractDAO implements DigitalRunPointsCalculatorDAO {
    /**
     * <p>
     * Default constructor.
     * </p>
     */
    public JPADigitalRunPointsCalculatorDAO() {
    }

    /**
     * <p>
     * Creates a new PointsCalculator entity into persistence.  Returns the PointsCalculator instance with id
     * generated.
     * </p>
     *
     * @param pointsCalculator the entity to be created
     *
     * @return entity the persisted object with id set, not null
     *
     * @throws IllegalArgumentException if argument is null or if its id large than 0
     * @throws DigitalRunTrackManagerPersistenceException if any errors occur when accessing the persistent storage
     */
    public PointsCalculator createPointsCalculator(PointsCalculator pointsCalculator)
        throws DigitalRunTrackManagerPersistenceException {
        Helper.logEntranceInfo("createPointsCalculator(PointsCalculator)", getLogger());
        try {
            return persist(pointsCalculator, "PointsCalculator");
        } finally {
            Helper.logExitInfo("createPointsCalculator(PointsCalculator)", getLogger());
        }
    }

    /**
     * <p>
     * Updates the given PointsCalculator instance into persistence.
     * </p>
     *
     * @param pointsCalculator the entity to be updated
     *
     * @throws IllegalArgumentException if argument is null
     * @throws EntityNotFoundException if a PointsCalculator entity does not exist in the persistence
     * @throws DigitalRunTrackManagerPersistenceException if any errors occur when accessing the persistent storage
     */
    public void updatePointsCalculator(PointsCalculator pointsCalculator)
        throws EntityNotFoundException, DigitalRunTrackManagerPersistenceException {
        Helper.logEntranceInfo("updatePointsCalculator(PointsCalculator)", getLogger());
        try {
            update(pointsCalculator, "PointsCalculator");
        } finally {
            Helper.logExitInfo("updatePointsCalculator(PointsCalculator)", getLogger());
        }
    }

    /**
     * <p>
     * Removes the PointsCalculator type entity identified by the given id from persistence.
     * </p>
     *
     * @param pointsCalculatorId the id that identified the entity to be removed
     *
     * @throws IllegalArgumentException if argument is negative
     * @throws EntityNotFoundException if there is no PointsCalculator entity with the given id in persistence
     * @throws DigitalRunTrackManagerPersistenceException if any errors occur when accessing the persistent storage
     */
    public void removePointsCalculator(long pointsCalculatorId)
        throws EntityNotFoundException, DigitalRunTrackManagerPersistenceException {
        Helper.logEntranceInfo("removePointsCalculator(pointsCalculatorId)", getLogger());
        try {
            remove(PointsCalculator.class, pointsCalculatorId);
        } finally {
            Helper.logExitInfo("removePointsCalculator(pointsCalculatorId)", getLogger());
        }
    }

    /**
     * <p>
     * Gets the PointsCalculator entity identified by the given id from persistence.
     * </p>
     *
     * @param pointsCalculatorId the id that identifies the entity top be retrieved
     *
     * @return the entity identified by the id
     *
     * @throws IllegalArgumentException if argument is negative
     * @throws EntityNotFoundException if there is no PointsCalculator entity  with the given id in persistence
     * @throws DigitalRunTrackManagerPersistenceException if any errors occur when accessing the persistent storage
     */
    public PointsCalculator getPointsCalculator(long pointsCalculatorId)
        throws EntityNotFoundException, DigitalRunTrackManagerPersistenceException {
        Helper.logEntranceInfo("getPointsCalculator(pointsCalculatorId)", getLogger());
        try {
            return find(PointsCalculator.class, pointsCalculatorId);
        } finally {
            Helper.logExitInfo("getPointsCalculator(pointsCalculatorId)", getLogger());
        }
    }

    /**
     * <p>
     * Gets all the PointsCalculator entities from persistence.  If there is no PointsCalculator in persistence an
     * empty list is returned.
     * </p>
     *
     * @return a list containing all operations or an empty list if there is no such entity
     *
     * @throws DigitalRunTrackManagerPersistenceException if any errors occur when accessing the persistent storage
     */
    @SuppressWarnings("unchecked")
    public List < PointsCalculator > getAllPointsCalculators()
        throws DigitalRunTrackManagerPersistenceException {
        Helper.logEntranceInfo("getAllPointsCalculators()", getLogger());

        try {
            return findAll(PointsCalculator.class);
        } finally {
            Helper.logExitInfo("getAllPointsCalculators()", getLogger());
        }
    }
}
