/*
 * Copyright (C) 2007 TopCoder Inc., All Rights Reserved.
 */
package com.topcoder.timetracker.rejectreason.ejb;

import com.topcoder.search.builder.filter.Filter;

import com.topcoder.timetracker.rejectreason.RejectReason;


/**
 * <p>
 * This is a Business Delegate/Service Locator that may be used within a J2EE application. It is responsible for
 * looking up the local interface of the SessionBean for RejectReasonDAO, and delegating any calls to the bean.
 * </p>
 * 
 * <p>
 * Thread Safety: - This class is thread safe, since all state is modified at construction.
 * </p>
 */
public class RejectReasonManager {
    /**
     * <p>
     * This is the local interface for the RejectReasonDAO business services. All business calls are delegated here.
     * </p>
     * 
     * <p>
     * Initial Value: Initialized in Constructor
     * </p>
     * 
     * <p>
     * Accessed In: Not Accessed
     * </p>
     * 
     * <p>
     * Modified In: Not modified after initialization
     * </p>
     * 
     * <p>
     * Utilized In: All RejectReasonDAO methods
     * </p>
     * 
     * <p>
     * Valid Values: Non-null
     * </p>
     */
    private final RejectReasonDAOLocal local = null;

    /**
     * <p>
     * Constructor that accepts configuration from the specified ConfigManager namespace.
     * </p>
     * 
     * <p>
     * Implementation Notes: - Load the 'context_name' property (if any, else use default JNDI context instead) form
     * give namespace by ConfigManager and create an InitialContext from given property (Using JNDIUtils).&nbsp; - Use
     * the given context to find and create the Home object to use. - Use the home object to create the local object
     * and store it as instance variable.
     * </p>
     *
     * @param namespace The namespace to use.
     *
     * @throws IllegalArgumentException if namespace is null or an empty String.
     * @throws DataAccessException if a problem occurs while constructing the instance.
     */
    public RejectReasonManager(String namespace) {
        // your code here
    }

    /**
     * <p>
     * Creates a datastore entry for the given Reject Reason. An id is automatically generated by the DAO and assigned
     * to the reason. The RejectReason is also considered to have been created by the specified username.&nbsp;If the
     * argument isAudit is true, insert the corresponding audit record in data store.
     * </p>
     * 
     * <p>
     * Implementation Notes: - Simply delegate to the local object.
     * </p>
     *
     * @param rejectReason the RejectReason to be persistent in the data store
     * @param username The username of the user responsible for creating the RejectReason entry within the datastore.
     * @param isAudit Need audit or not
     *
     * @return The same rejectReason Object, with an assigned id, creationDate, modificationDate, creationUser and
     *         modificationUser assigned appropriately. (none null)
     *
     * @throws IllegalArgumentEException if the rejectReason or username is null, or if username is an empty String.
     * @throws RejectReasonDAOException if a problem occurs while accessing the data store.
     */
    public RejectReason createRejectReason(RejectReason rejectReason, String username, boolean isAudit) {
        // your code here
        return null;
    }

    /**
     * <p>
     * Retrieves a RejectReason from the datastore with the provided id. If no RejectReason with that id exists,  then
     * a null is returned.
     * </p>
     * 
     * <p>
     * Implementation Notes: - Simply delegate to the local object.
     * </p>
     *
     * @param id The id of the RejectReason to retrieve from the datastore.
     *
     * @return The retrieved RejectReason object (maube null)
     *
     * @throws IllegalArgumentException if id is &lt;=0
     * @throws RejectReasonDAOException if a problem occurs while accessing the data store.
     */
    public RejectReason retrieveRejctReason(long id) {
        // your code here
        RejectReason reason = new RejectReason();
        reason.setCompanyId(100);

        return reason;
    }

    /**
     * <p>
     * Updates the given RejectReason in the data store. The RejectReason is considered to have been modified by the
     * specified username.&nbsp;If the argument isAudit is true, insert the corresponding audit record in data store.
     * </p>
     * 
     * <p>
     * Implementation Notes: - Simply delegate to the local object.
     * </p>
     *
     * @param rejectReason The RejectReason entity to modify.
     * @param username The username of the user responsible for performing the update.
     * @param isAudit Need audit or not
     *
     * @throws RejectReasonDAOException if a problem occurs while accessing the data store.
     * @throws RejectReasonNotFoundException if the RejectReason to update was not found in the data store.
     */
    public void updateRejectReason(RejectReason rejectReason, String username, boolean isAudit) {
        // your code here
    }

    /**
     * <p>
     * Removes the specified RejectReason from the data store.&nbsp;If the argument isAudit is true, insert the
     * corresponding audit record in data store.
     * </p>
     * 
     * <p>
     * Implementation Notes: - Simply delegate to the local object.
     * </p>
     *
     * @param rejectReason The rejectReason to delete.
     * @param isAudit Need audit or not
     *
     * @throws IllegalArgumentException if the rejectReason is null.
     * @throws RejectReasonDAOException if a problem occurs while accessing the data store.
     * @throws RejectReasonNotFoundException if the RejectReason to delete was not found in the data store.
     */
    public void deleteRejectReason(RejectReason rejectReason, boolean isAudit) {
        // your code here
    }

    /**
     * <p>
     * Enumerates all the RejectReasons that are present within the data store. &nbsp;If no record found an empty array
     * will be return.
     * </p>
     * 
     * <p>
     * Implementation Notes: - Simply delegate to the local object.
     * </p>
     *
     * @return A list of all the RejectReasons within the data store.
     *
     * @throws RejectReasonDAOException if a problem occurs while accessing the data store.
     */
    public RejectReason[] listRejectReasons() {
        // your code here
        return null;
    }

    /**
     * <p>
     * Returns a list of all the RejectReasons within the datastore that satisfy the filters that are provided.
     * &nbsp;If no record found an empty array will be return. The filters are defined using classes from the Search
     * Builder v1.3.1 component and com.cronos.timetracker. common.search package.
     * </p>
     * 
     * <p>
     * Implementation Notes: - Simply delegate to the local object.
     * </p>
     *
     * @param filter The filter that is used as criterion to facilitate the search..
     *
     * @return A list of RejectReasons that satisfy the search criterion.
     *
     * @throws IllegalArgumentException if the filter is null.
     * @throws RejectReasonDAOException if a problem occurs while accessing the data store.
     */
    public RejectReason[] searchRejectReasons(Filter filter) {
        // your code here
        return null;
    }

    /**
     * lock-begin
     */
}
