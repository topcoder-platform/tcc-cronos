This readme file explains how to setup and build this component.
(See: http://www.topcoder.com/wiki/display/tc/Java+Component+Build+Process for an explanation of the build process used.)

1. Install the component structure in ${basedir}

2. Create "topcoder_global.properties" in ${basedir}/.. and add the properties from steps 2,3,4,5

3. The following standard build script properties must be set
	ext_libdir - root of third party libraries
	tcs_libdir - root of topcoder components
	java_1_3_bootclasspath - installation path for java 1.3 (only needed for compile_targets task)
	junit.jar - location of junit.jar (component was written for v3.8.2)

4. The following standard build script properties can be changed (defaults are noted)
	debug=off - as expected
	verbose=no - as expected
	cobertura.dir=${ext_libdir}/cobertura/1.9
		installation directory of cobertura script expects {$cobertura.dir}/cobertura.jar
		and {$cobertura.dir}/lib/containg Jars for asm, jakarta, and log4j to run cobertura task

5. The following properties need to be set for this component:
	${jboss.home} - points to the JBoss instalation directory

6. The following third party libraries need to have their location specified - by default the build-dependencies.xml file looks for these under ${ext_libdir}, if you follow the setup listed in that file, you will not need to add these to global:
	[List the third party libraries here as their property name, include comment of version to use]
	${log4j.jar} - version 1.2.15 or later, testing only

7. Ant Commands:
	ant clean - removes temporary build files
	ant compile - builds the production code
	ant compile_tests - builds the test code
	ant test - runs the test code
	ant reports-all - generates javadoc and code coverage reports
	ant deploy-lib - moves the component runtime jar to the location where other components will look for it.

NB:
	The folder ${basedir}/test_reflib contains TopCoder components
	that are required by this component's test code. This component is
	used to by compile_test and test targets. Components are listed under
	the following directory structure "component name"/"component version".
	Components are provided AS IS for development purposes only.

	Included:
		catalog_services/1.0.0/catalog_services.jar - defines Status entity used in this component
		configuration_manager/2.1.5/configuration_manager.jar - used for component configuring
		object_formatter/1.0/object_formatter.jar - is used for formatting
		resource_management/1.1.0/resource_management.jar - defines resource management
		review_data_structure/1.1.0/review_data_structure.jar - defines review data structure
		search_builder/1.4.0/search_builder.jar - defines search builder
		security/1.0.0/security.jar - defines security implementation
		studio_contest_manager/1.3.0/studio_contest_manager.jar -  defines studio contest manager
		typesafe_enum/1.1.0/typesafe_enum.jar - defines type safe enum