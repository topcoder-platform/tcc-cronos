Testsuite: com.topcoder.management.phase.autopilot.AllTests
Tests run: 385, Failures: 0, Errors: 0, Time elapsed: 18.891 sec
------------- Standard Output ---------------
|      ProjectId      |    Ended    |    Started    |
|          2          |      0      |       0       |
|          4          |      0      |       0       |
|          1          |      0      |       0       |
|          3          |      0      |       0       |
|          5          |      0      |       0       |
Projects processed: 5
  ID: 2 每  ended: 0 started: 0
  ID: 4 每  ended: 0 started: 0
  ID: 1 每  ended: 0 started: 0
  ID: 3 每  ended: 0 started: 0
  ID: 5 每  ended: 0 started: 0
Test AutoPilot#advanceProjects(String) for 100000 times.
It took 2047 ms.

Test AutoPilot#advanceProjects(long[], String) for 100000 times.
It took 1672 ms.

Test AutoPilot#advanceProject(long, String) for 100000 times.
It took 281 ms.

Test AutoPilotJob#run() for 100000 times.
It took 1765 ms.

Test AutoPilotJob#schedule(String, String, int) for 100000 times.
It took 1813 ms.

------------- ---------------- ---------------
------------- Standard Error -----------------
Sun Aug 06 15:17:22 CST 2006 - 1 - 2:PhaseType#2 - END - Checker
Sun Aug 06 15:17:22 CST 2006 - 1 - 3:PhaseType#3 - START - Checker
Sun Aug 06 15:17:22 CST 2006 - 1 - 2:PhaseType#2 - END - Check
Sun Aug 06 15:17:22 CST 2006 - 1 - 3:PhaseType#3 - START - Check
Sun Aug 06 15:17:22 CST 2006 - 1 - 2:PhaseType#2 - END - Check
Sun Aug 06 15:17:22 CST 2006 - 1 - 3:PhaseType#3 - START - Check
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
Sun Aug 06 15:17:23 CST 2006 - 1 - 2:PhaseType#2 - END - Check
Sun Aug 06 15:17:23 CST 2006 - 1 - 3:PhaseType#3 - START - Check
Sun Aug 06 15:17:23 CST 2006 - 1 - 6:PhaseType#1 - END - Check
Sun Aug 06 15:17:23 CST 2006 - 2 - 11:PhaseType#1 - START - Check
Sun Aug 06 15:17:23 CST 2006 - 1 - 0:Null Phase Type - END - Check
com.topcoder.management.phase.autopilot.AutoPilotSourceException: test
	at com.topcoder.management.phase.autopilot.AutoPilotJobFailure$1.advanceProjects(AutoPilotJobFailure.java:206)
	at com.topcoder.management.phase.autopilot.AutoPilotJob.execute(AutoPilotJob.java:300)
	at com.topcoder.management.phase.autopilot.AutoPilotJob.run(AutoPilotJob.java:274)
	at com.topcoder.management.phase.autopilot.AutoPilotJobFailure.testRunVoidAutoPilotSourceException(AutoPilotJobFailure.java:212)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:289)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:656)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:558)
com.topcoder.management.phase.autopilot.PhaseOperationException: test
	at com.topcoder.management.phase.autopilot.AutoPilotJobFailure$2.advanceProjects(AutoPilotJobFailure.java:231)
	at com.topcoder.management.phase.autopilot.AutoPilotJob.execute(AutoPilotJob.java:300)
	at com.topcoder.management.phase.autopilot.AutoPilotJob.run(AutoPilotJob.java:274)
	at com.topcoder.management.phase.autopilot.AutoPilotJobFailure.testRunVoidPhaseOperationException(AutoPilotJobFailure.java:237)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:289)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:656)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:558)
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
This command line provides 2 functionalites:
 - run once (given a list of project ids or retrieve ids from AutoPilotSource)
 - poll mode (scheduled in background to run Auto Pilot every some intervals)

 The command line syntax is:
 java AutoPilotJob [-config configFile] [-namespace ns [-autopilot apKey]]
	(-poll [interval] [-jobname jobname] | -project [Id[, ...]])

    - configFile specifies the path to config files to be loaded into
        configuration manager. if not specified it's assumed the config file
        is preloaded.

    - ns and apKey are optional, it's used to instantiate AutoPilotJob for
    	project mode. ns is also used to instantiate the Scheduler. The
    	default	values are AutoPilotJob's full name & AutoPilot's full name
    	respectively.

    - poll and project These next options are mutually exclusive (to indicate
        two kinds of run-mode): It is an error if both poll/projects are
        specified or none are specified.

    A) Poll-mode - poll is used to define the interval in minutes, if interval
        is not specified, a default of 5 minutes is used. The autopilot job will
        be executed every this interval starting from midnight.
        - jobname is the job name, Job Scheduling will use this job name. The
            default value is 'AutoPilotJob'. It is optional and can only be
            specified if poll is specified. It is an error to specify this
            option without specifying -poll.
        - ns is used to instantiate the Scheduler. Optional. The default value
        	is AutoPilotJob's full name.
        - apKey is ignored.

    B) - project can be specified to process projects with the given ids. The
        project ids will be processed once and the application terminates, it
        doesn't go into poll mode. If no ids are given, AutoPilotSource is
        used instead.
	   - ns and apKey, must be specified or not at the same time, default to
		   AutoPilotJob's full name and AutoPilot's full name respectively.
com.topcoder.management.phase.autopilot.AutoPilotSourceException: fail to search projects cause of persistence exception, caused by 
	at com.topcoder.management.phase.autopilot.impl.ActiveAutoPilotSource.getProjectIds(ActiveAutoPilotSource.java:325)
	at com.topcoder.management.phase.autopilot.AutoPilot.advanceProjects(AutoPilot.java:239)
	at com.topcoder.management.phase.autopilot.AutoPilotJob.execute(AutoPilotJob.java:300)
	at com.topcoder.management.phase.autopilot.AutoPilotJob.run(AutoPilotJob.java:274)
	at com.topcoder.management.phase.autopilot.failuretests.AutoPilotJobFailureTests.testRun1AutoPilotSourceFail(AutoPilotJobFailureTests.java:653)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:289)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:656)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:558)
Caused by: com.topcoder.management.project.PersistenceException: 
	at com.topcoder.management.phase.autopilot.failuretests.MockProjectManager.searchProjects(MockProjectManager.java:107)
	at com.topcoder.management.phase.autopilot.impl.ActiveAutoPilotSource.getProjectIds(ActiveAutoPilotSource.java:321)
	... 23 more
Caused by:com.topcoder.management.project.PersistenceException: 
	at com.topcoder.management.phase.autopilot.failuretests.MockProjectManager.searchProjects(MockProjectManager.java:107)
	at com.topcoder.management.phase.autopilot.impl.ActiveAutoPilotSource.getProjectIds(ActiveAutoPilotSource.java:321)
	at com.topcoder.management.phase.autopilot.AutoPilot.advanceProjects(AutoPilot.java:239)
	at com.topcoder.management.phase.autopilot.AutoPilotJob.execute(AutoPilotJob.java:300)
	at com.topcoder.management.phase.autopilot.AutoPilotJob.run(AutoPilotJob.java:274)
	at com.topcoder.management.phase.autopilot.failuretests.AutoPilotJobFailureTests.testRun1AutoPilotSourceFail(AutoPilotJobFailureTests.java:653)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:289)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:656)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:558)
com.topcoder.management.phase.autopilot.PhaseOperationException: fail to get phases cause of phase manager exception, caused by 
	at com.topcoder.management.phase.autopilot.impl.DefaultProjectPilot.advancePhases(DefaultProjectPilot.java:363)
	at com.topcoder.management.phase.autopilot.AutoPilot.advanceProject(AutoPilot.java:314)
	at com.topcoder.management.phase.autopilot.AutoPilot.advanceProjects(AutoPilot.java:280)
	at com.topcoder.management.phase.autopilot.AutoPilot.advanceProjects(AutoPilot.java:240)
	at com.topcoder.management.phase.autopilot.AutoPilotJob.execute(AutoPilotJob.java:300)
	at com.topcoder.management.phase.autopilot.AutoPilotJob.run(AutoPilotJob.java:274)
	at com.topcoder.management.phase.autopilot.failuretests.AutoPilotJobFailureTests.testRun1ProjectPilotFail(AutoPilotJobFailureTests.java:670)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:289)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:656)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:558)
Caused by: com.topcoder.management.phase.PhaseManagementException: 
	at com.topcoder.management.phase.autopilot.failuretests.MockPhaseManager.getPhases(MockPhaseManager.java:135)
	at com.topcoder.management.phase.autopilot.impl.DefaultProjectPilot.advancePhases(DefaultProjectPilot.java:358)
	... 25 more
Caused by:com.topcoder.management.phase.PhaseManagementException: 
	at com.topcoder.management.phase.autopilot.failuretests.MockPhaseManager.getPhases(MockPhaseManager.java:135)
	at com.topcoder.management.phase.autopilot.impl.DefaultProjectPilot.advancePhases(DefaultProjectPilot.java:358)
	at com.topcoder.management.phase.autopilot.AutoPilot.advanceProject(AutoPilot.java:314)
	at com.topcoder.management.phase.autopilot.AutoPilot.advanceProjects(AutoPilot.java:280)
	at com.topcoder.management.phase.autopilot.AutoPilot.advanceProjects(AutoPilot.java:240)
	at com.topcoder.management.phase.autopilot.AutoPilotJob.execute(AutoPilotJob.java:300)
	at com.topcoder.management.phase.autopilot.AutoPilotJob.run(AutoPilotJob.java:274)
	at com.topcoder.management.phase.autopilot.failuretests.AutoPilotJobFailureTests.testRun1ProjectPilotFail(AutoPilotJobFailureTests.java:670)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:289)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:656)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:558)
------------- ---------------- ---------------

Testcase: testAutoPilot took 0.094 sec
Testcase: testAutoPilotStringStringString took 0.047 sec
Testcase: testAutoPilotAutoPilotSourceProjectPilot took 0.031 sec
Testcase: testGetAutoPilotSource took 0.015 sec
Testcase: testGetProjectPilot took 0.016 sec
Testcase: testAdvanceProjectsString took 0.063 sec
Testcase: testAdvanceProjectsString2 took 0.015 sec
Testcase: testAdvanceProjectsLongArrayStringEmptyProjectId took 0.031 sec
Testcase: testAdvanceProjectsLongArrayString took 0.032 sec
Testcase: testAdvanceProjectsLongArrayString2 took 0.031 sec
Testcase: testAdvanceProject took 0.047 sec
Testcase: testAdvanceProject2 took 0 sec
Testcase: testAutoPilotJob took 0.062 sec
Testcase: testAutoPilotJobStringString took 0.047 sec
Testcase: testAutoPilotJobStringStringOperator took 0.047 sec
Testcase: testAutoPilotJobAutoPilotString took 0.016 sec
Testcase: testGetAutoPilot took 0.047 sec
Testcase: testGetOperator took 0.046 sec
Testcase: testRun took 0.032 sec
Testcase: testRunLongArray took 0.047 sec
Testcase: testIsDone took 0.046 sec
Testcase: testClose took 0.063 sec
Testcase: testGetStatus took 0.031 sec
Testcase: testMain took 0.047 sec
Testcase: testMainPoll took 0.063 sec
Testcase: testMainProject took 0.062 sec
Testcase: testCreateJob took 0.016 sec
Testcase: testSchedule took 0.047 sec
Testcase: testGetScheduler took 0.031 sec
Testcase: testAutoPilotResult took 0 sec
Testcase: testGetProjectId took 0 sec
Testcase: testGetPhaseEndedCount took 0 sec
Testcase: testGetPhaseStartedCount took 0 sec
Testcase: testAggregate took 0 sec
Testcase: testActiveAutoPilotSource took 0.015 sec
Testcase: testActiveAutoPilotSourceStringStringStringStringString took 0.016 sec
Testcase: testActiveAutoPilotSourceProjectManagerStringStringString took 0 sec
Testcase: testGetProjectManager took 0 sec
Testcase: testGetActiveStatusName took 0 sec
Testcase: testGetExtPropAutoPilotSwitch took 0 sec
Testcase: testGetExtPropAutoPilotSwitchValue took 0 sec
Testcase: testGetProjectIds took 0.016 sec
Testcase: testBuildFilter took 0 sec
Testcase: testProcessProject took 0 sec
Testcase: testDefaultProjectPilot took 0 sec
Testcase: testDefaultProjectPilotStringStringStringStringString took 0.015 sec
Testcase: testDefaultProjectPilotPhaseManagerStringStringLog took 0 sec
Testcase: testGetPhaseManager took 0 sec
Testcase: testGetLogger took 0.016 sec
Testcase: testGetScheduledStatusName took 0.016 sec
Testcase: testGetOpenStatusName took 0 sec
Testcase: testAdvancePhases took 0 sec
Testcase: testAdvancePhases2 took 0.015 sec
Testcase: testAdvancePhasesNullPhases took 0.031 sec
Testcase: testAdvancePhasesEmptyPhases took 0.016 sec
Testcase: testProcessPhase took 0 sec
Testcase: testDoPhaseOperation took 0.016 sec
Testcase: testDoPhaseOperationNullStatus took 0 sec
Testcase: testDoAudit took 0.015 sec
Testcase: testDoAuditNullType took 0.016 sec
Testcase: testAutoPilotSourceExceptionString took 0 sec
Testcase: testAutoPilotSourceExceptionStringThrowable took 0 sec
Testcase: testThrowing took 0 sec
Testcase: testAutoPilotSourceExceptionString took 0 sec
Testcase: testAutoPilotSourceExceptionStringThrowable took 0 sec
Testcase: testThrowing took 0 sec
Testcase: testAutoPilotSourceException took 0 sec
Testcase: testThrowing took 0 sec
Testcase: testConfigurationException took 0 sec
Testcase: testConfigurationExceptionString took 0 sec
Testcase: testConfigurationExceptionStringThrowable took 0 sec
Testcase: testGetProjectId took 0 sec
Testcase: testThrowing took 0 sec
Testcase: testPhaseOperationException took 0 sec
Testcase: testPhaseOperationExceptionString took 0 sec
Testcase: testPhaseOperationExceptionStringThrowable took 0 sec
Testcase: testGetPhase took 0 sec
Testcase: testAutoPilotJob took 0 sec
Testcase: testRunLongArray took 0.016 sec
Testcase: testAutoPilotJobStringStringNullNs took 0 sec
Testcase: testAutoPilotJobStringStringEmptyNs took 0 sec
Testcase: testAutoPilotJobStringStringNullApkey took 0 sec
Testcase: testAutoPilotJobStringStringEmptyApkey took 0 sec
Testcase: testAutoPilotJobAutoPilotStringNullAutoPilot took 0 sec
Testcase: testAutoPilotJobAutoPilotStringNullOperator took 0.047 sec
Testcase: testAutoPilotJobAutoPilotStringEmptyOperator took 0.016 sec
Testcase: testRunVoidAutoPilotSourceException took 0.015 sec
Testcase: testRunVoidPhaseOperationException took 0.016 sec
Testcase: testMainBadConfig took 0 sec
Testcase: testMainNoNs took 0 sec
Testcase: testMainBadNs took 0.016 sec
Testcase: testMainNoPollProject took 0 sec
Testcase: testMainBothPollProject took 0 sec
Testcase: testMainBadPollA took 0 sec
Testcase: testMainBadPollB took 0 sec
Testcase: testMainBadProjectA took 0 sec
Testcase: testMainBadProjectB took 0 sec
Testcase: testMainBadProjectC took 0 sec
Testcase: testMainBadProjectD took 0 sec
Testcase: testMainProjectJobName took 0 sec
Testcase: testCreateJobNullJobName took 0 sec
Testcase: testCreateJobEmptyJobName took 0 sec
Testcase: testCreateJobNonPositive took 0 sec
Testcase: testScheduleNullNs took 0 sec
Testcase: testScheduleEmptyNs took 0 sec
Testcase: testScheduleNullJobName took 0 sec
Testcase: testScheduleEmptyJobName took 0 sec
Testcase: testScheduleNonPositiveInterval took 0 sec
Testcase: testAutoPilot took 0 sec
Testcase: testAutoPilotStringStringStringNullNamespace took 0 sec
Testcase: testAutoPilotStringStringStringEmptyNamespace took 0 sec
Testcase: testAutoPilotStringStringStringNullSource took 0 sec
Testcase: testAutoPilotStringStringStringEmptySource took 0 sec
Testcase: testAutoPilotStringStringStringNullProject took 0 sec
Testcase: testAutoPilotStringStringStringEmptyProject took 0 sec
Testcase: testAutoPilotAutoPilotSourceProjectPilotNullSource took 0.031 sec
Testcase: testAutoPilotAutoPilotSourceProjectPilotNullProject took 0.015 sec
Testcase: testAdvanceProjectsStringNull took 0 sec
Testcase: testAdvanceProjectsStringEmpty took 0.016 sec
Testcase: testAdvanceProjectsLongArrayStringNullId took 0 sec
Testcase: testAdvanceProjectsLongArrayStringNullOperator took 0.016 sec
Testcase: testAdvanceProjectsLongArrayStringEmptyOperator took 0.031 sec
Testcase: testAdvanceProjectNull took 0.016 sec
Testcase: testAdvanceProjectEmpty took 0.015 sec
Testcase: testAggregate took 0 sec
Testcase: testAutoPilotResultNegativeEnded took 0 sec
Testcase: testAutoPilotResultNegativeStarted took 0 sec
Testcase: testAggregateDifferentProjectId took 0 sec
Testcase: testActiveAutoPilotSource took 0 sec
Testcase: testActiveAutoPilotSourceStringStringStringStringStringNullNamespace took 0 sec
Testcase: testActiveAutoPilotSourceStringStringStringStringStringEmptyNamespace took 0 sec
Testcase: testActiveAutoPilotSourceStringStringStringStringStringNullPmkey took 0 sec
Testcase: testActiveAutoPilotSourceStringStringStringStringStringEmptyPmkey took 0 sec
Testcase: testActiveAutoPilotSourceStringStringStringStringStringNullAsname took 0 sec
Testcase: testActiveAutoPilotSourceStringStringStringStringStringEmptyAsname took 0 sec
Testcase: testActiveAutoPilotSourceStringStringStringStringStringNullExtProp took 0 sec
Testcase: testActiveAutoPilotSourceStringStringStringStringStringEmptyExtProp took 0 sec
Testcase: testActiveAutoPilotSourceStringStringStringStringStringNullExtPropVal took 0 sec
Testcase: testActiveAutoPilotSourceStringStringStringStringStringEmptyExtPropVal took 0 sec
Testcase: testActiveAutoPilotSourceProjectManagerStringStringStringNullPm took 0 sec
Testcase: testActiveAutoPilotSourceProjectManagerStringStringStringNullAsname took 0 sec
Testcase: testActiveAutoPilotSourceProjectManagerStringStringStringEmptyAsname took 0 sec
Testcase: testActiveAutoPilotSourceProjectManagerStringStringStringNullExtProp took 0 sec
Testcase: testActiveAutoPilotSourceProjectManagerStringStringStringEmptyExtProp took 0 sec
Testcase: testActiveAutoPilotSourceProjectManagerStringStringStringNullExtPropVal took 0 sec
Testcase: testActiveAutoPilotSourceProjectManagerStringStringStringEmptyExtPropVal took 0 sec
Testcase: testGetProjectIdsException took 0 sec
Testcase: testDefaultProjectPilot took 0 sec
Testcase: testDefaultProjectPilotStringStringStringStringStringNullNamespace took 0 sec
Testcase: testDefaultProjectPilotStringStringStringStringStringEmptyName took 0 sec
Testcase: testDefaultProjectPilotStringStringStringStringStringNullPmkey took 0 sec
Testcase: testDefaultProjectPilotStringStringStringStringStringEmptyPmkey took 0 sec
Testcase: testDefaultProjectPilotStringStringStringStringStringNullScheduledStatusName took 0 sec
Testcase: testDefaultProjectPilotStringStringStringStringStringEmptyScheduledStatusName took 0 sec
Testcase: testDefaultProjectPilotStringStringStringStringStringNullOpenStatusName took 0 sec
Testcase: testDefaultProjectPilotStringStringStringStringStringEmptyOpenStatusName took 0 sec
Testcase: testDefaultProjectPilotStringStringStringStringStringNullLogName took 0 sec
Testcase: testDefaultProjectPilotStringStringStringStringStringEmptyLogName took 0 sec
Testcase: testDefaultProjectPilotPhaseManagerStringStringLogNullPhaseManager took 0 sec
Testcase: testDefaultProjectPilotPhaseManagerStringStringLogNullScheduledStatusName took 0 sec
Testcase: testDefaultProjectPilotPhaseManagerStringStringLogEmptyScheduledStatusName took 0.016 sec
Testcase: testDefaultProjectPilotPhaseManagerStringStringLogNullOpenStatusName took 0 sec
Testcase: testDefaultProjectPilotPhaseManagerStringStringLogEmptyOpenStatusName took 0 sec
Testcase: testDefaultProjectPilotPhaseManagerStringStringLogNullLog took 0 sec
Testcase: testAdvancePhasesNullOperator took 0.015 sec
Testcase: testAdvancePhasesNullProject took 0.032 sec
Testcase: testAdvancePhasesEmptyOperator took 0 sec
Testcase: testProgramatically took 0 sec
Testcase: testConfig took 0.063 sec
Testcase: testCustomPilot took 0.015 sec
Testcase: testConstructor_AutoPilotException took 0.016 sec
Testcase: testConstructor_AutoPilotException_String took 0 sec
Testcase: testConstructor_AutoPilotException_String_Throwable took 0 sec
Testcase: testConstructor_AutoPilotSourceException took 0 sec
Testcase: testConstructor_AutoPilotSourceException_String took 0 sec
Testcase: testConstructor_AutoPilotSourceException_String_Throwable_ took 0 sec
Testcase: testConstructor_ConfigurationException_ took 0 sec
Testcase: testConstructor_ConfigurationException_String_ took 0 sec
Testcase: testConstructor_ConfigurationException_String_Throwable_ took 0 sec
Testcase: testConstructor_PhaseOperationException_ took 0 sec
Testcase: testConstructor_PhaseOperationException_long_phase_String_ took 0 sec
Testcase: testConstructor_PhaseOperationException_long_phase_String_Throwable_ took 0 sec
Testcase: testGetProjectIds took 0.063 sec
Testcase: testBuildFilter took 0.015 sec
Testcase: testConstructor took 0.063 sec
Testcase: testConstructor_ActiveAutoPilotSource_String_String_String_String_String_ took 0.015 sec
Testcase: testConstructor_ActiveAutoPilotSource_ProjectManager_String_String_String_ took 0.047 sec
Testcase: testProcessProject_ProjectArray took 0.016 sec
Testcase: testConstructor_DefaultProjectPilot_ took 0.031 sec
Testcase: testConstructor_DefaultProjectPilot_String_String_String_String_String_ took 0.047 sec
Testcase: testConstructor_DefaultProjectPilot_PhaseManager_String_String_Log_ took 0.031 sec
Testcase: testDoAudit_Phase_boolean_String_PhaseEnded_NonNullType took 0.047 sec
Testcase: testDoAudit_Phase_boolean_String_PhaseNotEnded_NonNullType took 0.016 sec
Testcase: testDoAudit_Phase_boolean_String_PhaseEnded_NullType took 0.047 sec
Testcase: testDoAudit_Phase_boolean_String_PhaseNotEnded_NullType took 0.015 sec
Testcase: testDoPhaseOperation_Phase_Operator_NoChange took 0.016 sec
Testcase: testDoPhaseOperation_Phase_Operator_NoChange_NullStatus took 0.047 sec
Testcase: testDoPhaseOperation_Phase_Operator_PhaseEnded took 0.015 sec
Testcase: testDoPhaseOperation_Phase_Operator_PhaseNotEnded took 0.032 sec
Testcase: testDoPhaseOperation_Phase_Operator_PhaseStarted took 0.031 sec
Testcase: testDoPhaseOperation_Phase_Operator_PhaseNotStarted took 0.031 sec
Testcase: testProcessPhase_Phase_Set_String_NullPhase took 0.016 sec
Testcase: testProcessPhase_Phase_Set_String_PhaseAlreadyProcessed took 0.047 sec
Testcase: testProcessPhase_Phase_Set_String_PhaseEnded took 0.015 sec
Testcase: testProcessPhase_Phase_Set_String_PhaseNotEnded took 0.016 sec
Testcase: testProcessPhase_Phase_Set_String_PhaseStarted took 0.031 sec
Testcase: testProcessPhase_Phase_Set_String_PhaseNotStarted took 0.016 sec
Testcase: testProcessPhase_Phase_Set_String_PhaseAlreadyProcessed_WithDependencies took 0.016 sec
Testcase: testProcessPhase_Phase_Set_String_PhaseEnded_WithDependencies took 0.047 sec
Testcase: testProcessPhase_Phase_Set_String_PhaseNotEnded_WithDependencies took 0.015 sec
Testcase: testProcessPhase_Phase_Set_String_PhaseStarted_WithDependencies took 0.016 sec
Testcase: testProcessPhase_Phase_Set_String_PhaseNotStarted_WithDependencies took 0.047 sec
Testcase: testConstructor_long_int_int took 0 sec
Testcase: testAggregate_AutoPilotResult took 0 sec
Testcase: testConstructor_AutoPilot took 0.016 sec
Testcase: testConstructor_AutoPilot_String_String_String_ took 0.015 sec
Testcase: testConstructor_AutoPilot_AutoPilotSource_ProjectPilot_ took 0.047 sec
Testcase: testAdvanceProjects_String_ProjectsAdvanced took 0.016 sec
Testcase: testAdvanceProjects_String_ProjectsNotAdvanced took 0.015 sec
Testcase: testAdvanceProjects_longArray_String_ProjectsAdvanced took 0.047 sec
Testcase: testAdvanceProjects_longArray_String_ProjectsNotAdvanced took 0.016 sec
Testcase: testConstructor_AutoPilotJob took 0.015 sec
Testcase: testConstructor_AutoPilotJob_String_String took 0.047 sec
Testcase: testConstructor_AutoPilotJob_AutoPilot_String took 0.016 sec
Testcase: testCreateJob_String_int took 0.016 sec
Testcase: testConstructor1NoConfig took 0 sec
Testcase: testConstructor2Null1 took 0 sec
Testcase: testConstructor2Null2 took 0 sec
Testcase: testConstructor2Null3 took 0 sec
Testcase: testConstructor2Null4 took 0 sec
Testcase: testConstructor2Null5 took 0 sec
Testcase: testConstructor2EmptyString1 took 0 sec
Testcase: testConstructor2EmptyString2 took 0 sec
Testcase: testConstructor2EmptyString3 took 0 sec
Testcase: testConstructor2EmptyString4 took 0 sec
Testcase: testConstructor2EmptyString5 took 0 sec
Testcase: testConstructor2EmptyString6 took 0 sec
Testcase: testConstructor2EmptyString7 took 0 sec
Testcase: testConstructor2EmptyString8 took 0 sec
Testcase: testConstructor2EmptyString9 took 0 sec
Testcase: testConstructor2EmptyString10 took 0 sec
Testcase: testConstructor2ConfigNoNamespace took 0 sec
Testcase: testConstructor2ConfigNoProjectManagerKey took 0.078 sec
Testcase: testConstructor2ConfigLoop took 0.078 sec
Testcase: testConstructor2ConfigWrongType took 0.062 sec
Testcase: testConstructor3Null1 took 0 sec
Testcase: testConstructor3Null2 took 0 sec
Testcase: testConstructor3Null3 took 0 sec
Testcase: testConstructor3Null4 took 0 sec
Testcase: testConstructor3EmptyString1 took 0 sec
Testcase: testConstructor3EmptyString2 took 0 sec
Testcase: testConstructor3EmptyString3 took 0 sec
Testcase: testConstructor3EmptyString4 took 0 sec
Testcase: testConstructor3EmptyString5 took 0 sec
Testcase: testConstructor3EmptyString6 took 0 sec
Testcase: testGetProjectIdsFailure took 0.078 sec
Testcase: testConstructor1NoConfig took 0 sec
Testcase: testConstructor2Null1 took 0 sec
Testcase: testConstructor2Null2 took 0 sec
Testcase: testConstructor2Null3 took 0 sec
Testcase: testConstructor2Null4 took 0 sec
Testcase: testConstructor2Null5 took 0 sec
Testcase: testConstructor2EmptyString1 took 0 sec
Testcase: testConstructor2EmptyString2 took 0 sec
Testcase: testConstructor2EmptyString3 took 0 sec
Testcase: testConstructor2EmptyString4 took 0 sec
Testcase: testConstructor2EmptyString5 took 0 sec
Testcase: testConstructor2EmptyString6 took 0 sec
Testcase: testConstructor2EmptyString7 took 0 sec
Testcase: testConstructor2EmptyString8 took 0 sec
Testcase: testConstructor2EmptyString9 took 0 sec
Testcase: testConstructor2EmptyString10 took 0 sec
Testcase: testConstructor2ConfigNoNamespace took 0 sec
Testcase: testConstructor2ConfigNoProjectManagerKey took 0.094 sec
Testcase: testConstructor2ConfigLoop took 0.078 sec
Testcase: testConstructor2ConfigWrongType took 0.063 sec
Testcase: testConstructor3Null1 took 0 sec
Testcase: testConstructor3Null2 took 0 sec
Testcase: testConstructor3Null3 took 0 sec
Testcase: testConstructor3Null4 took 0 sec
Testcase: testConstructor3EmptyString1 took 0 sec
Testcase: testConstructor3EmptyString2 took 0 sec
Testcase: testConstructor3EmptyString3 took 0 sec
Testcase: testConstructor3EmptyString4 took 0 sec
Testcase: testConstructor1ConfigNoLogger took 0.109 sec
Testcase: testConstructor2ConfigNoLogger took 0.078 sec
Testcase: testAdvancePhasesNull took 0.078 sec
Testcase: testAdvancePhasesEmptyString1 took 0.079 sec
Testcase: testAdvancePhasesEmptyString2 took 0.078 sec
Testcase: testAdvancePhasesGetPhasesException took 0.062 sec
Testcase: testProcessPhaseCanEndException took 0.078 sec
Testcase: testProcessPhaseEndException took 0.078 sec
Testcase: testProcessPhaseCanStartException took 0.079 sec
Testcase: testProcessPhaseStartException took 0.093 sec
Testcase: testDoPhaseOperationCanEndException took 0.078 sec
Testcase: testDoPhaseOperationEndException took 0.079 sec
Testcase: testDoPhaseOperationCanStartException took 0.078 sec
Testcase: testDoPhaseOperationStartException took 0.078 sec
Testcase: testAggregateDifferentProjectId took 0 sec
Testcase: testConstructorNegativeEndedCount took 0 sec
Testcase: testConstructorNegativeStartedCount took 0 sec
Testcase: testAggregateNull took 0 sec
Testcase: testAdvanceProjectNull took 0.078 sec
Testcase: testConstructor1NoConfig took 0.078 sec
Testcase: testConstructor2Null1 took 0.078 sec
Testcase: testConstructor2Null2 took 0.078 sec
Testcase: testConstructor2Null3 took 0.094 sec
Testcase: testConstructor2EmptyString1 took 0.094 sec
Testcase: testConstructor2EmptyString2 took 0.078 sec
Testcase: testConstructor2EmptyString3 took 0.078 sec
Testcase: testConstructor2EmptyString4 took 0.141 sec
Testcase: testConstructor2EmptyString5 took 0.093 sec
Testcase: testConstructor2EmptyString6 took 0.094 sec
Testcase: testConstructor2ConfigNoNamespace took 0.063 sec
Testcase: testConstructor2ConfigLoop took 0.078 sec
Testcase: testConstructor2ConfigWrongType took 0.078 sec
Testcase: testConstructor3Null1 took 0.062 sec
Testcase: testConstructor3Null2 took 0.079 sec
Testcase: testConstructor2ConfigNoAutoPilotSource took 0.125 sec
Testcase: testConstructor2ConfigNoProjectPilot took 0.093 sec
Testcase: testAdvanceProjects1Null took 0.078 sec
Testcase: testAdvanceProjects1EmptyString1 took 0.079 sec
Testcase: testAdvanceProjects1EmptyString2 took 0.109 sec
Testcase: testAdvanceProjects1AutoPilotSourceFail took 0.078 sec
Testcase: testAdvanceProjects1ProjectPilotFail took 0.109 sec
Testcase: testAdvanceProjects2Null1 took 0.079 sec
Testcase: testAdvanceProjects2Null2 took 0.093 sec
Testcase: testAdvanceProjects2EmptyString1 took 0.078 sec
Testcase: testAdvanceProjects2EmptyString2 took 0.094 sec
Testcase: testAdvanceProjects2ProjectPilotFail took 0.078 sec
Testcase: testAdvanceProjectEmptyString1 took 0.078 sec
Testcase: testAdvanceProjectEmptyString2 took 0.079 sec
Testcase: testAdvanceProjectProjectPilotFail took 0.062 sec
Testcase: testConstructor1NoConfig took 0.078 sec
Testcase: testConstructor2Null1 took 0.078 sec
Testcase: testConstructor2Null2 took 0.078 sec
Testcase: testConstructor2EmptyString1 took 0.079 sec
Testcase: testConstructor2EmptyString2 took 0.062 sec
Testcase: testConstructor2EmptyString3 took 0.078 sec
Testcase: testConstructor2EmptyString4 took 0.078 sec
Testcase: testConstructor2ConfigNoNamespace took 0.078 sec
Testcase: testConstructor2ConfigLoop took 0.079 sec
Testcase: testConstructor2ConfigWrongType took 0.062 sec
Testcase: testConstructor3Null1 took 0.078 sec
Testcase: testConstructor3Null2 took 0.078 sec
Testcase: testConstructor3EmptyString1 took 0.063 sec
Testcase: testConstructor3EmptyString2 took 0.109 sec
Testcase: testConstructor2ConfigNoAutoPilot took 0.078 sec
Testcase: testCreateJobNull took 0.078 sec
Testcase: testCreateJobEmptyString1 took 0.079 sec
Testcase: testCreateJobEmptyString2 took 0.078 sec
Testcase: testCreateJobNegativeInterval took 0.063 sec
Testcase: testCreateJobZeroInterval took 0.078 sec
Testcase: testScheduleNull1 took 0.078 sec
Testcase: testScheduleNull2 took 0.094 sec
Testcase: testScheduleEmptyString1 took 0.078 sec
Testcase: testScheduleEmptyString2 took 0.078 sec
Testcase: testScheduleEmptyString3 took 0.109 sec
Testcase: testScheduleEmptyString4 took 0.079 sec
Testcase: testScheduleNegativeInterval took 0.078 sec
Testcase: testScheduleZeroInterval took 0.078 sec
Testcase: testScheduleBadNamespace took 0.078 sec
Testcase: testMainNull took 0.078 sec
Testcase: testMainPollValidationFailure took 0.094 sec
Testcase: testMainPollTooManyValues took 0.078 sec
Testcase: testMainPollNegativeValue took 0.078 sec
Testcase: testMainProjectValidationFailure took 0.094 sec
Testcase: testMainConfigTooManyValues took 0.078 sec
Testcase: testMainNamespaceTooManyValues took 0.078 sec
Testcase: testMainAutopilotTooManyValues took 0.063 sec
Testcase: testMainJobnameTooManyValues took 0.078 sec
Testcase: testMainConfigFileNotExist took 0.078 sec
Testcase: testMainPollAndProject took 0.078 sec
Testcase: testMainNoPollAndProject took 0.078 sec
Testcase: testMainWithNamespaceNoAutoPilotProjectMode took 0.094 sec
Testcase: testMainWithAutoPilotNoNamespace took 0.094 sec
Testcase: testRun1AutoPilotSourceFail took 0.062 sec
Testcase: testRun1ProjectPilotFail took 0.094 sec
Testcase: testRun2Null took 0.078 sec
Testcase: testRun2ProjectPilotFail took 0.062 sec
Testcase: testAdvanceProjectsString took 2.11 sec
Testcase: testAdvanceProjectsLongArrayString took 1.687 sec
Testcase: testAdvanceProject took 0.297 sec
Testcase: testRun took 1.781 sec
Testcase: testSchedule took 1.829 sec
