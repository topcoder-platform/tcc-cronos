{\rtf1\ansi\ansicpg1252\deff0{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial;}{\f1\froman\fprq2\fcharset0 Times New Roman;}{\f2\fnil\fcharset2 Wingdings;}{\f3\froman\fprq2\fcharset128 Times New Roman;}{\f4\fmodern\fprq6\fcharset134 \'cb\'ce\'cc\'e5;}{\f5\fmodern\fprq1\fcharset0 Courier New;}{\f6\fnil Courier New;}{\f7\fnil\fcharset0 Courier New;}{\f8\fmodern\fprq1\fcharset128 Courier New;}}
{\colortbl ;\red255\green0\blue0;\red0\green0\blue0;\red0\green128\blue128;\red63\green127\blue127;\red127\green0\blue127;\red42\green0\blue255;\red63\green95\blue191;\red0\green0\blue255;\red0\green0\blue128;\red63\green127\blue95;\red127\green0\blue85;\red0\green0\blue192;\red212\green212\blue212;}
{\*\generator Msftedit 5.41.15.1507;}\viewkind4\uc1\pard\keepn\sb120\sa60\sl240\slmult0\tx720\lang1033\ul\b\f0\fs28 Prerequisite Service 1.0 Component Specification\par
\pard\li720\sa120\ulnone\b0\fs20\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx360\b\fs24 1.\tab Design\par
\pard\li710\b0\f1 This component which allows to user get prerequisite documents which should be signed for a specific role; get concrete prerequisite document; get all prerequisite documents; record answer for document. It defines web service interface and provides its EJB endpoint implementation. Component uses TopCoder Prerequisite Document Manager for providing all operations with persistence. It should not access to persistence by itself.\par
The design provides the interface depicted and the EJB implementation. To create the interface, firstly I updated the WSDL with the changes discussed in forum and other necessary changes. Then I generated the interface and all related classes and exception using \i wsconsume\i0  tool of Jboss, to make the interface consistent with WSDL. Note that with JAX-WS and Jboss and WSDL is not necessary anymore because the WSDL will be generated by the endpoint interface.\f0\par
\f1 At this point I refactorized the classes changing the names (with the same value in the annotations) and other changes: these changes are permitted and don't delete the functionality of the classes.\par
The component strongly uses the annotations in all levels: methods and classes. The classes with \ldblquote Request\rdblquote  and \ldblquote Response\rdblquote  suffixes represent the request and response of web services. The exceptions use the fault bean to make the exceptions available to the client side. The identity of the PrerequisiteServiceBean is set using the annotations.\par
\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx0\b\f0\fs20 1.1\tab Design Patterns \par
\b0\i 1.1.1\tab Strategy\par
\pard\li720\i0\f1\fs24 PrerequisiteServiceBean uses strategically the DocumentManager implementation.\par
\f0\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx0\b\fs20 1.2\tab Industry Standards \par
\pard\fi-360\li1440\b0\f2\fs24\'b7\f1\tab EJB (specifically, to ensure this component is compatible with EJB restrictions, as defined in\cf1  \cf0 http://java.sun.com/blueprints/qanda/ejb_tier/restrictions.html).\f0\par
\pard\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx0\b\fs20 1.3\tab Required Algorithms\par
\b0\i\fs24 1.3.1\tab\fs20 Logging\i0\fs24\par
\pard\li720\f1 Almost all methods in PrerequisiteServiceBean (init included and except the getters)  should be logged in the following manner:\par
\pard\fi-360\li1440\f2\'b7\f0\tab\f1 Method entrance and exit at INFO level. \f0\par
\f2\'b7\f0\tab\f1 All exceptions and errors at ERROR level. This includes illegal arguments.\f0\par
\f2\'b7\f0\tab\f1 Any additional logging is at the developer\rquote s discretion.\f0\par
\pard\li720\par
\f1 The logging is optional, therefore if the logName is null then don't provide the logging.\par
\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx0\i\f0\fs20 1.3.2\tab Exception creation in the PrerequisiteServiceBean\par
\pard\li765\i0\f1\fs24 The exceptions in the PrerequisiteServiceBean are constructed using the constructors with the fault beans (the classes with \ldblquote fault\rdblquote  suffix). Firstly create the fault bean using factory , then set the necessary information to the fault bean. At this point construct the exception with the fault bean.\par
This mechanism is necessary to create correctly the SOAP fault message.\par
\pard\li720\cf1 The fault beans should implement Serializable because they are possiblly serialized as java objects by EJB invoke, they are also serialized in the SOAP environment\cf0 .\par
\f3\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx0\i\f0\fs20 1.3.3\tab Check the role and get the member id\par
\pard\li710\i0\f1\fs24 The role checking of the user is made in almost all methods. This is the algorithm:\par
\lang2052\f4\'a1\'f1\lang1033\f1\fs18\tab\fs24 get the Principal from SessionContext and cat to UserProfilePrincipal\f0\par
\lang2052\f4\'a1\'f1\lang1033\f1\fs18\tab\fs24 get the Profile map from UserProfilePrincipal\f0\par
\lang2052\f4\'a1\'f1\lang1033\f1\fs18\tab\fs24 the keys are the role ids and the values are the role names\f0\par
\lang2052\f4\'a1\'f1\lang1033\f1\fs18\tab\fs24 check if the role id is in the attributes (the keys are Long instances): if it is not present the throw the related exception\f0\par
\lang2052\f4\'a1\'f1\lang1033\f1\fs18\tab\fs24 The member id is retrieved from UserProfilePrincipal using the related method to get the user id.\f0\par
\pard\fi-360\li720\f3\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx0\i\f0\fs20 1.3.4\tab Arguments checking in the beans\par
\pard\li765\i0\f1\fs24 The arguments checking in all bean classes is not performed, it is performed only in the PrerequisiteServiceBean.  In this mode the user can set all the possible values in the beans. The request and response classes are not used directly from this component, they are used automatically by the container.\par
\f3\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx0\b\f0\fs20 1.4\tab Component Class Overview\par
\b0\i 1.4.1\tab com.topcoder.service.prerequisite\par
\pard\li720\i0\f1\fs24 This package holds all the main interfaces and classes in this component. \par
\f0\par
\b\f1 PrerequisiteService\par
\b0 The pre-requisite service provides the ability to retrieve required prerequisite\par
documents, and to record a users response to the prerequisite. This interface defines the web services endpoint with the operation. It uses the annotations to defined the requests and responses definitions.\par
\f0\par
\b\f1 PrerequisiteDocument\par
\b0 It represents the PrerequisiteDocument entity (bean) used by the service. It contains the information of a prerequisite document. The information can be null or can be empty, therefore this check is not present in the setters. It is similar and related to DocumentVersion if prerequisite manager.\par
\f0\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx0\i\fs20 1.4.2\tab  com.topcoder.service.prerequisite.ejb\par
\pard\li720\i0\fs24\par
\b\f1 PrerequisiteServiceBean\par
\b0\par
This is the EJB implementation of the PrerequisiteService interface web service\par
endpoint. It uses an instance of DocumentManager (injected as EJB) to perform the logic of the methods. The web services annotations are presents in the endpoint interface, this bean contains only the annotation to connect the endpoint interface and this implementation. The security is provided programmatically and also with annotations.\par
The exceptions are constructed using the fault bean because the fault message can be consumed as SOAP message, this is necessary because it's a web services. This\par
implementations is designed to be used by the related interface and also by a different web services client: all the response, request and exceptions are automatically transformed to SOAP element.\par
\f0\par
\b\f1 PrerequisiteElementsFactory\par
\b0 This object contains factory methods for each Java content interface and Java element interface generated in the com.topcoder.service.prerequisite.ejb package.  It is used by the PrerequisiteServiceBean to construct the soap elements.\par
A PrerequisiteElementsFactory allows you to programmatically construct new instances of the Java representation for XML content. The Java representation of XML content can consist of schema derived interfaces and classes representing the binding of schema type definitions, element declarations and model groups. Factory methods for each of these are provided in this class.\par
\f0\par
\b\f1 PersistenceFault\par
\b0 This class represents the "persistence_fault" element in WSDL. It's contained in the related exception-message class. \par
\par
\b DocumentNotFoundFault\par
\b0 This class represents the "document_not_found_fault" element in WSDL. It's contained in the related exception-message class. It is not used directly, it is used by the container.\par
\par
\b IllegalArgumentWSFault\par
\b0 This class represents the "illegal_argument_fault" element in WSDL. It's contained in the related with illegal argument message class. \par
\par
\b CompetitionNotFoundFault\par
\b0 This class represents the "competition_not_found_fault" element in WSDL. It's contained in the related exception-message class, it's the fault bean. \par
\par
\b RoleNotFoundFault\par
\b0 This class represents the "role_not_found_fault" element in WSDL. It's contained in the related exception-message class, it's the fault bean. \par
\par
\b UserNotAuthorizedFault\par
\b0 This class represents the "user_not_authorized_fault" element in WSDL. It's contained in the related exception-message class. \par
\par
\b UserAlreadyAnsweredDocumentFault\par
\b0 This class represents the "user_already_answered_document_fault" element in WSDL. It's contained in the related exception-message class, it's the fault bean. \par
\par
\b RecordMemberAnswerRequest\par
\b0 This class represents the "recordMemberAnswer" element in WSDL. It is used by the web services request to handle the arguments of the related method. \par
\par
\b GetAllPrerequisiteDocumentsRequest\par
\b0 This class represents the "getAllPrerequisiteDocuments" element in WSDL. It is used by the web services request. It has not attributes since the method has no arguments. \par
\par
\b GetAllPrerequisiteDocumentsResponse\par
\b0 This class represents the "getAllPrerequisiteDocumentsResponse" element in WSDL. It is used to wrap the response of the web services and it contains the result of getAllPrerequisiteDocuments operation. \par
\par
\b GetPrerequisiteDocumentRequest\par
\b0 This class represents the "getPrerequisiteDocument" element in WSDL. It is used by the web services request to handle the arguments of the related method. \par
\par
\b GetPrerequisiteDocumentResponse\par
\b0 This class represents the "getPrerequisiteDocumentResponse" element in WSDL. It is used to wrap the response of the web services and it contains the result of\par
getPrerequisiteDocument operation. \par
\par
\b GetPrerequisiteDocumentsRequest\par
\b0 This class represents the "getPrerequisiteDocuments" element in WSDL. It is used by the web services request of the related operation.. \par
\par
\b GetPrerequisiteDocumentsResponse\par
\b0 This class represents the "getPrerequisiteDocumentsResponse" element in WSDL. It is used to wrap the response of the web services and it contains the result of\par
getPrerequisiteDocuments operation. \par
\par
\b RecordMemberAnswerResponse\par
\b0 This class represents the "recordMemberAnswerResponse" element in WSDL. It is used to wrap the response of the web services and it contains the result of\par
getAllPrerequisiteDocuments operation. It dosn't contain attributes because the related operation in the service is void.\par
\par
\b package\b0 -info\f0\par
\f1 Annotations that can be applied to the package element are referred to as package-level annotations. An annotation with ElementType.PACKAGE as one of its targets is a package-level annotation. Package-level annotations are placed in a package-info.java file. This file should contain only the package statement, preceded by annotations. When the compiler encounters package-info.java file, it will create a synthetic interface, package-name.package-info. The interface is called synthetic because it is introduced by the compiler and does not have a corresponding construct in the source code.\par
This file is not a class, it contains only:\par
@javax.xml.bind.annotation.XmlSchema(namespace="http://www.example.org/PrerequisiteService/")\par
package com.topcoder.service.prerequisite.ejb;\par
It is uses to define the XMLSchema of the elements of this package.\par
\f0\par
\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx0\b\fs20 1.5\tab Component Exception Definitions\par
\pard\li720\b0\fs24\par
\b\f1 PrerequisiteServiceException\par
\b0 This exception extends the BaseCriticalException. This class should be the parent\par
exception of (almost) all exceptions thrown by PrerequisiteService..\par
\par
\b PersistenceException\par
\b0 This exception is thrown automatically by the web service interface when an error\par
occurs in the persistence layer. It wraps the generic persistence exceptions (not\par
specific thrown by the interface of this component) thrown by the DocumentManagerBean used in the ejb implementation. It is related with "persistence_faultMsg" fault in WSDL, but it contains only annotations about "persistence_fault" because the messages are automatically constructed. \par
\b\par
UserAlreadyAnsweredDocumentException\par
\b0 This exception is thrown automatically by the web service interface when the user has already answered to the document.. It is related  with "user_already_answered_document_faultMsg" fault in WSDL, but it contains only annotations about "user_already_answered_document_fault" because the messages are automatically constructed. \par
\b\par
RoleNotFoundException \par
\b0 This exception is thrown automatically by the web service interface when a role is\par
not found. It is related with "role_not_found_faultMsg" fault in WSDL.  \par
\par
\b CompetitionNotFoundException\par
\b0 This exception is thrown automatically by the web service interface when a competition is not found. It is related with "competition_not_found_faultMsg" fault in WSDL, but it contains only annotations about  "competition_not_found_fault" because the messages are automatically constructed. \par
\par
\b UserNotAuthorizedException\par
\b0 This exception is thrown automatically by the web service interface when the user is not authorized to perform the operation. It is related  with "user_not_authorized_faultMsg" fault in WSDL, but it contains only annotations about "user_not_authorized_fault" because the messages are automatically constructed.\par
\par
\b IllegalArgumentWSException\par
\b0 This exception is thrown automatically by the web service interface when the arguments are illegal. It is related with "illegal_argument_faultMsg" fault in WSDL, but it contains only annotations about "illegal_argument_fault" because the messages are automatically constructed. this exception is necessary because it contains the information of the illegal arguments in SOAP mode. The web service can be called also from other types of clients, different from java. It's necessary to store the information using the fault beans like other exception. WS is WebServices.\par
\par
\b DocumentNotFoundException\par
\b0 This exception is thrown automatically by the web service interface when a document is not found. It is related with "document_not_found_faultMsg" fault in WSDL, but it contains only annotations about "document_not_found_fault" because the messages are automatically constructed. \par
\f0\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx0\b\fs20 1.6\tab Thread Safety\par
\pard\li720\b0\f1\fs24 The thread safety is an important aspect since this component is a set web services. The Java beans are not thread safe, but it's not required that they would be thread safe because they are used within a single thread. The PrerequisiteServiceBean is thread safe because it uses an instance of DocumentManager and the implementations of this interface are required to be thread safe: the existent implementation of this interface is thread safe because it uses the transaction mechanism.\par
Therefore the component is completely thread safe.\par
\f0\par
\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx360\b 2.\tab Environment Requirements\tab\tab\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx0\fs20 2.1\tab Environment\par
\pard\fi-360\li1080\b0\f2\fs24\'b7\f0\tab\f1 Development language: Java 1.5\f0\par
\f2\'b7\f0\tab\f1 Compile target: Java 1.5\f0\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx0\b\fs20 2.2\tab TopCoder Software Components\par
\pard\fi-360\li1080\sa120\b0\f1\fs24\'b7\tab Base Exception 2.0\par
\pard\fi-360\li1800\sa120 o\tab Topcoder standard for all custom exceptions.\par
\pard\fi-360\li1080\sa120\'b7\tab Logging Wrapper 2.0\par
\pard\fi-360\li1800\sa120 o\tab Used for logging the operations.\par
\pard\fi-360\li1080\sa120\'b7\tab Prerequisite Document Manager 1.0 \par
\pard\fi-360\li1800\sa120 o\tab is used in the PrerequisiteServiceBean to delegate the work to persistence layer\par
\pard\fi-360\li1080\sa120\'b7\tab\lang1023 User Group Manager 1.0.1 \lang1033\f0\par
\pard\fi-360\li1800\sa120\f1 o\tab\lang1023 defines the Profile interfaces used by this design.\lang1033\f0\par
\pard\fi-360\li1080\sa120\f1\'b7\tab JBoss Login Module 2.0\par
\pard\fi-360\li1800\sa120 o\tab defines the UIserProfilePrincipal class used in this design\par
\pard\sa120\f0\fs20\par
\pard\li720\i\f1\fs24 NOTE: The default location for TopCoder Software component jars is../lib/tcs/COMPONENT_NAME/COMPONENT_VERSION relative to the component installation.\cf2   Setting the tcs_libdir property in topcoder_global.properties will overwrite this default location.\cf0\i0\f0\par
\pard\li720\sa120\fs20\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx0\b 2.3\tab Third Party Components\tab\par
\pard\fi-360\li1440\lang2052\b0\f4\fs24\'a1\'f1\lang1033\f1\tab J2EE 5, EJB 3.0 and JAX-WS\f0\par
\lang2052\f4\'a1\'f1\lang1033\f1\tab JBoss: wsconsume tool was used to generated the classes, but it is not directly used by this component, it will be used for deployment\f0\par
\f3\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx360\b\f0 3.\tab Installation and Configuration\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx0\fs20 3.1\tab Package Names\par
\pard\keepn\li720\sb120\sa60\sl240\slmult0\tx720\b0\f1\fs24 com.topcoder.service.prerequisite\par
com.topcoder.service.prerequisite.ejb\par
\pard\li720\f3\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx0\b\f0\fs20 3.2\tab Configuration Parameters\par
\b0\i 3.2.1\tab  PrerequisiteServiceBean\par
\pard\li720\i0\f1\fs24 These parameters must be set in the configuration of the EJB (see the demo):\par
\f0\par
\trowd\trgaph10\trleft-168\trpaddl10\trpaddr10\trpaddfl3\trpaddfr3
\clbrdrl\brdrw1\brdrs\brdrcf2\clbrdrt\brdrw1\brdrs\brdrcf2\clbrdrb\brdrw1\brdrs\brdrcf2 \cellx1969\clbrdrl\brdrw1\brdrs\brdrcf2\clbrdrt\brdrw1\brdrs\brdrcf2\clbrdrb\brdrw1\brdrs\brdrcf2 \cellx5372\clbrdrl\brdrw1\brdrs\brdrcf2\clbrdrt\brdrw1\brdrs\brdrcf2\clbrdrr\brdrw1\brdrs\brdrcf2\clbrdrb\brdrw1\brdrs\brdrcf2 \cellx8630\pard\intbl\cf2\b\f1 Parameter\cell Description\cell Details\cell\row\trowd\trgaph10\trleft-168\trpaddl10\trpaddr10\trpaddfl3\trpaddfr3
\clbrdrl\brdrw1\brdrs\brdrcf2 \cellx1969\clbrdrl\brdrw1\brdrs\brdrcf2 \cellx5372\clbrdrl\brdrw1\brdrs\brdrcf2\clbrdrr\brdrw1\brdrs\brdrcf2 \cellx8630\pard\intbl\sa120\cf0\b0\f0\fs20 logName\cell Name of the log used to retrieve the Log with LogManager\par
Optional, the logging is optional\cell A valid log name, not null, not empty\par
\cell\row\trowd\trgaph10\trleft-168\trpaddl10\trpaddr10\trpaddfl3\trpaddfr3
\clbrdrl\brdrw1\brdrs\brdrcf2\clbrdrb\brdrw1\brdrs\brdrcf2 \cellx1969\clbrdrl\brdrw1\brdrs\brdrcf2\clbrdrb\brdrw1\brdrs\brdrcf2 \cellx5372\clbrdrl\brdrw1\brdrs\brdrcf2\clbrdrr\brdrw1\brdrs\brdrcf2\clbrdrb\brdrw1\brdrs\brdrcf2 \cellx8630\pard\intbl\cf1 documentManager\cell ejb-ref/ejb-local-ref definition, it is for retrieve the local or remote interface of document manager.\cell a valid definition of ejb-ref or ejb-local-ref entry.\cell\row\pard\cf0\fs24\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx0\b\fs20 3.3\tab Dependencies Configuration\par
\b0\i 3.3.1\tab TopCoder dependencies\par
\pard\li765\i0\f1\fs24 All the dependencies are to be configured according to their component specifications.\par
\pard\li720\f0\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx360\b 4.\tab Usage Notes\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx0\fs20 4.1\tab Required steps to test the component\par
\pard\fi-360\li1080\sa120\b0\f2\fs24\'b7\f0\tab\fs20 Extract the component distribution.\fs24\par
\f2\'b7\f0\tab\fs20 Follow the instructions.\par
Setup\par
------------------------------------------------------\par
Database\par
\par
1. install Informix and make sure the database is started.\par
2. create a database named 'document' in Informix.\par
3. use 'dbaccess project <path>/test_files/create.sql' to create database. it will create tables and sequences. Note, you can use 'dbaccess project <path>/test_files/drop.sql' to drop tables and sequences.\par
4. change the ip address and port in test_files/informix-ds.xml and test_files/InformixDBConnectionFactory.xml.\par
\par
Build the prerequsite document manager ejb module.\par
\par
1. go to directory test_files/Prerequisite_Document_Manager_1.0_dev_dist.\par
2. run 'ant package.ejb', the ejb module will be present at test_files\\Prerequisite_Document_Manager_1.0_dev_dist\\build\\dist\\application\\ejb\par
3. actually, you don't need to do this step, a already built version is put in lib directory.\par
\par
JBoss\par
\par
1. Download and install JBoss 4.2.2.\par
2. copy test_files\\lib\\ to <jboss-home>\\server\\default\\lib\par
3. modify <jboss-home\\server\\default\\conf\\login-config.xml, adding\par
\par
   <application-policy name="JBossLoginModule">\par
\tab     <authentication>\par
\tab       <login-module code="com.topcoder.security.auth.module.JBossLoginModule"\par
\tab         flag="required">\par
\tab         <module-option name="fileName">C:/demoConfigs.properties</module-option>\par
\tab         <module-option name="password-stacking">useFirstPass</module-option>\par
\tab       </login-module>\par
\tab     </authentication>\par
  </application-policy>\par
  \par
  \par
  Notes, fileName property should be point to test_files/demoConfigs.properties file.\par
\par
4. change demoConfigs.properties, using the correct path for JBossLoginModule.xml.\par
\par
Build.xml\par
\par
1. there are some settings need to be adjusted according to your environment.\par
like\par
1.1 "configuration for checkstyles"\par
1.2 "codertura task definitation"\par
1.3 <property name="jboss_home" value="D:/Servers/AppServers/jboss-4.2.2.GA" />\par
\par
\par
Now, all the setup is ready. Let's start.\par
\par
1. start Jboss 4.2.2\par
2. use 'ant deployEAR', to package ear file and deploy to jboss, a latest built is alredy saved as test_files/prerequisite_service.ear.\par
3. use 'ant test' to run the test cases.\par
4. 'ant undeployEAR' is used to delete the ear file in JBoss. and 'ant package.ejb' is used to package the ejb jar.\par
\fs24\par
\f2\'b7\f0\tab\fs20 Execute \lquote ant test\rquote  within the directory that the distribution was extracted to.\fs24\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx0\b\fs20 4.2\tab Required steps to use the component\par
4.2.1     please check the JBoss Login Module 1.0,  to configure the jboss's login-config.xml properly.\par
4.2.2     to use this component as a ejb module.\par
            \b0 First, configure the ejb (modify test_files\\ejb\\ejb-jar.xml and jboss.xml), then use 'ant package.ejb' to generate the jar module.\par
\b 4.2.3     to use this component as j2ee application.\par
            \b0 See 4.1.  use 'ant deployEAR', to package ear file and deploy to jboss, a latest built is alredy saved as test_files/prerequisite_service.ear.\f1\fs24\par
\b\f0\fs20 4.3\tab Demo\par
\b0\i 4.3.1\tab Setup\par
\pard\li720\i0\fs24\par
\f1 This is the ejb-jar.xml for the server side. It defines the EJBs in the container (it defines also the PrerequisiteServiceBean used by PrerequisiteServiceBean):\par
\f5\fs20\par
\pard\li710\cf3 <\cf4 ejb-jar \cf5 xmlns\cf2 =\cf6 "http://java.sun.com/xml/ns/javaee"\cf0\f0\fs24\par
\cf6\f5\fs20\tab\cf5 xmlns:xsi\cf2 =\cf6 "http://www.w3.org/2001/XMLSchema-instance"\cf0\f0\fs24\par
\cf6\f5\fs20\tab\cf5 xsi:schemaLocation\cf2 =\cf6 "http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/j2ee/ejb-jar_3_0.xsd"\cf0\f0\fs24\par
\cf6\f5\fs20\tab\cf5 version\cf2 =\cf6 "3.0"\cf3 >\cf0\f0\fs24\par
\f5\fs20\par
\cf2\tab\cf7 <!-- This is the EJB declaration. It's minimal because the component uses the annotations to declare\cf0\f0\fs24\par
\cf7\f5\fs20\tab\tab home and local interface -->\par
\cf2\tab\cf3 <\cf4 enterprise-beans\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab     \cf3 <\cf4 session\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab         \cf3 <\cf4 ejb-name\cf3 >\cf2 DocumentManagerBean\cf3 </\cf4 ejb-name\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab   \cf3 <\cf4 ejb-class\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20 com.topcoder.service.prerequisite.document.ejb.DocumentManagerBean\par
\tab\tab   \cf3 </\cf4 ejb-class\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab   \cf3 <\cf4 env-entry\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab       \cf3 <\cf4 env-entry-name\cf3 >\cf2 loggerName\cf3 </\cf4 env-entry-name\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab\tab\cf3 <\cf4 env-entry-type\cf3 >\cf2 java.lang.String\cf3 </\cf4 env-entry-type\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab\tab\cf3 <\cf4 env-entry-value\cf3 >\cf2 document_manager\cf3 </\cf4 env-entry-value\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab   \cf3 </\cf4 env-entry\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab   \cf3 <\cf4 env-entry\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab\tab\cf3 <\cf4 env-entry-name\cf3 >\cf2 persistenceUnitName\cf3 </\cf4 env-entry-name\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab\tab\cf3 <\cf4 env-entry-type\cf3 >\cf2 java.lang.String\cf3 </\cf4 env-entry-type\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab\tab\cf3 <\cf4 env-entry-value\cf3 >\cf2 document_manager\cf3 </\cf4 env-entry-value\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab   \cf3 </\cf4 env-entry\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab   \cf3 <\cf4 env-entry\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab  \tab\cf3 <\cf4 env-entry-name\cf3 >\cf2 allowedRoleNames\cf3 </\cf4 env-entry-name\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab\tab\cf3 <\cf4 env-entry-type\cf3 >\cf2 java.lang.String\cf3 </\cf4 env-entry-type\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab\tab\cf3 <\cf4 env-entry-value\cf3 >\cf2 admin,manager,Administrator\cf3 </\cf4 env-entry-value\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab   \cf3 </\cf4 env-entry\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab      \cf3 </\cf4 session\cf3 >\cf0\f0\fs24\par
\f5\fs20\par
\cf2\tab      \cf3 <\cf4 session\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab   \cf3 <\cf4 ejb-name\cf3 >\cf2 PrerequisiteServiceBean\cf3 </\cf4 ejb-name\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab   \cf3 <\cf4 ejb-class\cf3 >\cf2 com.topcoder.service.prerequisite.ejb.PrerequisiteServiceBean\cf3 </\cf4 ejb-class\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab   \cf3 <\cf4 env-entry\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab       \cf3 <\cf4 env-entry-name\cf3 >\cf2 loggerName\cf3 </\cf4 env-entry-name\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab\tab\cf3 <\cf4 env-entry-type\cf3 >\cf2 java.lang.String\cf3 </\cf4 env-entry-type\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab\tab\cf3 <\cf4 env-entry-value\cf3 >\cf2 prerequisite_log\cf3 </\cf4 env-entry-value\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\tab   \cf3 </\cf4 env-entry\cf3 >\par
        <!-- following configuration does not works, jboss.xml is used instead.-->\par
        \cf7\f6 <!--\cf0\par
\cf7       \f7   \f6 <ejb-ref>\cf0\par
\cf7        \f7    \f6 <ejb-ref-name>documentManager</ejb-ref-name>\cf0\par
\cf7        \f7    \f6 <ejb-ref-type>Session</ejb-ref-type>\cf0\par
\cf7        \f7    \f6 <ejb-link>prerequisite_document_manager.jar#DocumentManagerBean</ejb-link>\cf0\par
\cf7       \f7   \f6 </ejb-ref>\cf0\par
\cf7       \f7   \f6 -->\cf0\f0\fs24\par
\cf2\f5\fs20\tab      \cf3 </\cf4 session\cf3 >\cf0\f0\fs24\par
\cf2\f5\fs20\tab\cf3 </\cf4 enterprise-beans\cf3 >\cf0\f0\fs24\par
\cf3\f5\fs20 </\cf4 ejb-jar\cf3 >\cf0\f0\fs24\par
\f8\fs20\par
\f5 jboss.xml:\par
\cf3\f6 <?\cf4 xml \cf5 version\cf2 =\cf6 "1.0"\cf3 ?>\cf0\par
\cf3 <\cf4 jboss\cf3 >\cf0\par
\cf2   \cf3 <\cf4 enterprise-beans\cf3 >\cf0\par
\cf2     \cf3 <\cf4 session\cf3 >\cf0\par
\cf2       \cf3 <\cf4 ejb-name\cf3 >\cf2 PrerequisiteServiceBean\cf3 </\cf4 ejb-name\cf3 >\cf0\par
\cf2       \cf3 <\cf4 jndi-name\cf3 >\cf2 remote/PrerequisiteService\cf3 </\cf4 jndi-name\cf3 >\cf0\par
\cf2       \cf3 <\cf4 ejb-ref\cf3 >\cf0\par
\cf2        \cf3 <\cf4 ejb-ref-name\cf3 >\cf2 documentManager\cf3 </\cf4 ejb-ref-name\cf3 >\cf0\par
\cf2        \cf3 <\cf4 jndi-name\cf3 >\cf2 remote/DocumentManager\cf3 </\cf4 jndi-name\cf3 >\cf0\par
\cf2       \cf3 </\cf4 ejb-ref\cf3 >\cf0\par
\cf2     \cf3 </\cf4 session\cf3 >\cf0\par
\cf2   \cf3 </\cf4 enterprise-beans\cf3 >\cf0\par
\par
\cf2   \cf3 <\cf4 security-domain\cf3 >\cf2 java:/jaas/JBossLoginModule\cf3 </\cf4 security-domain\cf3 >\cf0\par
\cf3 </\cf4 jboss\cf3 >\cf0\f8\par
\cf2\f1\fs24\par
\cf0 In the server side there is no need of other configuration: web service.xml and the JAX-RPC are not required because the annotations provide automatically these information.\par
About the deployment in JBoss, you can see here: \f0{\field{\*\fldinst{HYPERLINK "http://jbws.dyndns.org/mediawiki/index.php?title=Quick_Start" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\l "suming_web_services" }}{\fldrslt{\cf9\lang1040\ul\f1 http://jbws.dyndns.org/mediawiki/index.php?title=Quick_Start#Consuming_web_services}}}\cf0\lang1033\ulnone\f0\fs24\par
\f1\par
\f0\ldblquote Simply wrap up the service implementation class, the endpoint interface and any custom data types in a JAR and drop them in the deploy directory. No additional deployment descriptors required. Any meta data required for the deployment of the actual web service is taken from the annotations provided on the implementation class and the service endpoint interface. JBossWS will intercept that EJB3 deployment (the bean will also be there) and create an HTTP endpoint at deploy-time: \f3\rdblquote\f0\par
\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx0\i\fs20 4.3.2\tab   Usage\par
\pard\li720\i0\fs24\par
\pard\li710\cf10\f5\fs20\tab\cf2\f1\fs24 In this demo, before we show the initial data. \cf0\f0\par
\cf2\f1 We have:\par
\lang2052\f4\'a1\'f1\lang1033\f1\tab 2 document with document ids 10 and 20\cf0\f0\par
\cf2\lang2052\f4\'a1\'f1\lang1033\f1\tab 2 version of documents for each document : version 1 and 2, the content of version 2 of document 10 contains \f3\ldblquote\f1 final version of production\f3\rdblquote\cf0\f0\par
\cf2\lang2052\f4\'a1\'f1\lang1033\f1\tab 2 competition document for each document version: one competition document is associated with competition id =20 and role id of \f3\ldblquote\f1 designer\f3\rdblquote\cf0\f0\par
\cf2\f1\par
This is the demo:\par
\f5\fs20\par
\pard\f6         \cf10 // retrieve the web service\cf0\par
\cf2         \cf10 // we can successfully retrieve the instance, but we can not call any operations because of authentication\cf0\par
\cf2         \cf10 // problem.\cf0\par
\cf2         Service service = Service.\i create\i0 (\cf11\b new\cf2\b0  URL(\cf0\par
\cf2                 \cf6 "http://127.0.0.1:8080/prerequisite_service-prerequisite_service/PrerequisiteServiceBean?wsdl"\cf2 ),\cf0\par
\cf2                 \cf11\b new\cf2\b0  QName(\cf6 "http://ejb.prerequisite.service.topcoder.com/"\cf2 , \cf6 "PrerequisiteServiceBeanService"\cf2 ));\cf0\par
\cf2         \cf12 prerequisiteService\cf2  = service.getPort(PrerequisiteService.\cf11\b class\cf2\b0 );\cf0\par
\par
\cf2         Properties env = \cf11\b new\cf2\b0  Properties();\cf0\par
\cf2         env.setProperty(Context.\cf12\i SECURITY_PRINCIPAL\cf2\i0 , \cf6 "admin"\cf2 );\cf0\par
\cf2         env.setProperty(Context.\cf12\i SECURITY_CREDENTIALS\cf2\i0 , \cf6 "password"\cf2 );\cf0\par
\cf2         env.setProperty(Context.\cf12\i INITIAL_CONTEXT_FACTORY\cf2\i0 , \cf6 "org.jboss.security.jndi.JndiLoginInitialContextFactory"\cf2 );\cf0\par
\cf2         InitialContext initCtx = \cf11\b new\cf2\b0  InitialContext(env);\cf0\par
\cf2         \cf10 // retrieve the service by ejb.\cf0\par
\cf2         \cf12 prerequisiteService\cf2  = (PrerequisiteService) initCtx.lookup(\cf6 "remote/PrerequisiteService"\cf2 );\cf0\par
\par
\cf2         \cf10 // get all documents, only administrator can do this operation.\cf0\par
\cf2         List<PrerequisiteDocument> allDocuments = \cf12 prerequisiteService\cf2 .getAllPrerequisiteDocuments();\cf0\par
\cf2         \cf10 // the list now contains the 2 documents, and using the entities of prerequisite\cf0\par
\cf2         \cf10 // manager you can get all the sub-entities: version, competition documents etc..\cf0\par
\par
\cf2         \cf10 // get the prerequisite document (similar to document version) of document with\cf0\par
\cf2         \cf10 // id=10 and version=2\cf0\par
\cf2         PrerequisiteDocument prerequisiteDocument = \cf12 prerequisiteService\cf2 .getPrerequisiteDocument(10, 2);\cf0\par
\cf2         \cf10 // get the content of document versions\cf0\par
\cf2         String content = prerequisiteDocument.getContent();\cf0\par
\par
\cf2         \cf10 // get the document id\cf0\par
\cf2         \cf11\b long\cf2\b0  documentId = prerequisiteDocument.getDocumentId();\cf0\par
\par
\cf2         \cf10 // get the name of document\cf0\par
\cf2         String name = prerequisiteDocument.getName();\cf0\par
\par
\cf2         \cf10 // get the version\cf0\par
\cf2         \cf11\b int\cf2\b0  version = prerequisiteDocument.getVersion();\cf0\par
\par
\cf2         \cf10 // get the timestamp of document version date\cf0\par
\cf2         XMLGregorianCalendar calendar = prerequisiteDocument.getVersionDate();\cf0\par
\cf2         \cf10 // for example get the day\cf0\par
\cf2         \cf11\b int\cf2\b0  day = calendar.getDay();\cf0\par
\par
\cf2         \cf10 // get the prerequisite documents of competition 20 and role id = 1, it is the role\cf0\par
\cf2         \cf10 // of "designer"\cf0\par
\cf2         List<PrerequisiteDocument> prerequisiteDocuments = \cf12 prerequisiteService\cf2 .getPrerequisiteDocuments(20, 1);\cf0\par
\cf2         \cf10 // it returns a single prerequisite document (document version) associated with this\cf0\par
\cf2         \cf10 // competition and role\cf0\par
\par
\cf2         \cf10 // create the timestamp and set to 27 February 2008\cf0\par
\cf2         \highlight13 GregorianCalendar\f7  \highlight0\f6 cal = \cf11\b new\cf2\b0  GregorianCalendar();\cf0\par
\cf2         cal.set(Calendar.\cf12\i YEAR\cf2\i0 , 2008);\cf0\par
\cf2         cal.set(Calendar.\cf12\i MONTH\cf2\i0 , 1);\cf0\par
\cf2         cal.set(Calendar.\cf12\i DAY_OF_MONTH\cf2\i0 , 27);\cf0\par
\par
\cf2         \cf10 // create the XMLGregorianCalendar\cf0\par
\cf2         XMLGregorianCalendar xmlCal = DatatypeFactory.\i newInstance\i0 ().newXMLGregorianCalendar();\cf0\par
\par
\cf2         \cf10 // record the member answer for the competition id = 20, the date previous created,\cf0\par
\cf2         \cf10 // the prerequisite document retrieved and role of designer: role id =1\cf0\par
\cf2         \cf12 prerequisiteService\cf2 .recordMemberAnswer(20, xmlCal, \cf11\b true\cf2\b0 , prerequisiteDocument, 1);\cf0\par
\cf2         \cf10 // now a MemberAnswer entity is saved into persistence layer and the previous\cf0\par
\cf2         \cf10 // prerequisite document has an answer "true" for the competition id = 20, and the member\cf0\par
\cf2         \cf10 // id = 17, the member id is the id user id of the caller (in UserProfilePrincipal)\cf0\f0\fs24\par
\pard\fi-360\li720\cf2\f5\fs20       \par
\pard\li720\cf0\f0\fs24\par
\pard\keepn\sb120\sa60\sl240\slmult0\tx360\b 5.\tab Future Enhancements\b0\par
\pard\fi720\f1 Other methods can be added to the service.\par
}
 