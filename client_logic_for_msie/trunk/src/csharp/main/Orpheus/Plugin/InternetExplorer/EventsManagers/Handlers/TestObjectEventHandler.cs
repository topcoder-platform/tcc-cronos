/// CSharpClass File "TestObjectEventHandler.cs" generated by Poseidon for UML.
/// Poseidon for UML is developed by <A HREF="http://www.gentleware.com">Gentleware</A>.
/// Generated with <A HREF="http://jakarta.apache.org/velocity/">velocity</A> template engine.

 namespace Orpheus_Client_Logic_for_MSIE {
   namespace Orpheus {
     namespace Plugin {
       namespace InternetExplorer {
         namespace EventsManagers {
           namespace Handlers {

             ///  <summary>
             ///  <!--StartFragment--><span style='font-size:12.0pt;font-family:"Times New Roman"; mso-fareast-font-family:"Times New Roman";mso-ansi-language:EN-US;mso-fareast-language: EN-US;mso-bidi-language:AR-SA'>This class is an implementation of the IExtensionEventHandler interface.</span>
             ///  <p><strong>Thread safety: </strong>This class has no mutable state and is thread safe.<!--EndFragment--></p>             ///  </summary>
             public class TestObjectEventHandler : Orpheus.Plugin.InternetExplorer.EventsManagers.IExtensionEventHandler {

               /// Attributes

               /// Attribute DefaultConfigurationNamespace
               /// <summary>
               /// <p>Default configuration namespace.</p>               /// </summary>
               public string DefaultConfigurationNamespace = "Orpheus.Plugin.InternetExplorer.EventsManagers.Handlers";

               /// Attribute DefaultObjectFactoryNamespace
               /// <summary>
               /// <p>Default ObjectFactory namespace.</p>
               /// <p></p>               /// </summary>
               public string DefaultObjectFactoryNamespace = "TopCoder.Util.ObjectFactory";

               /// Attribute configurationNamespace
               /// <summary>
               /// <p>Represents the configuration namespace to use.</p>
               /// <p>Set in the constructor and not changed afterwards. Can not be null or empty.</p>
               /// <p></p>
               /// <p></p>               /// </summary>
               private readonly string configurationNamespace = <<constructor>>;

               /// Attribute objectFactoryNamespace
               /// <summary>
               /// <p>Represents the Object Factory namespace to use.</p>
               /// <p>Set in the constructor and not changed afterwards. Can not be null or empty.</p>
               /// <p></p>               /// </summary>
               private readonly string objectFactoryNamespace = <<constructor>>;

               /// Attribute hashAlgorithm
               /// <summary>
               /// <p>Represents the hash algorithm to use.</p>
               /// <p>Set in the constructor form the given parameter or instantiated using a configurable key. One set can not change and can not be null.</p>               /// </summary>
               private final readonly TopCoder.Util.Hash.Algorithm.HashAlgorithm hashAlgorithm = <<constructor>>;

               /// Attributes - AssociationEnd

               /// Association End hashAlgorithm
               private TopCoder.Util.Hash.Algorithm.HashAlgorithm hashAlgorithm;

               /// Operations

               /// Constructor TestObjectEventHandler
               /// <summary>
               /// <p>Constructor.</p>
               /// <p>Creates using the Object Factory and a configured key the HashAlgorithm</p>
               /// <p><strong>Implementation details:</strong></p>
               /// <ol>
               /// <li>Sets the default namespaces.</li>
               /// <li>Reads from the configuration file the &quot;hash_algorithm&quot; property.</li>
               /// <li>Uses the Object Factory to create the HashAlgorithm&nbsp; instance based on the configured key.</li>
               /// </ol>
               /// <p></p>
               /// <p></p>               /// </summary>
               /// <exception>ConfigurationException if can not read the property or can not create the object.</exception>
               public TestObjectEventHandler() {
               }

               /// Constructor TestObjectEventHandler
               /// <summary>
               /// <p>Constructor.</p>
               /// <p>Creates using the Object Factory and a configured key the HashAlgorithm using custom namespaces.</p>
               /// <p><strong>Implementation details:</strong></p>
               /// <ol>
               /// <li>Sets the&nbsp; namespaces.</li>
               /// <li>Reads from the configuration file the &quot;hash_algorithm&quot; property.</li>
               /// <li>Uses the Object Factory to create the HashAlgorithm&nbsp; instance based on the configured key.</li>
               /// </ol>
               /// <p></p>               /// </summary>
               /// <exception>ConfigurationException if can not read the property or can not create the object.</exception>
               /// <exception>ArgumentNullException if any parameter is null.</exception>
               /// <exception>ArgumentException if any parameter is empty string.</exception>
               /// <param name='configurationNamespace'>Custom configuration namespace.</param>
               /// <param name='objectFactoryNamespace'>Custom Object Factory namespace.</param>
               public TestObjectEventHandler(string configurationNamespace, string objectFactoryNamespace) {
               }

               /// Constructor TestObjectEventHandler
               /// <summary>
               /// <p>Constructor.</p>
               /// <p>Sets the field to the parameter value.</p>
               /// <p></p>               /// </summary>
               /// <exception>ArgumentNullException if parameter is null.</exception>
               /// <param name='hashAlgorithm'>The hash algorithm to use.</param>
               public TestObjectEventHandler(TopCoder.Util.Hash.Algorithm.HashAlgorithm hashAlgorithm) {
               }

               /// Operation HandleEvent
               /// <summary>
               /// <p>Event handler method.</p>
               /// <p><strong><!--StartFragment-->Implementation details:</strong></p>
               /// <ol type="1" start="1">
               /// <li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto; mso-list:l0 level1 lfo1;tab-stops:list .5in .75in" class="MsoNormal">Gets the <em>IHTMLElement</em> for the <em>params</em> array.</li>
               /// <li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto; mso-list:l0 level1 lfo1;tab-stops:list .5in .75in" class="MsoNormal">Get the child elements of the element and for each one:</li>
               /// </ol>
               /// <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto; margin-left:.8in;text-indent:-.3in;mso-list:l0 level2 lfo1;tab-stops:list .5in .8in" class="MsoNormal"><span style="mso-list:Ignore">2.1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;</span></span> Get the inner text trim the string, remove (blank, tab, CR, and LFCharacters) and normalize all sequences of white space to a single space, and folding all characters to lower case.</p>
               /// <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto; margin-left:.8in;text-indent:-.3in;mso-list:l0 level2 lfo1;tab-stops:list .5in .8in" class="MsoNormal"><span style="mso-list:Ignore">2.2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;</span></span> Append all the elements text and use the hash algorithm to generate the SHA-1 hash of the UTF-8 encoding of the Unicode code point sequence.</p>
               /// <ol type="1" start="3">
               /// <li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto; mso-list:l0 level1 lfo1;tab-stops:list .5in" class="MsoNormal">Get from the persistence the stored hash. Compare to this hash and if they match:</li>
               /// </ol>
               /// <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto; margin-left:.8in;text-indent:-.3in;mso-list:l0 level2 lfo1;tab-stops:list .8in" class="MsoNormal"><span style="mso-list:Ignore">3.1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;</span></span> Read from the configuration file the &ldquo;test_object_url&rdquo; property</p>
               /// <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto; margin-left:.8in;text-indent:-.3in;mso-list:l0 level2 lfo1;tab-stops:list .8in" class="MsoNormal"><span style="mso-list:Ignore">3.2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;</span></span> The current game ID, the domain, the target sequence number, and the normalized and UTF-8 encoded text from which the hash was computed will be specified in the request URL as query parameters. (string.Format)</p>
               /// <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto; margin-left:.8in;text-indent:-.3in;mso-list:l0 level2 lfo1;tab-stops:list .8in" class="MsoNormal"><span style="mso-list:Ignore">3.3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;</span></span> Create a web request (WebRequest.Create) and get the response stream.</p>
               /// <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto; margin-left:.8in;text-indent:-.3in;mso-list:l0 level2 lfo1;tab-stops:list .8in" class="MsoNormal"><span style="mso-list:Ignore">3.4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;</span></span> Use the web browser window navigator from the context to show the response content.</p>
               /// <!--EndFragment-->
               /// <p><!--EndFragment--></p>               /// </summary>
               /// <exception>ArgumentNullException if any parameter is null.</exception>
               /// <exception>HandleEventException to signal problems in handling the event.</exception>
               /// <param name='sender'>Sender object.</param>
               /// <param name='args'>Extension event arguments.</param>
               public void HandleEvent(object sender, Orpheus.Plugin.InternetExplorer.ExtensionEventArgs args) {
               
        // your code here
               
               }
             }

           }
         }
       }
     }
   }
 }
