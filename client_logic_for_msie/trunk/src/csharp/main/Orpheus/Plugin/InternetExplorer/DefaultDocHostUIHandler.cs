/// CSharpClass File "DefaultDocHostUIHandler.cs" generated by Poseidon for UML.
/// Poseidon for UML is developed by <A HREF="http://www.gentleware.com">Gentleware</A>.
/// Generated with <A HREF="http://jakarta.apache.org/velocity/">velocity</A> template engine.

 namespace Orpheus_Client_Logic_for_MSIE {
   namespace Orpheus {
     namespace Plugin {
       namespace InternetExplorer {

         ///  <summary>
         ///  <p class="MsoNormal"><!--StartFragment-->This class implements the <em>IDocHostUIHandler</em> interface and provides the means to extend the Internet Explorer Document Object Model (DOM) with objects, methods, and properties.</p>
         ///  <p class="MsoNormal">This is done by providing MSHTML a pointer to the <em>IDispatch</em> interface for the COM automation object that implements the custom object (<em>ScriptingObject</em> class) properties, and methods. These objects, properties, and methods will then be available to any page displayed by the web browser through the document's <a href="http://msdn.microsoft.com/workshop/author/dhtml/reference/objects/external.asp"><span style="color:windowtext;text-decoration:none;text-underline:none">external</span></a> object.</p>
         ///  <p class="MsoNormal">Instances of this class are created by the <em>MsieClientLogic</em> class and are set to the browser. The only requirement on <em>IDocHostUIHandler</em> implementations is to provide a constructor with a (<em>MsieClientLogic</em>) paramete.</p>
         ///  <p class="MsoNormal">There is only one method that this class actually implements, the <em>GetExternal</em> method which will set the pointer to the scripting object created by this class.<!--EndFragment--></p>
         ///  <p><strong>Thread safety: </strong>This class has no mutable state and is thread safe.</p>         ///  </summary>
         public class DefaultDocHostUIHandler : Orpheus.Plugin.InternetExplorer.Interop.IDocHostUIHandler {

           /// Attributes

           /// Attribute context
           /// <summary>
           /// <p>The context MsieClientLogic instance. The MsieClientLogic is used by this class to get the object to be exposed to JavaScript code.</p>
           /// <p>Set in the constructor and not changed afterwards. Can not be null.</p>           /// </summary>
           private final readonly Orpheus.Plugin.InternetExplorer.MsieClientLogic context = <<constructor>>;

           /// Attributes - AssociationEnd

           /// Association End scriptingObject
           public ScriptingObject scriptingObject;

           /// Association End context
           private MsieClientLogic context;

           /// Operations

           /// Constructor OrpheusDocHostUIHandler
           /// <summary>
           /// <p>Constructor used by the MsieClientLogic to create this object.</p>
           /// <p>The MsieClientLogic passed is needed to get the scripting object.</p>
           /// <p><strong>Implementation details:</strong></p>
           /// <p>Sets the field to the parameter value.</p>           /// </summary>
           /// <exception>ArgumentNullException if parameter is null.</exception>
           /// <param name='context'>MsieClientLogic context.</param>
           public OrpheusDocHostUIHandler(Orpheus.Plugin.InternetExplorer.MsieClientLogic context) {
           }

           /// Operation EnableModeless
           /// <summary>
           /// <p><!--StartFragment-->Called when MSHTML displays a modal UI. Empty method.</p>
           /// <p><!--EndFragment--></p>           /// </summary>
           /// <param name='fEnable'>BOOL that indicates if the host's modeless dialog boxes are enabled or disabled.</param>
           public void EnableModeless(int fEnable) {
           
        // your code here
           
           }

           /// Operation FilterDataObject
           /// <summary>
           /// <p><!--StartFragment-->Called by MSHTML to allow the host to replace the MSHTML data object.. Empty method.</p>
           /// <p><!--EndFragment--></p>           /// </summary>
           /// <param name='pDO'>Pointer to an IDataObject interface supplied by MSHTML.  </param>
           /// <param name='ppDORet'>Address of a pointer variable that receives an IDataObject interface pointer supplied by the host. </param>
           public void FilterDataObject(Orpheus.Plugin.InternetExplorer.Interop.IDataObject pDO, out Orpheus.Plugin.InternetExplorer.Interop.IDataObject ppDORet) {
           
        // your code here
           
           }

           /// Operation GetDropTarget
           /// <summary>
           /// <p><!--StartFragment-->Called by MSHTML when it is used as a drop target. This method enables the host to supply an alternative IDropTarget interface. Empty method.</p>
           /// <p><!--EndFragment--></p>           /// </summary>
           /// <param name='pDropTarget'>Pointer to an IDropTarget interface for the current drop target object supplied by MSHTML. </param>
           /// <param name='ppDropTarget'>Address of a pointer variable that receives an IDropTarget interface pointer for the alternative drop target object supplied by the host. </param>
           public void GetDropTarget(Orpheus.Plugin.InternetExplorer.Interop.IDropTarget pDropTarget, out Orpheus.Plugin.InternetExplorer.Interop.IDropTarget ppDropTarget) {
           
        // your code here
           
           }

           /// Operation GetExternal
           /// <summary>
           /// <p><!--StartFragment-->Called by MSHTML to obtain the host's IDispatch interface. This method will be invoked by the Internet Exporer scripting engine whenever JavaScript code will access the external object.</p>
           /// <p class="MsoNormal"><strong>Implementation details:</strong></p>
           /// <p class="MsoNormal">Sets the pointer to the class scripting object returned by the context MsieClientLogic instance.</p>
           /// <p></p>
           /// <p><!--EndFragment--></p>           /// </summary>
           /// <param name='ppDispatch'>Address of a pointer to a variable that receives an IDispatch interface pointer for the host application. </param>
           public void GetExternal(out object ppDispatch) {
           
        // your code here
           
           }

           /// Operation GetHostInfo
           /// <summary>
           /// <p><!--StartFragment-->Called by MSHTML to retrieve the user interface (UI) capabilities of the application that is hosting MSHTML.. Empty method.</p>
           /// <p><!--EndFragment--></p>           /// </summary>
           /// <param name='ref_pInfo'>Pointer to a DOCHOSTUIINFO structure that receives the host's UI capabilities.  </param>
           public void GetHostInfo(Orpheus.Plugin.InternetExplorer.Interop.DOCHOSTUIINFO ref_pInfo) {
           
        // your code here
           
           }

           /// Operation GetOptionKeyPath
           /// <summary>
           /// <p><!--StartFragment-->Called by the WebBrowser Control to retrieve a registry subkey path that overrides the default Internet Explorer registry settings. Empty method.</p>
           /// <p><!--EndFragment--></p>           /// </summary>
           /// <param name='pchKey'>Pointer to an LPOLESTR that receives the registry subkey string where the host stores its registry settings. </param>
           /// <param name='dw'>Reserved. Must be set to NULL.</param>
           public void GetOptionKeyPath(string pchKey, uint dw) {
           
        // your code here
           
           }

           /// Operation HideUI
           /// <summary>
           /// <p><!--StartFragment-->Called when MSHTML removes its menus and toolbars.. Empty method.</p>
           /// <p><!--EndFragment--></p>           /// </summary>
           public void HideUI() {
           
        // your code here
           
           }

           /// Operation OnDocWindowActivate
           /// <summary>
           /// <p><!--StartFragment-->Called by the MSHTML implementation of IOleInPlaceActiveObject.OnDocWindowActivate. Empty method.</p>           /// </summary>
           /// <param name='fActivate'>BOOL value that indicates the state of the document window.</param>
           public void OnDocWindowActivate(int fActivate) {
           
        // your code here
           
           }

           /// Operation OnFrameWindowActivate
           /// <summary>
           /// <p>Called by the MSHTML implementation of IOleInPlaceActiveObject.OnFrameWindowActivate.. Empty method.</p>
           /// <p><!--EndFragment--></p>           /// </summary>
           /// <param name='fActivate'>BOOL value that indicates the state of the container's top-level frame window.</param>
           public void OnFrameWindowActivate(int fActivate) {
           
        // your code here
           
           }

           /// Operation ResizeBorder
           /// <summary>
           /// <p><!--StartFragment-->Called by the MSHTML implementation of IOleInPlaceActiveObject.ResizeBorder. Empty method.</p>
           /// <p><!--EndFragment--></p>           /// </summary>
           /// <param name='ref_prcBorder'>Constant pointer to a RECT for the new outer rectangle of the border. </param>
           /// <param name='pUIWindow'>Pointer to an IOleInPlaceUIWindow interface for the frame or document window whose border is to be changed. </param>
           /// <param name='fRameWindow'>BOOL that is TRUE if the frame window is calling IDocHostUIHandler::ResizeBorder, or FALSE otherwise.  </param>
           public void ResizeBorder(Orpheus.Plugin.InternetExplorer.Interop.tagRECT ref_prcBorder, Orpheus.Plugin.InternetExplorer.Interop.IOleInPlaceUIWindow pUIWindow, int fRameWindow) {
           
        // your code here
           
           }

           /// Operation ShowContextMenu
           /// <summary>
           /// <p><!--StartFragment-->Called by MSHTML to display a shortcut menu.Empty method.<!--EndFragment--></p>           /// </summary>
           /// <param name='dwID'>DWORD that specifies the identifier of the shortcut menu to be displayed</param>
           /// <param name='ref_ppt'>Pointer to a POINT structure containing the screen coordinates for the menu. </param>
           /// <param name='pcmdtReserved'>Pointer to the IUnknown of an IOleCommandTarget interface used to query command status and execute commands on this object. </param>
           /// <param name='pdispReserved'>Pointer to an IDispatch interface of the object at the screen coordinates specified in ppt</param>
           public void ShowContextMenu(uint dwID, Orpheus.Plugin.InternetExplorer.Interop.tagPOINT ref_ppt, object pcmdtReserved, object pdispReserved) {
           
        // your code here
           
           }

           /// Operation ShowUI
           /// <summary>
           /// <p><!--StartFragment-->Called by MSHTML to enable the host to replace MSHTML menus and toolbars..Empty method.</p>
           /// <p><!--EndFragment--></p>           /// </summary>
           /// <param name='dwID'>DWORD that receives a DOCHOSTUITYPE value indicating the type of user interface (UI).  </param>
           /// <param name='pActiveObject'>Pointer to an IOleInPlaceActiveObject interface for the active object. </param>
           /// <param name='pCommandTarget'>Pointer to an IOleCommandTarget interface for the object. </param>
           /// <param name='pFrame'>Pointer to an IOleInPlaceFrame interface for the object. Menus and toolbars must use this parameter. </param>
           /// <param name='pDoc'>Pointer to an IOleInPlaceUIWindow interface for the object. Toolbars must use this parameter. </param>
           public void ShowUI(int dwID, Orpheus.Plugin.InternetExplorer.Interop.IOleInPlaceActiveObject pActiveObject, Orpheus.Plugin.InternetExplorer.Interop.IOleCommandTarget pCommandTarget, Orpheus.Plugin.InternetExplorer.Interop.IOleInPlaceFrame pFrame, Orpheus.Plugin.InternetExplorer.Interop.IOleInPlaceUIWindow pDoc) {
           
        // your code here
           
           }

           /// Operation TranslateAccelerator
           /// <summary>
           /// <p><!--StartFragment-->Called by MSHTML when IOleInPlaceActiveObject.TranslateAccelerator or IOleControlSite.TranslateAccelerator is called. Empty method.</p>
           /// <p><!--EndFragment--></p>           /// </summary>
           /// <param name='ref_lpmsg'>Pointer to a MSG structure that specifies the message to be translated. </param>
           /// <param name='ref_pguidCmdGroup'>Pointer to a GUID for the command group identifier.  </param>
           /// <param name='nCmdID'>DWORD that specifies a command identifier. </param>
           public void TranslateAccelerator(Orpheus.Plugin.InternetExplorer.Interop.tagMSG ref_lpmsg, System.Guid ref_pguidCmdGroup, uint nCmdID) {
           
        // your code here
           
           }

           /// Operation TranslateUrl
           /// <summary>
           /// <p><!--StartFragment-->Called by MSHTML to retrieve the user interface (UI) capabilities of the application that is hosting MSHTML.. Empty method.</p>
           /// <p><!--EndFragment--></p>           /// </summary>
           /// <param name='dwTranslate'>Reserved. Must be set to NULL. </param>
           /// <param name='ref_pchURLIn'>Pointer to an OLECHAR that specifies the current URL for navigation. </param>
           /// <param name='ppchURLOut'>Address of a pointer variable that receives an OLECHAR pointer containing the new URL. </param>
           public void TranslateUrl(uint dwTranslate, ushort ref_pchURLIn, System.IntPtr ppchURLOut) {
           
        // your code here
           
           }

           /// Operation UpdateUI
           /// <summary>
           /// <p><!--StartFragment-->Called by MSHTML to notify the host that the command state has changed.Empty method.</p>
           /// <p><!--EndFragment--></p>           /// </summary>
           public void UpdateUI() {
           
        // your code here
           
           }
         }

       }
     }
   }
 }
