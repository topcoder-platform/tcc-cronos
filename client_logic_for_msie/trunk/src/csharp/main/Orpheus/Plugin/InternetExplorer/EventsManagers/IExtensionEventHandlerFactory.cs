
/// CSharpInterface File "IExtensionEventHandlerFactory.cs" generated by Poseidon for UML.
/// Poseidon for UML is developed by <A HREF="http://www.gentleware.com">Gentleware</A>.
/// Generated with <A HREF="http://jakarta.apache.org/velocity/">velocity</A> template engine.

 namespace Orpheus_Client_Logic_for_MSIE {
   namespace Orpheus {
     namespace Plugin {
       namespace InternetExplorer {
         namespace EventsManagers {

           ///  <summary>
           ///  <!--StartFragment-->This interface defines the contract that is required for any event handler factory to implement. A event handler factory is responsible for creating the IExtensionEventHandler implementation based on a specified event name. The event name is simply used here to uniquely identify the required handler(s) implementation that needs to be created.
           ///  <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto" class="MsoNormal">This component provides one implementation of this interface which uses the name to get from the configuration file the key, and the Object Factory component to create, using the key, the specified implementation(s).</p>
           ///  <!--EndFragment--><strong>Thread safety: </strong>Implementations of this interface are expected to be thread safe.           ///  </summary>
           public interface IExtensionEventHandlerFactory {

             /// Inner Classifiers

             ///  <summary>
             ///  </summary>
             public class IUserInterfaceEventHandler[] {
             };

             ///  <summary>
             ///  </summary>
             public class IExtensionEventHandler[] {
             };



             /// Operations

             /// Operation CreateHandlers
             /// <summary>
             /// <p><!--StartFragment-->This is the declaration of the factory method which based on a event name should create the appropriate IExtensionEventHandler implementation to be used.</p>
             /// <p><!--EndFragment--></p>             /// </summary>
             /// <exception>ArgumentNullException if parameter is null.</exception>
             /// <exception>ArgumentException if parameter is empty string.</exception>
             /// <exception>EventHandlerCreationException to signal problems if can not create the event handlers.</exception>
             /// <param name='eventName'>The name of the event for which to create the handlers.</param>
             /// <returns>The event handler instance.</returns>
             Orpheus.Plugin.InternetExplorer.EventsManagers.IExtensionEventHandlerFactory.IExtensionEventHandler[] CreateHandlers(string eventName) {
             }
           }

         }
       }
     }
   }
 }
