/// CSharpClass File "WebBrowserSite.cs" generated by Poseidon for UML.
/// Poseidon for UML is developed by <A HREF="http://www.gentleware.com">Gentleware</A>.
/// Generated with <A HREF="http://jakarta.apache.org/velocity/">velocity</A> template engine.

 namespace Orpheus_Client_Logic_for_MSIE {
   namespace Orpheus {
     namespace Plugin {
       namespace InternetExplorer {

         ///  <summary>
         ///  <p style="tab-stops:right 6.0in"><!--StartFragment-->This class is the base class of the Internet Explorer extension model and provides for derived classes a <em style="mso-bidi-font-style:normal">site</em> within the browser. In general, a <em>site</em> is an intermediate object placed in the middle of the container and each contained object.</p>
         ///  <p style="tab-stops:right 6.0in">This class implements <em>IObjectWithSite</em> interface so it's container can supply it with an interface pointer for its site object. Then, this class, can communicate directly with its site.</p>
         ///  <p style="tab-stops:right 6.0in">A container can pass the <em>IUnknown</em> pointer of its site to an object through <em><a href="ms-help://MS.VSCC.v80/MS.MSDN.v80/MS.MOBEMBDEV.v10.en/apisp/html/sp__mdref_iobjectwithsite_setsite_.htm"><span style="color:windowtext;text-decoration:none;text-underline:none">IObjectWithSite.SetSite</span></a></em>. Callers can also retrieve the latest site passed to <em>IObjectWithSite.SetSite</em> through <em><a href="ms-help://MS.VSCC.v80/MS.MSDN.v80/MS.MOBEMBDEV.v10.en/apisp/html/sp__mdref_iobjectwithsite_getsite_.htm"><span style="color:windowtext;text-decoration:none;text-underline:none">IObjectWithSite.GetSite</span></a></em>. This usage provides a hooking mechanism, allowing third parties to intercept calls from an object to its container site object.</p>
         ///  <p style="tab-stops:right 6.0in">This class extends the Control class to allow derived classes to build their user interface.<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><!--EndFragment--></p>
         ///  <p><!--StartFragment-->Together with the <em style="mso-bidi-font-style:normal">ToolBand</em> class, both classes provide a generic mechanism for creating Internet Explorer extensions. These classes are decoupled for the intended purpose of this component to provide the client side logic for a web application. The usage scenario is to derive the <em style="mso-bidi-font-style:normal">ToolBand</em> class and there hook the client logic functionality implemented in the <em style="mso-bidi-font-style:normal">MsieClientLogic</em> class.<!--EndFragment--></p>
         ///  <p><strong>Thread safety: </strong>This class is not thread safe, but because it is a user control it does not need to be.</p>
         ///  <!--EndFragment-->         ///  </summary>
         public class WebBrowserSite : System.Windows.Forms.UserControl, Orpheus.Plugin.InternetExplorer.Interop.IObjectWithSite {

           /// Attributes

           /// Attribute host
           /// <summary>
           /// <p>Represents the host Internet Explorer. The host is set in the SetSite method and should not change afterwards.</p>
           /// <p>Can be null until the SetSite method is invoked by the browser.</p>           /// </summary>
           private Orpheus.Plugin.InternetExplorer.Interop.WebBrowserClass host = null;

           /// Attribute site
           /// <summary>
           /// <p>Represents the site of the tool bar in the Internet Explorer host. The site is set in the SetSite method and should not change afterwards.</p>
           /// <p>Can be null until the SetSite method is invoked by the browser. It is returned in the GetSite method.</p>
           /// <p></p>           /// </summary>
           private Orpheus.Plugin.InternetExplorer.Interop.IInputObjectSite site = null;

           /// Attribute Host
           /// <summary>
           /// <p>Returns the member host browser.</p>           /// </summary>
           public Orpheus.Plugin.InternetExplorer.Interop.WebBrowserClass Host;

           /// Attribute Site
           /// <summary>
           /// <p>Returns the member extension site.</p>           /// </summary>
           public Orpheus.Plugin.InternetExplorer.Interop.IInputObjectSite Site;

           /// Attributes - AssociationEnd

           /// Association End site
           private Orpheus.Plugin.InternetExplorer.Interop.IInputObjectSite site;

           /// Association End host
           private Orpheus.Plugin.InternetExplorer.Interop.WebBrowserClass host;

           /// Operations

           /// Constructor WebBrowserSite
           /// <summary>
           /// <p>Default empty constructor.</p>
           /// <p></p>           /// </summary>
           public WebBrowserSite() {
           }

           /// Operation SetSite
           /// <summary>
           /// <p><!--StartFragment-->The <span style="mso-bidi-font-weight:bold">SetSite</span> method passes the container site object's <span style="mso-bidi-font-weight:bold">IUnknown</span> pointer to the object being managed. The object should hold onto this pointer, calling <span style="mso-bidi-font-weight:bold">IUnknown<strong>.</strong>AddRef</span> in doing so. If the object already has a site, it should call that existing site's <span style="mso-bidi-font-weight:bold">IUnknown.Release</span>, save the new site pointer, and call the new site's <span style="mso-bidi-font-weight: bold">IUnknown.AddRef</span>.</p>
           /// <p><strong>Implementation details:</strong></p>
           /// <p style="margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo1; tab-stops:list .5in"><span style="mso-list:Ignore">1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span> If the member site is not null (already has a site) releases it: Marshal.ReleaseComObject( this.site )</p>
           /// <p style="margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo1; tab-stops:list .5in"><span style="mso-list:Ignore">2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span> If the host explorer is not null release it as well: Marshal.ReleaseComObject( this.host )</p>
           /// <p style="margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo1; tab-stops:list .5in"><span style="mso-list:Ignore">3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span> Get the IInputObjectSite by casting the input <span style='font-size:10.0pt; font-family:"Courier New";mso-no-proof:yes'>pUnkSite. this.site = pUnkSite as</span> IInputObjectSite</p>
           /// <p style="margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo1; tab-stops:list .5in"><span style="mso-list:Ignore">4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span> The passed pointer also implements the <span style="mso-no-proof:yes">IServiceProvider</span> interface which we will use to get to the browser reference</p>
           /// <p style="margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo1; tab-stops:list .5in">4. Create a wrapper of type WebBrowserClass using the Marshal.CreateWrapperOfType.method.</p>
           /// <p style="text-indent:.25in;tab-stops:364.2pt" class="MsoNormal"><span style='font-size:9.0pt;font-family:"Courier New";mso-no-proof:yes'>IServiceProvider serviceProvider = pUnkSite <span style="color:blue">as</span> IServiceProvider<span style="mso-tab-count:1">&nbsp;&nbsp;</span></span></p>
           /// <p style="text-indent:.25in" class="MsoNormal"><span style='font-size:9.0pt; font-family:"Courier New"'>object <span style="mso-no-proof:yes">webBrowser;</span></span></p>
           /// <p style="text-indent:.25in" class="MsoNormal"><span style='font-size:9.0pt; font-family:"Courier New"'>Guid <span style="mso-no-proof:yes">guid =</span> new Guid<span style="mso-no-proof:yes">(&quot;{0002DF05-0000-0000-C000-000000000046}&quot;);</span></span></p>
           /// <p style="text-indent:.25in" class="MsoNormal"><span style='font-size:9.0pt; font-family:"Courier New";mso-no-proof:yes'>Guid riid =</span> <span style='font-size:9.0pt;font-family:"Courier New"'>new Guid<span style="mso-no-proof:yes">(<span style="color:maroon">&quot;{00000000-0000-0000-C000-000000000046}&quot;</span>);</span></span></p>
           /// <p style="text-indent:.25in;mso-layout-grid-align:none; text-autospace:none" class="MsoNormal"><span style='font-size:9.0pt;font-family:"Courier New"; mso-no-proof:yes'>serviceProvider.QueryService(<span style="color:blue">ref</span> guid, <span style="color:blue">ref</span> riid, <span style="color:blue">out</span> webBrowser );</span></p>
           /// <p style="margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo1; tab-stops:list .5in"><span style="mso-list:Ignore">5.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span> Cast the object to IWebBrowser2: this.host = (IWebBrowser2)<span style='font-size:10.0pt; font-family:"Courier New";mso-no-proof:yes'>webBrowser</span></p>
           /// <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6.&nbsp;&nbsp;&nbsp;&nbsp; (WebBrowserClass)Marshal.CreateWrapperOfType(webBrowser as IWebBrowser,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(WebBrowserClass));</p>
           /// <p><!--EndFragment--></p>           /// </summary>
           /// <exception>SeteSettingException if can not get the browser, and to wrap COM exceptions.</exception>
           /// <param name='pUnkSite'>Pointer to the IUnknown interface pointer of the site managing this object.</param>
           public void SetSite(System.Object pUnkSite) {
           
        // your code here
           
           }

           /// Operation GetSite
           /// <summary>
           /// <p>Retrieves the last site set with <a href="ms-help://MS.VSCC.v80/MS.MSDN.v80/MS.WIN32COM.v10.en/com/html/5e95b2a6-85b3-4899-9e23-54ed9e69e821.htm"><span style="color:windowtext;text-decoration:none;text-underline:none">IObjectWithSite.SetSite</span></a>.<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p>
           /// <p><!--EndFragment--></p>           /// </summary>
           /// <param name='ref_riid'>The IID of the interface pointer that should be returned in ppvSite.  </param>
           /// <param name='ppvSite'>Address of pointer variable that receives the interface pointer requested in riid. Upon successful return, *ppvSite contains the requested interface pointer to the site</param>
           public void GetSite(System.Guid ref_riid, out System.Object ppvSite) {
           
        // your code here
           
           }
         }

       }
     }
   }
 }
