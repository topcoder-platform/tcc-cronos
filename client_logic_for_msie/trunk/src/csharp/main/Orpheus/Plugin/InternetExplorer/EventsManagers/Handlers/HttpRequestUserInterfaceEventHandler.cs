/// CSharpClass File "HttpRequestUserInterfaceEventHandler.cs" generated by Poseidon for UML.
/// Poseidon for UML is developed by <A HREF="http://www.gentleware.com">Gentleware</A>.
/// Generated with <A HREF="http://jakarta.apache.org/velocity/">velocity</A> template engine.

 namespace Orpheus_Client_Logic_for_MSIE {
   namespace Orpheus {
     namespace Plugin {
       namespace InternetExplorer {
         namespace EventsManagers {
           namespace Handlers {

             ///  <summary>
             ///  <p class="MsoNormal"><!--StartFragment-->This class is an implementation of the <em>IExtensionEventHandler</em> interface.</p>
             ///  <p class="MsoNormal">This event handler should be configured in the configuration file for user interface generated events, such as login button pressed. Most of these events require a HTTP request to be made to a URL and the result displayed in either the main browser window or a popup window.</p>
             ///  <p class="MsoNormal">This class constructs the URL of the page to request and then directs the browser navigator to the specified URL.</p>
             ///  <p class="MsoNormal"><!--EndFragment--><strong>Thread safety: </strong>This class has no mutable state and is thread safe.</p>
             ///  <!--EndFragment-->             ///  </summary>
             public class HttpRequestUserInterfaceEventHandler : Orpheus.Plugin.InternetExplorer.EventsManagers.IExtensionEventHandler {

               /// Attributes

               /// Attribute DefaultConfigurationNamespace
               /// <summary>
               /// <p>Default configuration namespace.</p>
               /// <p></p>               /// </summary>
               public string DefaultConfigurationNamespace = "Orpheus.Plugin.InternetExplorer.EventsManagers.Handlers";

               /// Attribute configurationNamespace
               /// <summary>
               /// <p>Represents the configuration namespace to use.</p>
               /// <p>Set in the constructor and not changed afterwards. Can not be null or empty.</p>               /// </summary>
               private readonly string configurationNamespace = <<constructor>>;

               /// Operations

               /// Constructor HttpRequestUserInterfaceEventHandler
               /// <summary>
               /// <p>Constructor.</p>
               /// <p>Sets the default namespace to use.</p>               /// </summary>
               public HttpRequestUserInterfaceEventHandler() {
               }

               /// Constructor HttpRequestUserInterfaceEventHandler
               /// <summary>
               /// <p>Constructor.</p>
               /// <p>Sets the field to the parameter value.</p>
               /// <p></p>               /// </summary>
               /// <exception>ArgumentNullException if parameter is null.</exception>
               /// <exception>ArgumentException if parameter is empty string.</exception>
               /// <param name='configurationNamespace'>Custom configuration namespace.</param>
               public HttpRequestUserInterfaceEventHandler(string configurationNamespace) {
               }

               /// Operation HandleEvent
               /// <summary>
               /// <p><!--StartFragment-->Retrieves from the configuration file and based on the event name the URL of the page to request, whether the page should be displayed in a new window, and the method to use for the request and display the result.</p>
               /// <p><strong>Implementation details:</strong></p>
               /// <p><!--StartFragment--><span style="mso-list:Ignore">1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span> Reads from the configuration file and based on the event name the URL of the page to request (the &lt;event name&gt;_url property).</p>
               /// <p><span style="mso-list:Ignore">2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span> Reads from the configuration file and based on the event name whether the page should be displayed in a new window (the &lt;event name&gt;_new_window property).</p>
               /// <p><span style="mso-list:Ignore">3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span> Reads from the configuration file and based on the event name the method to use for the request (the &lt;event name&gt;_method property).</p>
               /// <p><span style="mso-list:Ignore">4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span> Creates a new web request (WebRequest.Create) for the configured URL.</p>
               /// <p><span style="mso-list:Ignore">5.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span> Sets the method to use to the request to the configured value.</p>
               /// <p><span style="mso-list:Ignore">6.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span> Gets the response stream of the request.</p>
               /// <p><span style="mso-list:Ignore">7.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span> It then uses the web browser window navigator from the context object to set the content to the browser.</p>
               /// <p><span style="mso-list:Ignore">8.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span> Closes the response stream.</p>               /// </summary>
               /// <exception>ArgumentNullException if any parameter is null.</exception>
               /// <exception>HandleEventException to signal problems in handling the event.</exception>
               /// <param name='sender'>Sender object.</param>
               /// <param name='args'>Extension event arguments.</param>
               public void HandleEvent(object sender, Orpheus.Plugin.InternetExplorer.ExtensionEventArgs args) {
               
        // your code here
               
               }
             }

           }
         }
       }
     }
   }
 }
