/// CSharpClass File "PollingEventHandler.cs" generated by Poseidon for UML.
/// Poseidon for UML is developed by <A HREF="http://www.gentleware.com">Gentleware</A>.
/// Generated with <A HREF="http://jakarta.apache.org/velocity/">velocity</A> template engine.

 namespace Orpheus_Client_Logic_for_MSIE {
   namespace Orpheus {
     namespace Plugin {
       namespace InternetExplorer {
         namespace EventsManagers {
           namespace Handlers {

             ///  <summary>
             ///  <!--StartFragment-->This class is an implementation of the IExtensionEventHandler interface. <span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
             ///  <p class="MsoNormal">This event handler will be invoked at regular intervals or through the scripting method.</p>
             ///  <!--EndFragment--><strong>Thread safety: </strong>This class has no mutable state and is thread safe.             ///  </summary>
             public class PollingEventHandler : Orpheus.Plugin.InternetExplorer.EventsManagers.IExtensionEventHandler {

               /// Attributes

               /// Attribute DefaultConfigurationNamespace
               /// <summary>
               /// <p>Default configuration namespace.</p>               /// </summary>
               public string DefaultConfigurationNamespace = "Orpheus.Plugin.InternetExplorer.EventsManagers.Handlers";

               /// Attribute DefaultObjectFactoryNamespace
               /// <summary>
               /// <p>Default ObjectFactory namespace.</p>               /// </summary>
               public string DefaultObjectFactoryNamespace = "TopCoder.Util.ObjectFactory";

               /// Attribute configurationNamespace
               /// <summary>
               /// <p>Represents the configuration namespace to use.</p>
               /// <p>Set in the constructor and not changed afterwards. Can not be null or empty.</p>
               /// <p></p>               /// </summary>
               private readonly string configurationNamespace = <<constructor>>;

               /// Attribute objectFactoryNamespace
               /// <summary>
               /// <p>Represents the configuration namespace to use.</p>
               /// <p>Set in the constructor and not changed afterwards. Can not be null or empty.</p>
               /// <p></p>               /// </summary>
               private readonly string objectFactoryNamespace = <<constructor>>;

               /// Attribute rssParser
               /// <summary>
               /// <p>Represents the IRSSParser implementation to use to parse RSS responeses.</p>
               /// <p>Set in the constructor form the given parameter or instantiated using a configurable key. One set can not change and can not be null.</p>               /// </summary>
               private final readonly TopCoder.Util.RSS.IO.IRSSParser rssParser = <<constructor>>;

               /// Attributes - AssociationEnd

               /// Association End rssParser
               private TopCoder.Util.RSS.IO.IRSSParser rssParser;

               /// Operations

               /// Constructor PollingEventHandler
               /// <summary>
               /// <p>Constructor.</p>
               /// <p>Creates using the Object Factory and a configured key the IRSSParser.</p>
               /// <p><strong>Implementation details:</strong></p>
               /// <ol>
               /// <li>Sets the default namespaces.</li>
               /// <li>Reads from the configuration file the &quot;rss_parser&quot; property.</li>
               /// <li>Uses the Object Factory to create the IRSSParser instance based on the configured key.</li>
               /// </ol>
               /// <p></p>               /// </summary>
               /// <exception>ConfigurationException if can not read the property or can not create the object.</exception>
               public PollingEventHandler() {
               }

               /// Constructor PollingEventHandler
               /// <summary>
               /// <p>Constructor.</p>
               /// <p>Creates using the Object Factory and a configured key the IRSSParser using the custom namespaces.</p>
               /// <p><strong>Implementation details:</strong></p>
               /// <ol>
               /// <li>Sets the namespaces.</li>
               /// <li>Reads from the configuration file the &quot;rss_parser&quot; property.</li>
               /// <li>Uses the Object Factory to create the IRSSParser instance based on the configured key.</li>
               /// </ol>
               /// <p></p>               /// </summary>
               /// <exception>ConfigurationException if can not read the property or can not create the object.</exception>
               /// <exception>ArgumentNullException if any parameter is null.</exception>
               /// <exception>ArgumentException if any parameter is empty string.</exception>
               /// <param name='configurationNamespace'>Custom configuration namespace.</param>
               /// <param name='objectFactoryNamespace'>Custom Object Factory namespace.</param>
               public PollingEventHandler(Orpheus.Plugin.InternetExplorer.EventsManagers.Handlers.WebBrowserDocumentCompletedEventHandler.string configurationNamespace, Orpheus.Plugin.InternetExplorer.EventsManagers.Handlers.WebBrowserDocumentCompletedEventHandler.string objectFactoryNamespace) {
               }

               /// Constructor PollingEventHandler
               /// <summary>
               /// <p>Constructor.</p>
               /// <p>Sets the field to the parameter value.</p>
               /// <p></p>               /// </summary>
               /// <exception>ArgumentNullException if parameter is null.</exception>
               /// <param name='rssParser'>The IRSSParser instance to use.</param>
               public PollingEventHandler(TopCoder.Util.RSS.IO.IRSSParser rssParser) {
               }

               /// Operation HandleEvent
               /// <summary>
               /// <p>Event handler method.</p>
               /// <p><strong><!--StartFragment-->Implementation details:</strong></p>
               /// <ol type="1" start="1">
               /// <li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto; mso-list:l0 level1 lfo1;tab-stops:list .5in" class="MsoNormal">Reads from the configuration file the configured URL(polling_url property).</li>
               /// <li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto; mso-list:l0 level1 lfo1;tab-stops:list .5in" class="MsoNormal">Creates a new web request (WebRequest.Create) to the configured URL.</li>
               /// <li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto; mso-list:l0 level1 lfo1;tab-stops:list .5in" class="MsoNormal">Gets from the persistence the &ldquo;timestamp&rdquo; value.</li>
               /// <li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto; mso-list:l0 level1 lfo1;tab-stops:list .5in" class="MsoNormal">The URL is constructed with the update timestamp of the feed (string.Format(url, timestamp))</li>
               /// <li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto; mso-list:l0 level1 lfo1;tab-stops:list .5in" class="MsoNormal">Gets the response stream from the request.</li>
               /// <li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto; mso-list:l0 level1 lfo1;tab-stops:list .5in" class="MsoNormal">Parses the response stream using the RSS parser into a <em>RSSFeed</em> document.</li>
               /// <li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto; mso-list:l0 level1 lfo1;tab-stops:list .5in .75in" class="MsoNormal">For each <em>RSSItem</em> in the feed items:</li>
               /// </ol>
               /// <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto; margin-left:.8in;text-indent:-.3in;mso-list:l0 level2 lfo1;tab-stops:list .75in .8in" class="MsoNormal"><span style="mso-list:Ignore">7.1.</span>If the content is of type text, HTML or XHTML sets the content to be displayed in the new window using the web browser window navigator.</p>
               /// <p style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto; margin-left:.8in;text-indent:-.3in;mso-list:l0 level2 lfo1;tab-stops:list .75in .8in" class="MsoNormal"><span style="mso-list:Ignore">7.2.</span>If the content is of type &ldquo;application/x-tc-bloom-filter&rdquo; restore the bloom filter from the serialized content of the feed item.</p>
               /// <ol type="1" start="8">
               /// <li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto; mso-list:l0 level1 lfo1;tab-stops:list .5in" class="MsoNormal">Persist the feed timestamp.</li>
               /// <li style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto; mso-list:l0 level1 lfo1;tab-stops:list .5in" class="MsoNormal">Close the response stream.</li>
               /// </ol>
               /// <p><!--EndFragment--></p>
               /// <p><!--EndFragment--></p>               /// </summary>
               /// <exception>ArgumentNullException if any parameter is null.</exception>
               /// <exception>HandleEventException to signal problems in handling the event.</exception>
               /// <param name='sender'>Sender object.</param>
               /// <param name='args'>Extension event arguments.</param>
               public void HandleEvent(object sender, Orpheus.Plugin.InternetExplorer.ExtensionEventArgs args) {
               
        // your code here
               
               }
             }

           }
         }
       }
     }
   }
 }
