/// CSharpClass File "ExtensionInstaller.cs" generated by Poseidon for UML.
/// Poseidon for UML is developed by <A HREF="http://www.gentleware.com">Gentleware</A>.
/// Generated with <A HREF="http://jakarta.apache.org/velocity/">velocity</A> template engine.

 namespace Orpheus_Client_Logic_for_MSIE {
   namespace Orpheus {
     namespace Plugin {
       namespace InternetExplorer {

         ///  <summary>
         ///  Installer class for Internet Exporer Extensions.
         ///  <p>Extensions must be set with the ExtensionAttribute in order to be recognized by the installer.</p>         ///  </summary>
         public class ExtensionInstaller {

           /// Operations

           /// Constructor ExtenstionInstaller
           /// <summary>
           /// <p>Default empty constructor.</p>           /// </summary>
           public ExtenstionInstaller() {
           }

           /// Operation Register
           /// <summary>
           /// <p>Gets the key guid of the type: type.GUID.ToString(&quot;B&quot;);</p>
           /// <p>Creates two subkeys:</p>
           /// <p>Registry.ClassesRoot.CreateSubKey(@&quot;CLSID\&quot; + guid) and another one under this :</p>
           /// <p>CreateSubKey(&quot;Implemented Categories&quot;);</p>
           /// <p>Gets using reflection the custom attributes of the type parameter of type ExtensionAttribute.</p>
           /// <p>Sets the registry value for the class registry key: SetValue(&quot;MenuText&quot;, attribute.Name)</p>
           /// <p>Sets the toolbar as a horizontal toolbar by creating a subkey under the registry class key: CreateSubKey(&quot;{00021494-0000-0000-C000-000000000046}&quot;);</p>
           /// <p>This method must have the ComUnregisterFunctionAttribute attribute.</p>           /// </summary>
           /// <param name='type'>Type to register</param>
           public void Register(System.Type type) {
           
        // your code here
           
           }

           /// Operation Unregister
           /// <summary>
           /// <p>Gets the key guid of the type: type.GUID.ToString(&quot;B&quot;);</p>
           /// <p>Gets using reflection the custom attributes of the type parameter of type ExtensionAttribute and if tool bar:</p>
           /// <p>Deletes the registry key: Registry.ClassesRoot.CreateSubKey(@&quot;CLSID&quot;).DeleteSubKeyTree(guid);</p>           /// </summary>
           /// <param name='type'>Type to unregister</param>
           public void Unregister(System.Type type) {
           
        // your code here
           
           }
         }

       }
     }
   }
 }
