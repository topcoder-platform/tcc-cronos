/// CSharpClass File "DefaultExtensionEventsManager.cs" generated by Poseidon for UML.
/// Poseidon for UML is developed by <A HREF="http://www.gentleware.com">Gentleware</A>.
/// Generated with <A HREF="http://jakarta.apache.org/velocity/">velocity</A> template engine.

 namespace Orpheus_Client_Logic_for_MSIE {
   namespace Orpheus {
     namespace Plugin {
       namespace InternetExplorer {
         namespace EventsManagers {

           ///  <summary>
           ///  <!--StartFragment--><span style="mso-bidi-font-weight:bold">This class is the default implementation of the <em style="mso-bidi-font-style:normal">IExtensionEventsManager</em> interface.</span>
           ///  <p><span style="mso-bidi-font-weight:bold">This class restores using a handler factory, the event handlers, creates a delegate for each handler and stores them, to be invoked when an event is fired.</span></p>
           ///  <p><!--EndFragment--><strong>Thread safety</strong>: This class is thread safe. It locks on the dictionary inside the methods.</p>           ///  </summary>
           public class DefaultExtensionEventsManager : Orpheus.Plugin.InternetExplorer.IExtensionEventsManager {

             /// Inner Classifiers

             ///  <summary>
             ///  </summary>
             public class ExtensionEventHandlerDelegate[] {
             };

             /// Attributes

             /// Attribute DefaultConfigurationNamespace
             /// <summary>
             /// <p>Represents the default configuration namespace.</p>             /// </summary>
             public Orpheus.Plugin.InternetExplorer.EventsManagers.Handlers.WebBrowserDocumentCompletedEventHandler.string DefaultConfigurationNamespace = "Orpheus.Plugin.InternetExplorer.EventsManagers";

             /// Attribute DefaultObjectFactoryNamespace
             /// <summary>
             /// <p>Represents the default Object Factory component namespace.</p>             /// </summary>
             public string DefaultObjectFactoryNamespace = "TopCoder.Util.ObjectFactory";

             /// Attribute extensionEventsHandlers
             /// <summary>
             /// <p>Represents a dictionary needed to store the delegates for every event.</p>
             /// <p>The dictionary is set in the constructor to a new HashTable. The reference is not changed afterwards. Can not be null or contain null objects.</p>
             /// <p>The keys are event names and the values are IList objects. The list contains all the handlers for the respective event. Handlers are added are removed from the dictionary in the AddEventHandler and RemoveEventHander methods.</p>             /// </summary>
             private readonly System.IDictionary extensionEventsHandlers = <<constructor>>;

             /// Attributes - AssociationEnd

             /// Association End extensionEventArgs_1
             public Orpheus.Plugin.InternetExplorer.ExtensionEventArgs extensionEventArgs_1;

             /// Association End extensionEventsHandlers
             private Orpheus.Plugin.InternetExplorer.ExtensionEventHandlerDelegate[] extensionEventsHandlers;

             /// Operations

             /// Constructor DefaultExtensionEventsManager
             /// <summary>
             /// <p>Constructor.</p>
             /// <p>Creates the event handlers factory based on a configured key, gets the event names from the configuration file and for each one gets the handlers and stores them.</p>
             /// <p><strong>Implementation details:</strong></p>
             /// <ol>
             /// <li>Reads the &quot;event_handler_factory&quot; key and creates the instance using the Object Factory.</li>
             /// <li>
             /// Reads the &quot;events&quot; property and for each event name:
             /// <ol>
             /// <li>Invokes the factory for the array of handlers, for each one creates a delegate, and stores them in the dictionary for the event name.</li>
             /// </ol>
             /// </li>
             /// </ol>             /// </summary>
             /// <exception>ConfigurationException if there are problems with the configuration file or can not create the factory.</exception>
             /// <exception>EventHandlerCreationException propagated from the factory,</exception>
             public DefaultExtensionEventsManager() {
             }

             /// Constructor DefaultExtensionEventsManager
             /// <summary>
             /// <p>Constructor.</p>
             /// <p>Creates the event handlers factory based on a configured key, gets the event names from the configuration file and for each one gets the handlers and stores them.</p>
             /// <p>Uses the custom namespaces to get the ConfigManager and Object Factory.</p>
             /// <p><strong>Implementation details:</strong></p>
             /// <ol>
             /// <li>Reads the &quot;event_handler_factory&quot; key and creates the instance using the Object Factory.</li>
             /// <li>
             /// Reads the &quot;events&quot; property and for each event name:
             /// <ol>
             /// <li>Invokes the factory for the array of handlers, for each one creates a delegate, and stores them in the dictionary for the event name.</li>
             /// </ol>
             /// </li>
             /// </ol>
             /// <p></p>             /// </summary>
             /// <exception>ConfigurationException if there are problems with the configuration file or can not create the factory.</exception>
             /// <exception>EventHandlerCreationException propagated from the factory,</exception>
             /// <exception>ArgumentNullException if any parameter is null.</exception>
             /// <exception>ArgumentException if parameter is empty string.</exception>
             /// <param name='configurationNamespace'>Custom configuration namespace.</param>
             /// <param name='objectFactoryNamepsace'>Custom object factory namespace.</param>
             public DefaultExtensionEventsManager(string configurationNamespace, string objectFactoryNamepsace) {
             }

             /// Constructor DefaultExtensionEventsManager
             /// <summary>
             /// <p>Constructor.</p>
             /// <p>Gets the event names from the configuration file and for each one gets the handlers and stores them.</p>
             /// <p><strong>Implementation details:</strong></p>
             /// <ol>
             /// <li>
             /// <p>Sets the field to the parameter value.</p>
             /// </li>
             /// <li>
             /// <p>Reads the &quot;events&quot; property and for each event name:</p>
             /// <ol>
             /// <li>Invokes the factory for the array of handlers, for each one creates a delegate, and stores them in the dictionary for the event name.</li>
             /// </ol>
             /// </li>
             /// </ol>
             /// <p></p>             /// </summary>
             /// <exception>EventHandlerCreationException propagated from the factory,</exception>
             /// <exception>ConfigurationException if there are problems with the configuration file </exception>
             /// <exception>ArgumentNullException if any parameter is null.</exception>
             /// <exception>EventHandlerCreationException propagated from the factory,</exception>
             /// <param name='extensionEventHandlerFactory'>The event handler factory to use.</param>
             public DefaultExtensionEventsManager(Orpheus.Plugin.InternetExplorer.EventsManagers.IExtensionEventHandlerFactory extensionEventHandlerFactory) {
             }

             /// Operation AddEventHandler
             /// <summary>
             /// <p>This methods adds the delegate for the specified event. When the event is fired the delegate will be invoked.</p>
             /// <p><strong>Implementation details:</strong></p>
             /// <p>Gets from the dictionary the Ilist for the event name as the key. If there is none creates a new ArrayList and adds it to the dictionary.</p>
             /// <p>Adds in the list if not added already the handler. Returns true if added false otherwise.</p>
             /// <p>This method also locks on the dictionary.</p>             /// </summary>
             /// <exception>ArgumentNullException if any parameter is null.</exception>
             /// <exception>ArgumentException if  parameter is empty string.</exception>
             /// <param name='eventName'>The event name to add the handler to.</param>
             /// <param name='eventHandler'>The event handler.</param>
             /// <returns> Returns true if added false otherwise.</returns>
             public bool AddEventHandler(string eventName, Orpheus.Plugin.InternetExplorer.ExtensionEventHandlerDelegate eventHandler) {
             
        // your code here
        return bool;
             
             }

             /// Operation RemoveEventHandler
             /// <summary>
             /// <p>This methods removes the delegate for the specified event.</p>
             /// <p><strong>Implementation details:</strong></p>
             /// <p>Gets from the dictionary the IList for the event name as the key. If there is none returns false;</p>
             /// <p>Removed the delegate from the list if found</p>
             /// <p>Returns true if found and removed false otherwise.</p>
             /// <p>This method also locks on the dictionary.</p>
             /// <p></p>             /// </summary>
             /// <exception>ArgumentNullException if any parameter is null.</exception>
             /// <exception>ArgumentException if parameter is empty string.</exception>
             /// <param name='eventName'>The event name to remove the handler from.</param>
             /// <param name='eventHandler'>The event handler.</param>
             /// <returns>True if removed false otherwise.</returns>
             public bool RemoveEventHandler(string eventName, Orpheus.Plugin.InternetExplorer.ExtensionEventHandlerDelegate eventHandler) {
             
        // your code here
        return bool;
             
             }

             /// Operation GetEventHandlers
             /// <summary>
             /// <p>This method&nbsp; returns the registered delegates for the specified event.</p>
             /// <p><strong>Implementation details:</strong></p>
             /// <p>Gets from the dictionary the IList for the event name as the key. If there is none returns empty array.</p>
             /// <p>Copies all elements to an array.</p>
             /// <p>This method also locks on the dictionary.</p>
             /// <p></p>             /// </summary>
             /// <exception>ArgumentNullException if any parameter is null.</exception>
             /// <exception>ArgumentException if parameter is empty string.</exception>
             /// <param name='eventName'>The event name.</param>
             /// <returns>The array of delegates registered for the current event. Empty array is returned if none are registered.</returns>
             public Orpheus.Plugin.InternetExplorer.EventsManagers.DefaultExtensionEventsManager.ExtensionEventHandlerDelegate[] GetEventHandlers(string eventName) {
             
        // your code here
        return Orpheus.Plugin.InternetExplorer.EventsManagers.DefaultExtensionEventsManager.ExtensionEventHandlerDelegate[];
             
             }

             /// Operation FireEvent
             /// <summary>
             /// <p>This method fires the specifid event. As a result all registerd delegates for the event get invoked.</p>
             /// <p><strong>Implementation details:</strong></p>
             /// <p>Get the delegates from the event name and invokes each one passing the sender and the args objects.</p>             /// </summary>
             /// <exception>ArgumentNullException if any parameter is null.</exception>
             /// <exception>ArgumentException if parameter is empty string.</exception>
             /// <exception>FireEventException to wrap any exceptions thrown while inoking the delegates.</exception>
             /// <param name='eventName'>The event to fire.</param>
             /// <param name='sender'>The sender object to pass to handlers.</param>
             /// <param name='args'>The args object to pass to handlers.</param>
             public void FireEvent(string eventName, object sender, Orpheus.Plugin.InternetExplorer.ExtensionEventArgs args) {
             
        // your code here
             
             }
           }

         }
       }
     }
   }
 }
