{\rtf1\ansi\ansicpg936\deff0\deflang1033\deflangfe2052{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\fswiss\fprq2\fcharset0 Arial;}{\f2\fmodern\fprq1\fcharset0 Courier New;}{\f3\froman\fprq2\fcharset2 Symbol;}{\f4\fnil\fprq1\fcharset134 \'d0\'c2\'cb\'ce\'cc\'e5;}{\f5\fmodern\fprq1\fcharset134 \'d0\'c2\'cb\'ce\'cc\'e5;}}
{\colortbl ;\red0\green0\blue255;\red0\green128\blue0;\red128\green128\blue128;\red255\green0\blue0;}
{\stylesheet{ Normal;}{\s1 heading 1;}{\s2 heading 2;}{\s3 heading 3;}}
{\*\generator Msftedit 5.41.21.2500;}\viewkind4\uc1\pard\keepn\nowidctlpar\s1\sb120\sa60\sl240\slmult0\tx720\ul\b\f0\fs28 Client Logic for MSIE 1. 0 Component Specification\par
\pard\li720\sa120\ulnone\b0\fs20\par
\pard\keepn\nowidctlpar\s1\sb120\sa60\sl240\slmult0\tx360\b\f1\fs24 1.\tab Design\par
\pard\b0\f0\par
\pard\li720 This component provides the client side logic needed to transform Internet Explorer into an Orpheus client by integrating the client logic into an Internet Explorer extension.\par
\par
The client side logic is implemented in this component in the \i MsieClientLogic\i0  class and is completely decoupled from the mechanism to create an Internet Explorer extension.\par
\par
This component also provides a generic mechanism for creating Internet Explorer extensions with the \i WebBrowserSite\i0  and \i ToolBand\i0  classes. \par
\pard\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1\fs20 1.1\tab Design Patterns \par
\pard\b0\f0\fs24\par
\pard\li720\i IExtensionEventHandlerFactory \i0 is an \b abstract factory \b0 (strategy) pattern. It provides an interface for creating the custom \i IExtensionEventHandler \i0 instances.\par
Different \b strategies \b0 for IEventsManager, \i IWebBrowserWindowNavigator \i0 and \i IPersistence \i0 can also be plugged in.\par
\par
The \i ExtensionEventHandlerDelegate\i0  wraps the \b listener\b0  methods to be invoked when an event is fired. \par
\pard\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1\fs20 1.2\tab Industry Standards \par
\pard\b0\f0\fs24\par
\pard\li720 COM, DOM, URI, HTML, JavaScript\par
\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1\fs20 1.3\tab Required Algorithms\f0\par
\pard\b0\fs24\par
\pard\keepn\nowidctlpar\s3\sb120\sa60\sl240\slmult0\tx0\i\f1\fs20 1.3.1\tab Overview\par
\pard\li720\i0\f0\fs24\par
This component as the requirements asks for, provides the client side logic needed to transform Internet Explorer into an Orpheus client by integrating the client logic into an Internet Explorer extension.\par
\par
The client side logic is implemented in this component in the \i MsieClientLogic\i0  class and is completely decoupled from the mechanism to create an Internet Explorer extension.\par
\par
To create an extension for the Internet Explorer several interfaces are exposed and need to be implemented by the extension. The extension must also be registered as a COM component, and a value must be added in the registry, in order for Internet Explorer to be aware of the extension.\par
\par
This component provides a generic mechanism for creating Internet Explorer extensions with the \i WebBrowserSite\i0  and \i ToolBand\i0  classes. Clients will need to extend the \i ToolBand\i0  class in order to create the user interface for the extension, which by extending from \i ToolBand \i0 will take the form of an Internet Explorer tool band. \par
\par
The details of how to integrate the client side login into the extension are presented in the demo section of this document.\par
\par
\pard\keepn\nowidctlpar\s3\sb120\sa60\sl240\slmult0\tx0\i\f1\fs20 1.3.2\tab How it works\par
\pard\li720\i0\f0\fs24\par
Whenever an Internet Explorer window is opened, regardless of how it was opened, it will look in the registry for any extensions and will create a new extension every time. So, for every opened web browser window there will be an associated extension instance. The extension instance is a \i ToolBand\i0  derived class.\par
\par
To have all these extension instances work with the same client logic instance, the client logic is created as a singleton by the extensions and as a result browser windows opened by the main browser window will share the same client logic singleton instance. \par
\par
By sharing the same client logic instance, all the extension instances will have the ability to customize a new web browser window with the same object. Customizing the web browser implies providing a \i IDocHostUIHandler\i0  interface to the web browser. Through this interface, the web browser can query things like the scripting object or context menu to display. Internet Explorer provides the \i ICustomDoc\i0  interface so you can pass Internet Explorer your \i IDocHostUIHandler\i0  implementation. The \i GetExternal\i0  method of this interface returns to the web browser an object that it will make available to JavaScript code. The object\rquote s properties and methods will then be available to any page displayed in the browser through the document's external object.\par
\par
\pard\par
\pard\keepn\nowidctlpar\s3\sb120\sa60\sl240\slmult0\tx0\i\f1\fs20 1.3.3\tab Client Side Logic\par
\pard\li720\i0\f0\fs24\par
The client side logic is implemented in the \i MsieClientLogic\i0  class. This class encapsulates all the required functionality needed to behave as an Orpheus application client.\par
\par
It exposes an events manager through which event handlers can be specified either through the configuration file, or at development time. \par
\par
A persistence mechanism is used to store values between browser restarts in the registry for every user.\par
\par
The navigation in the main browser window or a new window is abstracted in the \i IWebBrowserWindowNavigator\i0 . The implementation provided reuses a popup browser window, which it opens by accessing the main browser DOM using \i window.open\i0 .\par
\par
\pard\keepn\nowidctlpar\s3\sb120\sa60\sl240\slmult0\tx0\i\f1\fs20 1.3.4\tab Internet Explorer Extensions\par
\pard\li720\i0\f0\fs24\par
Browser extensions allow developers to provide easy access to their browser enhancements by adding elements to the default user interface. Beginning with Internet Explorer 5, this feature allows developers to add entries into the Tools menu and buttons to the toolbar.\par
\par
Explorer extensions, explorer bars, tool bands, or desk bands although they can be used much like normal windows are COM objects that exist within a container. Explorer Bars are contained by Internet Explorer, and desk bands are contained by the Shell. While they serve different functions, their basic implementation is very similar. The primary difference is in how the band object is registered, which in turn controls the type of object and its container. \par
\par
All band objects must implement \i{\field{\*\fldinst{HYPERLINK "http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/ideskband/ideskband.asp" }}{\fldrslt{IDeskBand}}}\i0\f0\fs24 , \i{\field{\*\fldinst{HYPERLINK "http://msdn.microsoft.com/library/en-us/com/html/e688136e-e06b-46ba-bec9-b8db2f9c468d.asp" }}{\fldrslt{IObjectWithSite}}}\i0\f0\fs24  and \i IPersistStream\i0  interfaces.  In addition to registering their class identifier (CLSID), the Explorer Bar and desk band objects must also be registered for the appropriate component category. Registering the component category determines the object type and its container.\par
\pard\fi720\par
\pard\li720 For the tool bands to be integrated into Internet Explorer information must be added to the registry. Tool bands must have their object's CLSID registered with Internet Explorer. To do this, assign a value under \b HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Internet Explorer\\Toolbar\b0  named with the tool band object's CLSID\~GUID.\par
\par
More details on creating browser extensions can be found here: http://msdn.microsoft.com/library/default.asp?url=/workshop/browser/ext/extensions.asp\par
\pard\par
\pard\keepn\nowidctlpar\s3\sb120\sa60\sl240\slmult0\tx0\i\f1\fs20 1.3.5\tab HTTP Request Event Handler \par
\pard\i0\f0\fs24\par
\pard\li720 These event handlers should be configured for user interface sharing the same common functionality to make a web request to a configured URL and display the result in the browser window, or in a reusable popup window.\par
\par
\pard\fi-360\li1080\tx1080 1.\tab Reads from the configuration file and based on the event name the URL of the page to request (the <event name>_url property).\par
2.\tab Reads from the configuration file and based on the event name whether the page should be displayed in a new window (the <event name>_new_window property).\par
\pard\fi-360\li1080 3.\tab Reads from the configuration file and based on the event name the method to use for the request (the <event name>_method property).\par
\pard\fi-360\li1080\tx1080 4.\tab Creates a new web request (WebRequest.Create) for the configured URL.\par
\pard\fi-360\li1080 5.\tab Sets the method to use to the request to the configured value.\par
\pard\fi-360\li1080\tx1080 6.\tab Gets the response stream of the request.\par
\pard\fi-360\li1080 7.\tab It then uses the web browser window navigator from the context object to set the content to the browser.\par
\pard\fi-360\li1080\tx1080 8.\tab Closes the response stream.\par
\pard\par
\par
\pard\keepn\nowidctlpar\s3\sb120\sa60\sl240\slmult0\tx0\i\f1\fs20 1.3.6\tab Displayed Page Changed Event Handler \f0\par
\pard\fi360\sb100\sa100\i0\fs24 Below are the steps taken when a new page is displayed in the browser.\par
\pard\fi-360\li720\sb100\sa100\tx720 1.\tab Get the URL of the current page: Gets the browser document from the browser and then the location {\field{\*\fldinst{HYPERLINK "http://www.aisto.com/roeder/dotnet/Default.aspx?Object=10" \\\\o "System.Windows.Forms.UnsafeNativeMethods+IHTMLLocation" }}{\fldrslt{IHTMLLocation}}}\f0\fs24  location = document.{\field{\*\fldinst{HYPERLINK "http://www.aisto.com/roeder/dotnet/Default.aspx?Object=11" \\\\o "UnsafeNativeMethods.IHTMLLocation System.Windows.Forms.UnsafeNativeMethods+IHTMLDocument2.GetLocation();" }}{\fldrslt{GetLocation}}}\f0\fs24 (); Gets the text URL: {\field{\*\fldinst{HYPERLINK "http://www.aisto.com/roeder/dotnet/Default.aspx?Object=12" \\\\o "System.String" }}{\fldrslt{string}}}\f0\fs24  url = location.{\field{\*\fldinst{HYPERLINK "http://www.aisto.com/roeder/dotnet/Default.aspx?Object=13" \\\\o "string System.Windows.Forms.UnsafeNativeMethods+IHTMLLocation.GetHref();" }}{\fldrslt{GetHref}}}\f0\fs24\par
\pard\fi-360\li720\sb100\sa100 2.\tab Creates a new URI from the URL and gets the host name.\par
3.\tab Test the Bloom Filter for the host name. If found then:\par
\pard\fi-432\li1152\sb100\sa100\tx1152 3.1.\tab Read from the configuration file the configured URL(document_completed_url property), set the host parameter using string.Format.\par
\pard\fi-432\li1152\sb100\sa100 3.2.\tab Create a new web request for the created URL. Get the response stream, the result stream should be interpreted as number. If the number is not 0 then\par
\pard\fi-504\li1584\sb100\sa100\tx1800 3.2.1.\tab Read from the configuration file the configured URL(document_completed_0_responce_url property), set the host parameter and direct the web browser window navigator to the new location to open in a new window.\par
\pard\keepn\nowidctlpar\s3\sb120\sa60\sl240\slmult0\tx0\i\f1\fs20 1.3.7\tab Polling for Updates Event Handler\f0\par
\pard\i0\fs24\par
\pard\li360 The steps to follow when handling the poll for updates event:\par
\pard\fi-360\li720\sb100\sa100\tx720 1.\tab Reads from the configuration file the configured URL(polling_url property).\par
\pard\fi-360\li720\sb100\sa100 2.\tab Creates a new web request (WebRequest.Create) to the configured URL.\par
3.\tab Gets from the persistence the \ldblquote timestamp\rdblquote  value.\par
4.\tab The URL is constructed with the update timestamp of the feed (string.Format(url, timestamp))\par
5.\tab Gets the response stream from the request.\par
6.\tab Parses the response stream using the RSS parser into a \i RSSFeed\i0  document.\par
\pard\fi-360\li720\sb100\sa100\tx720\tx1080 7.\tab For each \i RSSItem\i0  in the feed items:\par
\pard\fi-432\li1152\sb100\sa100\tx1080\tx1152 7.1.\tab If the content is of type text, HTML or XHTML sets the content to be displayed in the new window using the web browser window navigator.\par
\pard\fi-432\li1152\sb100\sa100 7.2.\tab If the content is of type \ldblquote application/x-tc-bloom-filter\rdblquote  restore the bloom filter from the serialized content of the feed item.\par
\pard\fi-360\li720\sb100\sa100\tx720 8.\tab Persist the feed timestamp.\par
9.\tab Close the response stream.\par
\pard\li720\par
\pard\keepn\nowidctlpar\s3\sb120\sa60\sl240\slmult0\tx0\i\f1\fs20 1.3.8\tab Test Object Handler\f0\par
\pard\li720\i0\fs24\par
\pard\li360\sb100\sa100 The handler will use the \i ExtensionEventArgs\i0  \i params\i0  array to get an \i IHtmlElement\i0  object passed to the handler. \par
\pard\fi-360\li720\sb100\sa100\tx720\tx1080 1.\tab Gets the \i IHTMLElement\i0  for the \i parameters\i0  array.\par
\pard\fi-360\li720\sb100\sa100 2.\tab Get the child elements of the element and for each one:\par
\pard\fi-432\li1152\sb100\sa100\tx720\tx1152 2.1.\tab Get the inner text trim the string, remove (blank, tab, CR, and LFCharacters) and normalize all sequences of white space to a single space, and folding all characters to lower case.\par
\pard\fi-432\li1152\sb100\sa100 2.2.\tab Append all the elements text and use the hash algorithm to generate the SHA-1 hash of the UTF-8 encoding of the Unicode code point sequence.\par
\pard\fi-360\li720\sb100\sa100\tx720 3.\tab Get from the persistence the stored hash. Compare to this hash and if they match: \par
\pard\fi-432\li1152\sb100\sa100\tx1152 3.1.\tab Read from the configuration file the \ldblquote test_object_url\rdblquote  property\par
\pard\fi-432\li1152\sb100\sa100 3.2.\tab The current game ID, the domain, the target sequence number, and the normalized and UTF-8 encoded text from which the hash was computed will be specified in the request URL as query parameters. (string.Format)\par
3.3.\tab Create a web request (WebRequest.Create) and get the response stream.\par
3.4.\tab Use the web browser window navigator from the context to show the response content.\par
\pard\li360\sb100\sa100\par
\pard\keepn\nowidctlpar\s3\sb120\sa60\sl240\slmult0\tx0\i\f1\fs20 1.3.9\tab Generating the Remote Callable Wrappers\f0\par
\pard\li720\i0\fs24\par
\pard\fi720 The Remote Callable Wrapper types can be generated using IDL files.\par
\par
\pard\li720 The types required are defined in the mshtmhst.h header file and the mshtmhst.idl IDL file and the ocidl.h header file and ocidl.idl IDL file from the Platform SDK.\par
\par
The IDL files will be used to generate the managed proxies for the required types.\par
\par
To generate the wrapper for the \i IObjectWithSite\i0  interface the IDL file should be created as:\par
\par
\f2\fs18 [\par
    uuid(854B9347-7147-40ce-9DE7-1DBCD761D4CE)\par
]\par
library Orpheus.Plugin.InternetExplorer.Interop \par
\{\par
    import "OCIdl.Idl";\par
   \par
    interface IObjectWithSite;\par
\};\f0\fs24\par
\par
All the other required types should be added to this file.\par
\par
To generate the type library:\par
\par
midl \f2\fs18 Orpheus\f0\fs24 .idl /tlb \f2\fs18 Orpheus\f0\fs24 .tlb\par
\par
\pard\li720\tx6495 To convert the COM type library into common language assembly:\par
\par
\pard\li720 tlbimp \f2\fs18 Orpheus\f0\fs24 .tlb /out:\f2\fs18  Orpheus.Plugin.InternetExplorer.Interop\f0\fs24 .dll\par
\par
\pard\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1\fs20 1.4\tab Component Class Overview\par
\pard\b0\f0\fs24\par
\pard\li720\b WebBrowserSite\par
\b0\par
This class is the base class of the Internet Explorer extension model and provides for derived classes a \i site\i0  within the browser. In general, a \i site\i0  is an intermediate object placed in the middle of the container and each contained object. \par
This class implements \i IObjectWithSite\i0  interface so it's container can supply it with an interface pointer for its site object. Then, this class, can communicate directly with its site. \par
A container can pass the \i IUnknown\i0  pointer of its site to an object through \i{\field{\*\fldinst{HYPERLINK "ms-help://MS.VSCC.v80/MS.MSDN.v80/MS.MOBEMBDEV.v10.en/apisp/html/sp__mdref_iobjectwithsite_setsite_.htm" }}{\fldrslt{IObjectWithSite.SetSite}}}\i0\f0\fs24 . Callers can also retrieve the latest site passed to \i IObjectWithSite.SetSite\i0  through \i{\field{\*\fldinst{HYPERLINK "ms-help://MS.VSCC.v80/MS.MSDN.v80/MS.MOBEMBDEV.v10.en/apisp/html/sp__mdref_iobjectwithsite_getsite_.htm" }}{\fldrslt{IObjectWithSite.GetSite}}}\i0\f0\fs24 . This usage provides a hooking mechanism, allowing third parties to intercept calls from an object to its container site object.\par
This class extends the Control class to allow derived classes to build their user interface.\tab\par
\par
Together with the \i ToolBand\i0  class, both classes provide a generic mechanism for creating Internet Explorer extensions. These classes are decoupled for the intended purpose of this component to provide the client side logic for a web application. The usage scenario is to derive the \i ToolBand\i0  class and there hook the client logic functionality implemented in the \i MsieClientLogic\i0  class.\par
\pard\par
\b\tab ToolBand\par
\b0\par
\pard\li720 This class extends the \i WebBrowserSite\i0  and implements the \i IDeskBand\i0  interface in order to provide a base class for all tool band objects. The \i IDeskBand\i0  interface is used by the browser to retrieve information about a band object.\par
\pard\par
\b\tab MsieClientLogic\par
\b0\tab\tab\par
\pard\li720 This class implements the client-side logic for interacting with the web application. This client logic will be incorporated into an Internet Explorer extension that enables Internet Explorer to be used as a client.\par
\pard\li720\tx3720\tab\par
\pard\li720 This class is decoupled from the Internet Explorer extension mechanism, to give clients a great level of flexibility when incorporating this logic into an Internet Explorer extension. \par
\pard\par
\tab It is responsible with the creation of the logic objects through the configuration file \tab and using the Object Factory component. \par
\par
\pard\li720 It hooks to web browser events in order to invoke component event handlers when a new page is displayed in the browser. It also starts a timer and invokes event handlers on regular time intervals.\par
\pard\par
\pard\li720 This class can be used as a singleton, as well. The reason for using this class as a singleton is to have the same instance of this class for multiple opened browser windows. The way this works is as follows: when Internet Explorer is started it looks in the registry for an extension object and creates it using its GUID. In this case the extension will be some derived class of \i ToolBand \i0 class. So every web browser window, regardless how it was opened, will have a different instance of a derived \i ToolBand \i0 class. In order for web browser windows, opened by the main web browser like for example using \i window.open, \i0 to have a reference to the same \i MsieClientLogic \i0 object they must use it as a singleton.\par
 \par
One more requirement for the clients is to invoke the \i CustomizeWebBrowser\i0  method whenever a new window is opened and a new extension is created, passing the newly obtain reference of the web browser, in order to provide the browser with the same customization like scripting object or custom context menu.\par
\pard\par
\b\tab DefaultDocHostUIHandler\par
\b0\tab\par
\pard\li720 This class implements the \i IDocHostUIHandler\i0  interface and provides the means to extend the Internet Explorer Document Object Model (DOM) with objects, methods, and properties. \par
\pard\li720\sb100\sa100 This is done by providing MSHTML a pointer to the \i IDispatch\i0  interface for the COM automation object that implements the custom object (\i ScriptingObject\i0  class) properties, and methods. These objects, properties, and methods will then be available to any page displayed by the web browser through the document's {\field{\*\fldinst{HYPERLINK "http://msdn.microsoft.com/workshop/author/dhtml/reference/objects/external.asp" }}{\fldrslt{external}}}\f0\fs24  object.\par
Instances of this class are created by the \i MsieClientLogic\i0  class and are set to the browser. The only requirement on \i IDocHostUIHandler\i0  implementations is to provide a constructor with a (\i MsieClientLogic\i0 ) parameter\par
There is only one method that this class actually implements, the \i GetExternal\i0  method which will set the pointer to the scripting object created by this class.\par
\pard\tab\b ScriptingObject\par
\par
\pard\li720\b0 This class represents the object that will be exposed to page JavaScript code. \par
\pard\li720\sb100\sa100 The browser will invoke on the \i IDocHostUIHandler\i0  the \i GetExternal\i0  method which will provide to the browser the scripting object, which web pages will be able to access through the external object:\par
\pard\li720\f2\fs18 function testScripting()\par
\{\par
\tab  //get the scripting object interface\par
\tab  var scriptingObject = window.external;\par
\~\~\~\~\~\~\~\~//invoke it\par
\~\~\~\~\~\~\~\~scriptingObject.LoggedIn();\line\}\f0\fs24\par
\pard\li720\sb100\sa100 This class provides all the methods required to be accessible from JavaScript.\par
Scripting objects are created by the \i MsieClientLogic\i0  which uses the Object Factory to create the object using a (\i MsieClientLogic\i0 ) constructor. Scripting objects must be set the Com visible attribute set to true.\par
\pard\fi720\sb100\sa100 This class should be marked with this attribute: [ComVisible(true)].\par
\pard\sb100\sa100\b\tab IExtensionEventsManager\par
\pard\li720\b0 This interface defines the contract that is required for any extension events manager to implement. An events manager is responsible for managing the delegates for every specific event identified by a name and to invoke them when that specific event is fired.\par
\pard\tab\par
\tab\b ExtensionEventArgs\par
\b0\par
\tab Event arguments class for event handlers. \par
\pard\li720\sb100\sa100 This class holds a reference to the context object, and provides handlers with the event name as well, for which they were invoked. As extra flexibility it also allows clients to pass to event handlers any object through the parameters array. The handlers will need to know of any of these objects if they are to use it.\par
\pard\b\tab IWebBrowserWindowNavigator\par
\tab\par
\pard\li720\b0 This interface defines the contract that is required for any browser window navigator to implement. A browser window navigator is responsible for displaying a new page to the user either inside the browser or in a new window. \par
\pard\li720\sb100\sa100 This component provides an implementation of this interface that reuses an opened popup window to display the web pages.\par
\pard\sb100\sa100\b\tab IPersistence\par
\pard\li720\b0 This interface defines the contract that is required for any persistence mechanism to implement. A persistence mechanism is responsible for saving and retrieving simple values for a specified key. \par
\pard\li720\sb100\sa100 This component provides an implementation of this interface that stores per user the values in the registry.\par
\pard\sb100\sa100\b\tab DefaultExtensionEventsManager\par
\b0\tab This class is the default implementation of the \i IExtensionEventsManager \i0 interface. \par
\pard\li720\sb100\sa100 This class restores using a handler factory, the event handlers, creates a delegate for each handler and stores them, to be invoked when an event is fired.\par
\pard\b\tab IExtensionEventHandlerFactory\par
\b0\par
\pard\li720 This interface defines the contract that is required for any event handler factory to implement. A event handler factory is responsible for creating the \i IExtensionEventHandler\i0  implementation based on a specified event name. The event name is simply used here to uniquely identify the required handler(s) implementation that needs to be created. \par
\pard\li720\sb100\sa100 This component provides one implementation of this interface which uses the name to get from the configuration file the key, and the Object Factory component to create, using the key, the specified implementation(s).\par
\pard\b\tab IExtensionEventHandler\par
\pard\li720\sb100\sa100\tx6949\b0 This interface defines the contract that is required for any event handler to implement. An event handler will be given a context object which holds all the details of the current extension.\par
For added flexibility to the design, a factory is used to create implementations of this interface based on a event name.\par
This component provides four implementations of this interface. Each one is responsible for handling a different type of event, all sharing the same mechanism to be created and invoked.\b\tab\b0\par
\pard\b\tab DefaultExtensionEventHandlerFactory\par
\par
\tab\b0 This class is an implementation of the \i IExtensionEventHandlerFactory\i0  interface. \par
\pard\li720\sb100\sa100 This implementation will use the specified event name to get from the configuration file a value representing a key. This key will be used by the Object Factory component to create the required \i IExtensionEventHandler\i0  implementation. By using Object Factory component, constructor parameter values can be specified for the created implementation. The details of how to configure the Object Factory component can be found in the component\rquote s specification document.\par
\pard\b\tab HttpRequestUserInterfaceEventHandler\par
\tab\par
\tab\b0 This class is an implementation of the \i IExtensionEventHandler\i0  interface. \par
\pard\tx1020\tab\par
\pard\li720 This event handler should be configured in the configuration file for user interface generated events, such as login button pressed. Most of these events require a HTTP request to be made to a URL and the result displayed in either the main browser window or a popup window.\par
\pard\li720\sb100\sa100 This class constructs the URL of the page to request and then directs the browser navigator to the specified URL.\par
\pard\b\tab WebBrowserDocumentCompletedEventHandler\par
\par
\tab\b0 This class is an implementation of the \i IExtensionEventHandler\i0  interface. \par
\pard\li720\sb100\sa100 It performs a request to the server, if needed and gets a numeric value based on which it will direct the browser to a new page.\par
\pard\b\tab PollingEventHandler\par
\par
\tab\b0 This class is an implementation of the \i IExtensionEventHandler\i0  interface. \tab  \par
\pard\fi720\sb100\sa100 This event handler will be invoked at regular intervals or through the scripting method.\par
\pard\b\tab TestObjectEventHandler\par
\par
\tab\b0 This class is an implementation of the \i IExtensionEventHandler\i0  interface.\b\par
\par
\pard\fi720 RegistryPersistence\par
\par
\b0 This class is an implementation of the \i IPersistence\i0  interface. \par
\pard\fi720\sb100\sa100 It used Registry to save the values.\par
\b DefaultWebBrowserWindowManager\par
\pard\fi720\b0 This class is an implementation of the \i IWebBrowserNavigator\i0  interface. \par
\pard\li720\sb100\sa100 It will be responsible for displaying the requested page or the provided content inside either the main browser window or inside a opened and reused window. \par
The new opened window will have the same customization object set to it as the main browser window. When the new window is opened, the Internet Explorer will load the extension object again. The extension object, if used as depicted in the component specifications, will get the same instance of the \i MsieClientLogic\i0  by using the singleton of the class, and will call the CustomizeWebBrowser method which will set the same customization object to the newly opened browser.\par
\pard\fi720\b ExtensionInstaller\par
\b0\par
Installer class for Internet Explorer Extensions. \par
\pard\li720\sb100\sa100 Extensions must be set with the \i ExtensionAttribute\i0  in order to be recognized by the installer.\par
\pard\fi720\b ExtensionAttribute\par
\par
\pard\li720\b0 Extension attribute class. Tool band objects that need to be installed must be set with this attribute.\par
\pard\b\par
\b0\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1\fs20 1.5\tab Component Exception Definitions\par
\pard\b0\f0\fs24\par
\pard\li720\b ClientLogicExtensionException\par
\b0\par
Base exception for the exceptions thrown by this component.\par
\par
\b ConfigurationException\par
\par
\pard\b0\tab Exception to signal any problems with the configuration file and the Object Factory.  \par
\par
\b\tab SiteSettingException\par
\pard\li720\b0\par
Exception to signal any problems when setting the browser site and getting a reference to the host browser.  \par
\pard\par
\pard\fi720\b EventHandlerCreationException\par
\pard\b0\par
\tab Exception to signal any problems when creating the event handlers for a event.  \par
\par
\pard\fi720\b HandleEventException\par
\b0 Exception to signal any problems when handling an event.\par
\b\par
WebBrowserCustomizationException\par
\par
\pard\li720\b0 Exception to signal any problems when customizing the browser by providing a IDocHostUIHandler.\par
\par
\b FireEventException\par
\par
\b0 Exception to signal any problems while firing and handling and event.  \par
\par
\pard\b\tab PersistenceException\par
\par
\b0\tab Exception to signal any problems with the persistence.  \par
\par
\b\tab WebBrowserNavigationException\par
\par
\b0\tab Exception to signal any problems with the browser navigator when setting a new location.  \par
\b\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\f1\fs20 1.6\tab Thread Safety\par
\pard\nowidctlpar\li720\sa120\sl240\slmult0\cf1\b0\i\f0\par
\pard\li720\cf0\i0\fs24 The Internet Explorer extension classes that make up the base for the extension user interface do not need to be thread safe. These classes are \b WebBrowserSite\b0  and \b ToolBand\b0 . \par
\par
The main class, the \b MsieClientLogic\b0  class will be used as a singleton for this reason the class and the aggregated objects should be thread safe. \par
There is also the scenario in which code can be run by multiple threads, when event handlers are invoked from different places at the same time, like from the browser window JavaScript code through the scripting object and from code. For this reason the classes involved in this scenario are expected to be thread safe. \par
\par
The classes that present thread safety issues are \b MsieClientLogic, DefaultWebBrowserWindowManager, DefaultExtensionEventsManager. \b0 All these classes use \lquote lock\rquote  in order to be thread safe.\par
\par
All the other classes involved in the client side logic are also thread safe by having no state or being immutable.\b\par
\pard\b0\par
\pard\li720 The used \b Bloom Filter \b0 component is not thread safe. The \b MsieCientLogic\b0  class will provide synchronization by locking.\par
\par
The \b RSS Library \b0 component is not thread safe. This component uses the \i Atom10Parser\i0  to parse content into an RSS object model, which is thread safe and should create a new instance of the object model on every request, thus every thread will have different instances.\par
\pard\sa120\fs20\par
\pard\fs24\tab The \b Hashing Utility \b0 component is thread safe.\par
\par
\tab Exception classes have no state and are thread safe.\par
\pard\sa120\fs20\par
\pard\keepn\nowidctlpar\s1\sb120\sa60\sl240\slmult0\tx360\b\f1\fs24 2.\tab Environment Requirements\tab\tab\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\fs20 2.1\tab Environment\par
\pard\li720\b0\f0\fs24 .Net Framework 1.1 \par
\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1\fs20 2.2\tab TopCoder Software Components\par
\pard\fi-360\li1440\tx1440\b0\f3\fs24\'b7\tab\b\f0 Object Factory 1.0\b0  for creating custom \i IExtensionEventHandler \i0 instances, the \i IExtensionEventHandlerFactory \i0 instance, the \i IDocHostUIHandler, the IPersistence, the IExtensioEventsManager \i0 implementations and the \i ScriptingObject.\i0\par
\pard\fi-360\li1440\f3\'b7\tab\b\f0 Configuration Manager 2.0\b0  for reading in configuration values.\par
\f3\'b7\tab\b\f0 Hashing Utility 1.0 \b0 to get the SHA1 hash for a value.\par
\f3\'b7\tab\b\f0 Bloom Filter 1.0 \b0 maintains the domains in the game.\b\par
\b0\f3\'b7\tab\b\f0 RSS Library 1.1 to \b0 parse feeds received from server and get the items.\b\par
\pard\li720\sa120\b0\fs20\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1 2.3\tab Third Party Components\par
\pard\li720\b0\f0\fs24 None.\par
\par
\pard\keepn\nowidctlpar\s1\sb120\sa60\sl240\slmult0\tx360\b\f1 3.\tab Installation and Configuration\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\fs20 3.1\tab Package Name\par
\pard\li720\b0\f0\fs24 Orpheus.Plugin.InternetExplorer.Interop - Runtime Callable Wrappers for the needed types\par
\pard\fi720 Orpheus.Plugin.InternetExplorer - main implementation package.\par
Orpheus.Plugin.InternetExplorer.EventsManagers \endash  the events manager implementations.\par
Orpheus.Plugin.InternetExplorer.EventsManagers.Factories - event handler factories\par
Orpheus.Plugin.InternetExplorer.Persistence \endash  persistence implementations\par
Orpheus.Plugin.InternetExplorer.WindowNavigators \endash  browser window navigators.\par
\pard\par
\pard\sa120\fs20\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1 3.2\tab Configuration Parameters\par
\pard\nowidctlpar\li720\sa120\sl240\slmult0\cf1\b0\i\f0\par
\pard\fi720\cf0\b\i0\fs24\par
Orpheus.Plugin.InternetExplorer.MsieClientLogic\par
\par
\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3278\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7337\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9322\pard\intbl Parameter\f1\fs20\cell\f0\fs24 Description\f1\fs20\cell\f0\fs24 Values\f1\fs20\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3278\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7337\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9322\pard\intbl\sa120\tx1710\b0 bloom_filter\f0\tab\cell\pard\intbl\sa120\f1 The Object Factory key where the BloomFilter is configured.\cell String. Required.\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3278\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7337\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9322\pard\intbl\sa120 window_navigator\cell The Object Factory key where the \i IWebBrowserWindowNavigator\par
\i0 implementation to use is configured.\cell String. Required.\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3278\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7337\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9322\pard\intbl\sa120 persistence\cell The Object Factory key where the \i IPersistence \i0 implementation to use is configured.\cell String. Required.\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3278\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7337\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9322\pard\intbl\sa120 extension_events_manager\cell The Object Factory key where the \i IExtensionEventsManager  \i0 implementation to use is configured.\cell String. Required.\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3278\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7337\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9322\pard\intbl\sa120 doc_host_ui_handler\cell The Object Factory key where the \i IDocHostUIHandler \i0 implementation to use is configured.\cell String. Required.\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3278\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7337\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9322\pard\intbl\sa120\tx1845 scripting_object\tab\cell\pard\intbl\sa120 The Object Factory key where the \i scripting object \i0 to create is configured.\cell String. Required.\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3278\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7337\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9322\pard\intbl\sa120 poll_interval\cell The interval in minutes to poll for updates.\cell Numeric. Required\cell\row\pard\fi720\b\f0\fs24\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\pard\sa120\fs20\par
\pard\fi720\sa120\par
\par
\f1 Orpheus.Plugin.InternetExplorer.EventsManagers.DefaultExtensionEventsManager\par
\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3278\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7281\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9266\pard\intbl\f0\fs24 Parameter\f1\fs20\cell\f0\fs24 Description\f1\fs20\cell\f0\fs24 Values\f1\fs20\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3278\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7281\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9266\pard\intbl\sa120\b0 event_handlers_factory\cell The Object Factory key where the \i  IExtensionEventHandlerFactory  \i0 implementation to use is configured.\f0\cell\f1 String. Required.\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3278\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7281\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9266\pard\intbl\sa120 events\cell Represents a list of events. Based on the event name the configured handlers are retrieved. Event names (ex: \i DocumentCompleted\i0 , \i LogIn\i0 , \i LogOut\i0 ) should be added here.\f0\cell\f1 Strings. Required.\cell\row\pard\fi720\sa120\b\f0\par
\par
\par
\par
\par
\par
\par
\par
\pard\sa120\par
\par
\pard\fi720\sa120\f1 Orpheus.Plugin.InternetExplorer.EventsManagers.Factories.\par
DefaultExtensionEventHandlerFactory\f0\par
\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3278\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7281\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9266\pard\intbl\fs24 Parameter\f1\fs20\cell\f0\fs24 Description\f1\fs20\cell\f0\fs24 Values\f1\fs20\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3278\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7281\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9266\pard\intbl\sa120\b0 <event name>_handlers\cell The name of the handlers configured to be invoked for the event. For each handler name there is another property: <handler name> _handler. Any number of handlers can be added here.\i\f0\cell\i0\f1 Strings. Required.\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3278\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7281\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9266\pard\intbl\sa120 <handler name>_handler\cell The Object Factory key where the \i  IExtensionEventHandler \i0 implementation to use is configured.\cell String. Required.\cell\row\pard\fi720\sa120\b\f0\par
\par
\par
\par
\par
\par
\par
\par
\pard\sa120\par
\pard\fi720\sa120\par
\f1 Orpheus.Plugin.InternetExplorer.EventsManagers.Handlers.\par
\pard\fi720\sa120\tqc\tx5063 HttpRequestUserInterfaceEventHandler\f0\tab\par
\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3278\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7281\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9266\pard\intbl\fs24 Parameter\f1\fs20\cell\f0\fs24 Description\f1\fs20\cell\f0\fs24 Values\f1\fs20\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3278\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7281\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9266\pard\intbl\sa120\b0 <event name>_url\cell The URL of the page to request as response to the event.\f0\cell\f1 String. Required.\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3278\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7281\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9266\pard\intbl\sa120 <event name>_new_window\cell Whether to display the result of the web request in a new window or not.\cell True or fale. Optional. Default=false.\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3278\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7281\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9266\pard\intbl\sa120 <event name>_method\cell The method to use for the request.\cell GET or POST. Optional. Default=Get.\cell\row\pard\fi720\sa120\b\f0\par
\par
\par
\par
\par
\par
\par
\pard\sa120\b0\par
\b\tab\f1 Orpheus.Plugin.InternetExplorer.EventsManagers.Handlers.\f0\tab\f1 WebBrowserDocumentCompletedEventHandler\f0\par
\par
\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3511\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7094\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9514\pard\intbl\fs24 Parameter\f1\fs20\cell\f0\fs24 Description\f1\fs20\cell\f0\fs24 Values\f1\fs20\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3511\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7094\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9514\pard\intbl\sa120\b0 document_completed_url\f0\cell\f1 The url to make the request to. The host parameter will be placed in string as \{0\}.\f0\cell\f1 String. Required.\f0\par
\f1 Ex:www.tc.com/?\f0\par
\pard\intbl\sa120\tx1140\f1 host=\{0\}\f0\tab\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3511\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7094\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9514\pard\intbl\sa120\f1 document_completed_0_responce_url\f0\cell\f1 The url to make the request to. The host parameter will be placed in string as \{0\}.\f0\cell\f1 String. Required.\par
Ex:www.tc.com/?\f0\par
\f1 host=\{0\}\f0\cell\row\pard\sa120\par
\par
\par
\par
\par
\par
\par
\b\tab\par
\pard\fi720\sa120\f1 Orpheus.Plugin.InternetExplorer.EventsManagers.Handlers.PoolingEventHandler\par
\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3211\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7024\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9514\pard\intbl\f0\fs24 Parameter\f1\fs20\cell\f0\fs24 Description\f1\fs20\cell\f0\fs24 Values\f1\fs20\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3211\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7024\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9514\pard\intbl\sa120\b0 rss_parser\f0\cell\f1 The Object Factory key of the IRSSParser implementation to use. Atom1.0 parser should be configured.\f0\cell\f1 String. Required.\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3211\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7024\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9514\pard\intbl\sa120\tqc\tx1551 polling _url\f0\tab\cell\pard\intbl\sa120\f1 The polling url.The timestamp parameter will be placed in string as \{0\}.\cell String. Required.\par
Ex:www.tc.com/?\par
timestamp=\{0\}\cell\row\pard\sa120\f0\par
\tab\par
\par
\par
\par
\par
\par
\par
\pard\fi720\sa120\b\f1 Orpheus.Plugin.InternetExplorer.EventsManagers.Handlers.TestObjectEventHandler\f0\par
\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx2873\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7298\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9514\pard\intbl\fs24 Parameter\f1\fs20\cell\f0\fs24 Description\f1\fs20\cell\f0\fs24 Values\f1\fs20\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx2873\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7298\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9514\pard\intbl\sa120\b0 hash_algorithm\cell The Object Factory key of the HashAlgorithm implementation to use. The SHA-1 should be configured. \f0\cell\f1 String. Required.\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx2873\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx7298\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9514\pard\intbl\sa120 test_object_url\cell The test object request url.The parameters will be placed in string as \{0\}, \{1\} \'85\par
Ex:\par
www.tc.com/?gameId=\{0\}&target=\{1\}&hash=\{3\}\cell String. Required.\par
\cell\row\pard\sa120\f0\par
\par
\par
\par
\par
\par
\par
\par
\pard\fs24\tab A sample configuration file is also provided.\par
\pard\sa120\fs20\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1 3.3\tab Dependencies Configuration\par
\pard\li720\b0\f0\fs24 The Object Factory component needs to be configured with the keys needed to create the required instances. For details please see the Object Factory component specifications document.\par
\pard\nowidctlpar\li720\sa120\sl240\slmult0\cf1\i\fs20\par
\pard\keepn\nowidctlpar\s1\sb120\sa60\sl240\slmult0\tx360\cf0\b\i0\f1\fs24 4.\tab Usage Notes\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\fs20 4.1\tab Required steps to test the component\par
\pard\fi-360\li1080\sa120\tx1080\b0\f3\'b7\tab\f1 Extract the component distribution.\par
\pard\fi-360\li1080\sa120\f3\'b7\tab\f1 Follow {\field{\*\fldinst{HYPERLINK "C:\\\\filez\\\\work\\\\tc\\\\tcs_corp\\\\templates\\\\component\\\\" \\\\l "_Dependencies_Configuration" }}{\fldrslt{\cf1\ul Dependencies Configuration}}}\cf0\ulnone\f1\fs20 .\par
\f3\'b7\tab\f1 Execute \lquote ant test\rquote  within the directory that the distribution was extracted to.\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b 4.2\tab Required steps to use the component\par
\pard\li720\b0\f0\fs24 Please see section below.\par
\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\f1\fs20 4.3\tab Demo\par
\pard\b0\f0\fs24\par
\pard\li720 This demo will try to follow the use of the component, from creating the user interface of the extension to providing new event handlers and scripting objects.\par
\par
\pard\keepn\nowidctlpar\s3\sb120\sa60\sl240\slmult0\tx0\i\f1\fs20 4.3.1\tab Creating the tool band user interface\par
\pard\li720\i0\f0\fs24\par
The first thing to do is to actually create the tool bar user interface and hook up various user control events to handlers.\par
\par
A tool band should be created by extending the \i ToolBand \i0 class. The user interface can be created using the Visual studio designer. Several properties are available at design time like the title and size of the tool band.\par
\par
The class must be marked with the \i ExtensionAttribute\i0  and the \i Guid\i0  attribute. The Extension attribute is needed to be recognized by the installer class and the \i Guid\i0  to be accessible as a COM object.\par
\par
\f2\fs18 [Guid("F2E189BE-405E-45fb-98C2-026CFFEBF95B")]\par
[Extension(\ldblquote MyToolBand\rdblquote )]\par
public class MyToolBand: ToolBand\par
\{\par
\pard\fi720\li720 MyToolBand()\par
\pard\li1440\{\line\}\par
\pard\fi720\}\par
\par
\pard\li720\f0\fs24 The nest thing to do is get the client side logic for the Orpheus web application needed by the extension. This should happen right after the web browser reference is set. This is done in the \i SetSite\i0  method and the simplest way to do this is to override the method call \i base.SetSite()\i0  and then get the client logic object.\par
\f2\fs18\par
\f0\fs24\par
\f2\fs18 [Guid("F2E189BE-405E-45fb-98C2-026CFFEBF95B")]\par
[Extension(\ldblquote MyToolBand\rdblquote )]\par
public class MyToolBand: ToolBand\par
\{\par
\tab //hold a reference to the client side logic object\par
\tab private MsieClientLogic clientLogic = null;\par
\par
\pard\fi720\li720 MyToolBand()\par
\pard\li1440\{\line\}\par
\par
//override the method sa we know when the site is set.\par
public override SetSite(pUnkSite object)\par
\{\par
\pard\fi720\li1440 base.SetSite (pUnkSite);\par
\par
\pard\li2160 //after the site is set and we have a reference to the web browser we get the client side logic object\par
\par
this.clientLogic = MsieClientLogic.GetInstance(this.Host);\par
\pard\li2160\tx6360\tab\par
\pard\li2160 //this should get the singleton instance of the object. The singleton is needed so the same MsieClientLogic instance is shared if a popup browser window is opened.\par
\par
The MsieClientLogic can also be created using the public constructors.\par
this.clientLogic = new MsieClientLogic(this.Host);\par
\par
//or passing all the needed objects.\par
\par
//after the MsieClientLogic is created we need to customize the new browser. This class will be created for every new browser window, so there will be one instance of the MyToolBand class for every browser window, and, if using singleton, one instance of MsieClientLogic for all.\par
\par
//customize the opened browser window\par
this.clientLogic.CustomizeWebBrowser(this.Host);\par
\par
//this will customize the browser with the same IDocHostUIHandler object and the same scripting object.\par
\lang2052\f4\par
\cf2 // add event hanlder here\par
\cf1 this\cf0 .clientLogic.EventsManager.AddEventHandler(Helper.EVENT_PAGE_CHANGED,\par
\tab\cf1 new\cf0  ExtensionEventHandlerDelegate(OnCompleted));\lang1033\f2\par
\pard\fi720\li720\}\par
\pard\fi720\}\par
\pard\li720\par
\cf3\lang2052\f4 ///\cf2  \cf3 <summary>\par
///\cf2  When completed load, navigate the our url.\par
\cf3 ///\cf2  \cf3 </summary>\par
///\cf2  \cf3 <param name="sender">\cf2 the sender\cf3 </param>\par
///\cf2  \cf3 <param name="args">\cf2 the args\cf3 </param>\par
\cf1 private\cf0  \cf1 void\cf0  OnCompleted(\cf1 object\cf0  sender, ExtensionEventArgs args)\par
\{\par
\tab\cf1 this\cf0 .clientLogic.WebBrowserWindowNavigator.Navigate(\cf1 this\cf0 .clientLogic.WebBrowser,\par
\tab\tab "http://www.topcoder.com", \cf1 true\cf0 );\par
\par
\tab\cf2 // customize the opened browser window\par
\cf0\tab\cf1 this\cf0 .clientLogic.CustomizeWebBrowser(\cf1 this\cf0 .Host);\par
\par
\tab ExtensionEventHandlerDelegate login = \cf1 new\cf0  ExtensionEventHandlerDelegate(HandleLoggedIn);\par
        ExtensionEventHandlerDelegate logout = \cf1 new\cf0  ExtensionEventHandlerDelegate(HandleLoggedOut);\par
\tab\cf2 // add event handler\par
\cf0\tab\cf1 this\cf0 .clientLogic.EventsManager.AddEventHandler(Helper.EVENT_LOGGEDIN, login);\par
\tab\cf1 this\cf0 .clientLogic.EventsManager.AddEventHandler(Helper.EVENT_LOGGEDOUT, logout);\par
\pard\tx2130        \}\lang1033\f2\par
\pard\li720\f0\fs24\par
The user interface controls should be added and hookup to event handlers.\par
\pard\tab\tab\par
\pard\fi720\f2\fs18 private void btnLogIn_Click(object sender, System.EventArgs e)\par
\pard\tab\{\par
\pard\fi720\li720 //create the event arguments class\par
\pard\li1440 ExtensionEventArgs args = new ExtensionEventArgs(\ldblquote LogIn\rdblquote , this.clientLogic);\par
\par
//fire the corresponding event\par
this.clientLogic.EventsManager.FireEvent(\ldblquote LogIn\rdblquote )\par
\par
//note that handlers (HttpRequestUserInterfaceEventHandler) should be configured to respond to this event.\par
\pard\par
\tab\}\par
\par
\par
\tab //the event handlers should be configured in the configuration file\par
\pard\li720 //event handlers can be configured for displayed page changed and updates pooling events as well\par
\par
//an event handler can also be set to a class method. When an event is fired by the scripting object for example, we need to handle that.\par
\par
//declare the handler method\par
public void HandleLoggedIn(object sender, ExtensionEventArgs args)\par
\{\par
\tab //get the context\par
\tab MsieClientLogic context = args.Context;\par
\pard\fi720\li720\par
//handle event\par
\lang2052\f4 MessageBox.Show("You have loggined.");\lang1033\f2\par
\pard\tab\}\lang2052\f4\par
\tab\par
\tab\cf3 ///\cf2  \cf3 <summary>\par
\cf0\tab\cf3 ///\cf2  Evne handler\par
\cf0\tab\cf3 ///\cf2  \cf3 </summary>\par
\cf0\tab\cf3 ///\cf2  \cf3 <param name="sender">\cf2 the sender\cf3 </param>\par
\cf0\tab\cf3 ///\cf2  \cf3 <param name="e">\cf2 the argument\cf3 </param>\par
\cf0\tab\cf1 public\cf0  \cf1 void\cf0  HandleLoggedOut(\cf1 object\cf0  sender, ExtensionEventArgs args)\par
\tab\{\par
\tab\tab MessageBox.Show("You have log out.");\par
\tab\}\lang1033\f2\par
\par
\pard\li720 //create a delegate for the method\par
ExtensionEventHandlerDelegate delegate = \par
new ExtensionEventHandlerDelegate(HandleLoggedIn);\par
\par
//add the handler\par
this.clientLogic.EventsManager.AddEventHandler(\ldblquote LoggedIn\rdblquote , delegate);\par
\f0\fs24\par
\pard\keepn\nowidctlpar\s3\sb120\sa60\sl240\slmult0\tx0\i\f1\fs20 4.3.2\tab Working with the scripting object\f0\par
\pard\li720\i0\fs24\par
The component exposes to the web pages JavaScript an object through which JavaScript code can communicate with the component.\par
\f2\fs18\par
<script type="text/javascript">\par
\tab function ScriptingInterface()\par
\{\par
\pard\fi720\li720 //signal logged in\par
window.external.LoggedIn();\par
\par
//signal logged out\par
window.external.LoggedOut();\par
\par
//set the working game id\par
window.external.SetWorkingGame(<gameId>);\par
\par
//get working game\par
Var gameid = window.external.GetWorkingGame();\par
\par
//set current target\par
window.external.SetCurrentTarget(<hash>, <sequence>);\par
\par
//force get updates from server\par
window.external.PollMessages();\par
\par
//check if window is popup\par
var popup = window.external.IsPopup(window);\par
\line\}\par
\pard\li720 </script>\par
\pard\f0\fs24\par
\pard\keepn\nowidctlpar\s3\sb120\sa60\sl240\slmult0\tx0\i\f1\fs20 4.3.3\tab Working Programmatically with the Client Side Logic\par
\pard\nowidctlpar\cf2\lang2052\i0\f5\fs18 // create a new client side logic object \par
\cf0\lang1033\f0\tab\tab\tab\lang2052\f5 MsieClientLogic logic = \cf1 new\cf0  MsieClientLogic(\cf1 new\cf0  WebBrowserClass());\par
\tab\tab\tab\par
\tab\tab\tab\cf2 //or as a singleton \par
\cf0\lang1033\f0\tab\tab\tab\lang2052\f5 logic = MsieClientLogic.GetInstance(\cf1 new\cf0  WebBrowserClass());\par
\tab\tab\tab\par
\tab\tab\tab\cf2 // or using custom configuration namespaces\par
\cf0\lang1033\f0\tab\tab\tab\lang2052\f5 logic = \cf1 new\cf0  MsieClientLogic(\cf1 new\cf0  WebBrowserClass(),\par
\tab\tab\tab\tab MsieClientLogic.DefaultConfigurationNamepsace, MsieClientLogic.DefaultObjectFactoryNamespace);\par
\par
            \cf2 //get the browser \par
\cf0\lang1033\f0\tab\tab\tab\lang2052\f5 WebBrowserClass browser = logic.WebBrowser;\par
\tab\tab\tab\par
\tab\tab\tab\cf2 //get the events manager \par
\cf0\lang1033\f0\tab\tab\tab\lang2052\f5 IExtensionEventsManager events = logic.EventsManager;\par
\tab\tab\tab\par
\tab\tab\tab\cf2 //add a handler\par
\cf0\lang1033\f0\tab\tab\tab\lang2052\f5 ExtensionEventHandlerDelegate d1 =  \cf1 new\cf0  ExtensionEventHandlerDelegate(\par
\tab\tab\tab\tab\cf1 new\cf0  MockExtensionEventHandler().HandleEvent);\par
\tab\tab\tab ExtensionEventHandlerDelegate d2 =  \cf1 new\cf0  ExtensionEventHandlerDelegate(\par
\tab\tab\tab\tab\cf1 new\cf0  MockExtensionEventHandler().HandleEvent);\par
\par
\tab\tab\tab events.AddEventHandler("Demo", d1);\par
\tab\tab\tab events.AddEventHandler("Demo", d2);\par
\tab\tab\tab\par
\tab\tab\tab\cf2 //get all handlers for an event\par
\cf0\lang1033\f0\tab\tab\tab\lang2052\f5 ExtensionEventHandlerDelegate[] delegates=events.GetEventHandlers("Demo");\par
\tab\tab\tab\par
\tab\tab\tab\cf2 //remove an event handler\par
\cf0\lang1033\f0\tab\tab\tab\lang2052\f5 events.AddEventHandler("Demo", d1);\par
\tab\tab\tab\par
\tab\tab\tab\cf2 //fire an event \par
\cf0\lang1033\f0\tab\tab\tab\lang2052\f5 ExtensionEventArgs args = \cf1 new\cf0  ExtensionEventArgs("Demo", logic);\par
\tab\tab\tab events.FireEvent("Demo", \cf1 this\cf0 , args);\par
\tab\tab\tab\par
\tab\tab\tab\cf2 //get the web browser window navigator\par
\cf0\lang1033\f0\tab\tab\tab\lang2052\f5 IWebBrowserWindowNavigator navigator = logic.WebBrowserWindowNavigator;\par
\tab\tab\tab\par
\tab\tab\tab\cf2 //navigate to a URL in a new window; false to navigate in the same browser window\par
\cf0\lang1033\f0\tab\tab\tab\cf2\lang2052\f5 navigator.Navigate(logic.Host, "http://www.topcoder.com", true);\par
\cf0\lang1033\f0\tab\tab\tab\par
\tab\tab\tab\cf2\lang2052\f5 //set the content to the web browser window from a stream \par
\cf0\lang1033\f0\tab\tab\tab\cf2\lang2052\f5 //get a stream to display in the browser\par
\cf0\lang1033\f0\tab\tab\tab\cf1\lang2052\f5 using\cf0 (Stream doc = \cf1 new\cf0  FileStream("../../test_files/msie/demo.html", FileMode.Open))\par
\tab\tab\tab\{\par
\tab\tab\tab\tab\cf2 navigator.Navigate(logic.Host, doc, true);\par
\cf0\lang1033\f0\tab\tab\tab\}\par
\tab\tab\tab\par
\tab\tab\tab\cf2\lang2052\f5 //get the persistence\par
\cf0\lang1033\f0\tab\tab\tab\lang2052\f5 IPersistence storage = logic.Persistence;\par
\tab\tab\tab\par
\tab\tab\tab\cf2 //persist a value\par
\cf0\lang1033\f0\tab\tab\tab\lang2052\f5 storage["key"] = "value";\par
\tab\tab\tab\par
\tab\tab\tab\cf2 //get the value back\par
\cf0\lang1033\f0\tab\tab\tab\cf1\lang2052\f5 string\cf0  \cf1 value\cf0  = storage["key"];\par
\tab\tab\tab\par
\tab\tab\tab\cf2 //get or set the bloom filter \par
\cf0\lang1033\f0\tab\tab\tab\lang2052\f5 BloomFilter filter = logic.BloomFilter;\par
\tab\tab\tab\par
\tab\tab\tab\cf2 //get the browser customization object\par
\cf0\lang1033\f0\tab\tab\tab\par
\tab\tab\tab\lang2052\f5 IDocHostUIHandler  handler = logic.BrowserCustomization;\par
\tab\tab\tab\par
\tab\tab\tab\cf2 //get the scripting object\par
\pard\li720\cf0\lang1033\f0\tab\tab\tab\cf1\lang2052\f5 object\cf0  scriptingObject = logic.ScriptingObject;\lang1033\f2\par
\f0\fs24\par
\pard\keepn\nowidctlpar\s3\sb120\sa60\sl240\slmult0\tx0\i\f1\fs20 4.3.4\tab Installing the extension\par
\pard\i0\f0\fs24\par
\pard\li720 In order for the \i MyToolBand\i0  class to be accessible to COM clients must it be registered with the Assembly Registration Tool.\par
\par
\cf4\b Regasm /codebae \b0\i semblyFile\i0  \par
\cf0\par
To unregister: \par
\par
\cf4\b regasm\b0  /unregister \i semblyFile\i0\par
\cf0  \par
The assembly and the dependent assemblies must be in either the same folder as Internet Explorer or added to the GAC in which case they must have a strong name.\par
\pard\par
\pard\keepn\nowidctlpar\s3\sb120\sa60\sl240\slmult0\tx0\i\f1\fs20 4.3.5\tab Implementing New Event Handlers\par
\pard\i0\f0\fs24\par
\pard\li720 All event handlers must implement the \i IExtentionEventHandler\i0  interface. Event handlers are added to the configuration file, and invoked by the component when the event they are configured for is fired.\par
\par
\pard\nowidctlpar\fs18\tab\cf1\lang2052\f5 public\cf0  \cf1 class\cf0  MyEventHandler :IExtensionEventHandler\par
\tab\{\par
\tab\tab\cf3 ///\cf2  \cf3 <summary>\par
\cf0\lang1033\f0\tab\tab\cf3\lang2052\f5 ///\cf2  Constructor.\par
\cf0\lang1033\f0\tab\tab\cf3\lang2052\f5 ///\cf2  \cf3 </summary>\par
\cf0\lang1033\f0\tab\tab\cf1\lang2052\f5 public\cf0  MyEventHandler()\par
\tab\tab\{\par
\tab\tab\tab\cf2 // you can add your code, here\par
\cf0\lang1033\f0\tab\tab\tab\cf2\lang2052\f5 // such like get config values to initialize this handler\par
\cf0\lang1033\f0\tab\tab\}\par
\tab\tab\par
\tab\tab\cf3\lang2052\f5 ///\cf2  \cf3 <summary>\par
\cf0\lang1033\f0\tab\tab\cf3\lang2052\f5 ///\cf2  You event handler, you can add your implementation here.\par
\cf0\lang1033\f0\tab\tab\cf3\lang2052\f5 ///\cf2  \cf3 </summary>\par
\cf0\lang1033\f0\tab\tab\cf3\lang2052\f5 ///\cf2  \par
\cf0\lang1033\f0\tab\tab\cf3\lang2052\f5 ///\cf2  \cf3 <param name="sender">\cf2 the sender\cf3 </param>\par
\cf0\lang1033\f0\tab\tab\cf3\lang2052\f5 ///\cf2  \cf3 <param name="args">\cf2 the args\cf3 </param>\par
\cf0\lang1033\f0\tab\tab\cf1\lang2052\f5 public\cf0  \cf1 void\cf0  HandleEvent(\cf1 object\cf0  sender, ExtensionEventArgs args)\par
\tab\tab\{\par
\tab\tab\tab\cf2 // here just output the event name to console.\par
\cf0\lang1033\f0\tab\tab\tab\lang2052\f5 System.Console.WriteLine(args.EventName);\par
\tab\tab\}\par
\pard\fi720\lang1033\f0\}\f2\par
\f0\fs24 The new event handler implementation must be configured for a specific event.\par
\f2\fs18\par
\pard\keepn\nowidctlpar\s3\sb120\sa60\sl240\slmult0\tx0\i\f1\fs20 4.3.6\tab Implementing New Scripting Objects\f0\par
\pard\fi720\cf4\i0\f2\fs18\par
\pard\li720\cf0\f0\fs24 Scripting objects have only to be marked with the \i ComVisible\i0  attribute and must provide a constructor that accepts an \i MsieClientLogic\i0  object to be created by the component. As a result the object properties and method will be available to JavaScript code.\par
\par
To be created the new scripting object must be configured in the configuration file.\par
\pard\par
\pard\keepn\nowidctlpar\s1\sb120\sa60\sl240\slmult0\tx360\b\f1 5.\tab Future Enhancements\par
\pard\li1080\b0\f0\par
\pard\fi-360\li1080\tx1080\f3\'b7\tab\f0 Other implementations of \i IExtensionEventsManager \i0 can be plugged in.\par
\pard\fi-360\li1080\f3\'b7\tab\f0 Other implementations of \i IExtensionEventHandler\i0  can be added as well as different \i IExtensionEventHandlerFactory\i0  implementations.\par
\f3\'b7\tab\f0 Other \i IWebBrowserWindowNavigator\i0  and \i IPersistence\i0  implementations can be plugged in. \par
\pard\fi-360\li1080\tx1080\f3\'b7\tab\f0 Other \i IDocHostUIHandler\i0  and scripting objects can be implemented to customize the web browser, including providing context menu items.\par
\pard\nowidctlpar\li720\sa120\sl240\slmult0\cf1\i\fs20\par
\pard\sa120\cf0\i0\par
\pard\fs24\par
}
 