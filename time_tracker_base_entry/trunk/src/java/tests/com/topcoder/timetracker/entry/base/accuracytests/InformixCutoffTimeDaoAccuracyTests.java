/*
 * Copyright (C) 2006 Topcoder Inc., All Rights Reserved.
 */
package com.topcoder.timetracker.entry.base.accuracytests;

import com.topcoder.db.connectionfactory.DBConnectionFactory;

import com.topcoder.timetracker.audit.ApplicationArea;
import com.topcoder.timetracker.audit.AuditHeader;
import com.topcoder.timetracker.audit.AuditManager;
import com.topcoder.timetracker.audit.AuditType;
import com.topcoder.timetracker.entry.base.CutoffTimeBean;
import com.topcoder.timetracker.entry.base.accuracytests.TestHelper;
import com.topcoder.timetracker.entry.base.persistence.InformixCutoffTimeDao;

import com.topcoder.util.objectfactory.ObjectFactory;
import com.topcoder.util.objectfactory.impl.ConfigManagerSpecificationFactory;

import junit.framework.TestCase;

import java.sql.Connection;
import java.util.Date;


/**
 * Accuracy test case for InformixCutoffTimeDao.
 *
 * @author waits
 * @since Mar 31, 2007
 * @version 1.0
 */
public class InformixCutoffTimeDaoAccuracyTests extends TestCase {
    /** InformixCutoffTimeDao instance to test against. */
    private InformixCutoffTimeDao dao = null;

    /** the AuditManager for testing. */
    private AuditManager auditManager = null;

    /**
     * Database connection.
     */
    private Connection conn = null;
    /**
     * Create instance.
     */
    protected void setUp() throws Exception {
    	TestHelper.clearConfiguration();
    	TestHelper.setUpConfiguration();
    	conn = TestHelper.getConnection();
        TestHelper.clearTable(conn);
        TestHelper.insertData(conn);
        
        ObjectFactory objectFactory = new ObjectFactory(new ConfigManagerSpecificationFactory(TestHelper.OF_NAMESPACE));
        auditManager = (AuditManager) objectFactory.createObject("auditManager");
        dao = new InformixCutoffTimeDao("informix_connection", "cut_off_time",
                (DBConnectionFactory) objectFactory.createObject("informix"), auditManager);
    }

    /**
     * Test createCutoffTime method. The id will be generated by the IDGenerator. And the insert action will be
     * audited.
     *
     * @throws Exception into junit
     */
    public void testCreateCutoffTime() throws Exception {
        // create cutoff time
        CutoffTimeBean bean = TestHelper.createCutoffTimeBean(1, new Date(10000));
        bean.setChanged(true);

        dao.createCutoffTime(bean, true);

        // fectch it from database
        CutoffTimeBean persisted = dao.fetchCutoffTimeByCompanyID(bean.getCompanyId());

        // verify the record
        AuditHeader record = ((MockAuditManager) this.auditManager).getRecord();
        assertEquals("The table name is invalid.", "cut_off_time", record.getTableName());
        assertEquals("The application area is invalid.", ApplicationArea.TT_TIME, record.getApplicationArea());
        assertEquals("The action type is invalid.", AuditType.INSERT, record.getActionType());
        assertEquals("The company id is invalid.", bean.getCompanyId(), record.getCompanyId());
        assertEquals("The entity id is invalid.", persisted.getId(), record.getEntityId());
        assertEquals("The create user is invalid.", bean.getCreationUser(), record.getCreationUser());
        //assertEquals("The assertDetails is invalid.", 5, record.getDetails().length);

        // verify the result
        TestHelper.assertCutoffTimeBean(bean, persisted);
        assertFalse("The changed flag is invalid.", persisted.isChanged());

        //get the result by the id and verify
        CutoffTimeBean anotherPersisted = dao.fetchCutoffTimeById(persisted.getId());
        TestHelper.assertCutoffTimeBean(bean, anotherPersisted);
        assertFalse("The changed flag is invalid.", persisted.isChanged());
    }

    /**
     * Test createCutoffTime method. This time, the id is pre set, so we don't need to create it by the IDGenerator.
     * And audit will not taken.
     *
     * @throws Exception into junit
     */
    public void testCreateCutoffTime_withPreSetId() throws Exception {
        // create cutoff time
        CutoffTimeBean bean = TestHelper.createCutoffTimeBean(1, new Date(10000));
        bean.setChanged(true);

        //basically, the id would not be the one created by IDGenerator.
        bean.setId(1);
        dao.createCutoffTime(bean, false);

        // fectch it from database
        CutoffTimeBean persisted = dao.fetchCutoffTimeByCompanyID(bean.getCompanyId());

        // verify the record
        assertNull("The record should be null.", ((MockAuditManager) this.auditManager).getRecord());

        // verify the result
        TestHelper.assertCutoffTimeBean(bean, persisted);
        assertFalse("The changed flag is invalid.", persisted.isChanged());
        assertEquals("The id should be the pre-set one.", 1, persisted.getId());

        //get the result by the id and verify
        CutoffTimeBean anotherPersisted = dao.fetchCutoffTimeById(persisted.getId());
        TestHelper.assertCutoffTimeBean(bean, anotherPersisted);
        assertFalse("The changed flag is invalid.", persisted.isChanged());
    }

    /**
     * Test the updateCutoff time method.
     *
     * @throws Exception into Junit
     */
    public void testUpdateCutoffTime() throws Exception {
        //create cutoff time
        CutoffTimeBean bean = TestHelper.createCutoffTimeBean(1, new Date(10000));
        bean.setChanged(true);

        dao.createCutoffTime(bean, false);

        // fectch it from database and update it
        CutoffTimeBean persisted = dao.fetchCutoffTimeByCompanyID(bean.getCompanyId());

        persisted.setChanged(true);
        persisted.setCutoffTime(new Date(20000));
        persisted.setModificationUser("ivern");

        //update it
        dao.updateCutoffTime(persisted, true);

        //verify the audit info
        AuditHeader record = ((MockAuditManager) this.auditManager).getRecord();
        assertEquals("The table name is invalid.", "cut_off_time", record.getTableName());
        assertEquals("The application area is invalid.", ApplicationArea.TT_TIME, record.getApplicationArea());
        assertEquals("The action type is invalid.", AuditType.UPDATE, record.getActionType());
        assertEquals("The company id is invalid.", bean.getCompanyId(), record.getCompanyId());
        assertEquals("The entity id is invalid.", persisted.getId(), record.getEntityId());
        assertEquals("The create user is invalid.", persisted.getCreationUser(), record.getCreationUser());


        //re-fetch it
        CutoffTimeBean updated = dao.fetchCutoffTimeById(persisted.getId());

        //verify it
        TestHelper.assertCutoffTimeBean(persisted, updated);
        assertFalse("The changed flag is invalid.", updated.isChanged());
    }

    /**
     * Test the updateCutoff time method.
     *
     * @throws Exception into Junit
     */
    public void testUpdateCutoffTime_notChanged() throws Exception {
        //create cutoff time
        CutoffTimeBean bean = TestHelper.createCutoffTimeBean(1, new Date(10000));
        bean.setChanged(true);

        dao.createCutoffTime(bean, false);

        // fectch it from database and update it
        CutoffTimeBean persisted = dao.fetchCutoffTimeByCompanyID(bean.getCompanyId());
        
        persisted.setCutoffTime(new Date(20000));
        persisted.setModificationUser("ivern");
        persisted.setChanged(false);
        //update it
        dao.updateCutoffTime(persisted, true);
        assertNull("The record should be null.", ((MockAuditManager) this.auditManager).getRecord());

        //re-fetch it
        CutoffTimeBean notUpdated = dao.fetchCutoffTimeById(persisted.getId());

        //verify it
        TestHelper.assertCutoffTimeBean(bean, notUpdated);
        assertFalse("The changed flag is invalid.", notUpdated.isChanged());
    }

    /**
     * <p>
     * Test the deleteCutoffTime method.
     * </p>
     *
     * @throws Exception into Junit
     */
    public void testDeleteCutoffTime() throws Exception {
        //		create cutoff time
        CutoffTimeBean bean = TestHelper.createCutoffTimeBean(1, new Date(10000));
        bean.setChanged(true);

        dao.createCutoffTime(bean, false);

        CutoffTimeBean persisted = dao.fetchCutoffTimeByCompanyID(bean.getCompanyId());

        dao.deleteCutoffTime(persisted, true);

        dao.fetchCutoffTimeById(persisted.getId());
           

        //verify the audit
        AuditHeader record = ((MockAuditManager) this.auditManager).getRecord();
        assertEquals("The table name is invalid.", "cut_off_time", record.getTableName());
        assertEquals("The application area is invalid.", ApplicationArea.TT_TIME, record.getApplicationArea());
        assertEquals("The action type is invalid.", AuditType.DELETE, record.getActionType());
        assertEquals("The company id is invalid.", bean.getCompanyId(), record.getCompanyId());
        assertEquals("The entity id is invalid.", persisted.getId(), record.getEntityId());
        assertEquals("The create user is invalid.", bean.getModificationUser(), record.getCreationUser());
        //all the field will be recorded
        assertEquals("The assertDetails is invalid.", 7, record.getDetails().length);
    }

    /**
     * Test the fetchCutoffTimeByCompanyID method.
     *
     * @throws Exception into Junit
     */
    public void testFetchCutoffTimeBeanByCompanyId() throws Exception {
        CutoffTimeBean bean = TestHelper.createCutoffTimeBean(1, new Date(10000));
        bean.setChanged(true);

        dao.createCutoffTime(bean, false);

        CutoffTimeBean persisted = dao.fetchCutoffTimeByCompanyID(bean.getCompanyId());
        assertNull("The record should be null.", ((MockAuditManager) this.auditManager).getRecord());
        TestHelper.assertCutoffTimeBean(bean, persisted);
        assertFalse("The changed flag is invalid.", persisted.isChanged());
        assertTrue("the createdate/modify date is invalid.", persisted.getModificationDate().before(new Date()));
        assertTrue("the createdate/modify date is invalid.", persisted.getCreationDate().before(new Date()));
    }

    /**
     * Test the fetchCutoffTimeById method.
     *
     * @throws Exception into Junit
     */
    public void testFecthCutoffTimeBeanById() throws Exception {
        CutoffTimeBean bean = TestHelper.createCutoffTimeBean(1, new Date(10000));
        bean.setChanged(true);

        dao.createCutoffTime(bean, false);

        CutoffTimeBean persisted = dao.fetchCutoffTimeByCompanyID(bean.getCompanyId());
        persisted = dao.fetchCutoffTimeById(persisted.getId());

        assertNull("The record should be null.", ((MockAuditManager) this.auditManager).getRecord());
        TestHelper.assertCutoffTimeBean(bean, persisted);
        assertFalse("The changed flag is invalid.", persisted.isChanged());
        assertTrue("the createdate/modify date is invalid.", persisted.getModificationDate().before(new Date()));
        assertTrue("the createdate/modify date is invalid.", persisted.getCreationDate().before(new Date()));
    }

    /**
     * clear the environment.
     */
    protected void tearDown() throws Exception {
    	 TestHelper.clearTable(conn);
    	 if( conn != null){
    		 conn.close();
    	 }
        TestHelper.clearConfiguration();
    }
}
