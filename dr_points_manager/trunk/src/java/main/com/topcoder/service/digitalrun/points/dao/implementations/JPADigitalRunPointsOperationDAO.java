/*
 * Copyright (C) 2008 TopCoder Inc., All Rights Reserved.
 */
package com.topcoder.service.digitalrun.points.dao.implementations;

import java.util.List;

import javax.persistence.EntityExistsException;
import javax.persistence.EntityManager;
import javax.persistence.Query;

import com.topcoder.service.digitalrun.entity.DigitalRunPointsOperation;
import com.topcoder.service.digitalrun.points.DigitalRunPointsManagerPersistenceException;
import com.topcoder.service.digitalrun.points.DigitalRunPointsOperationDAO;
import com.topcoder.service.digitalrun.points.EntityNotFoundException;
import com.topcoder.service.digitalrun.points.Helper;

/**
 * <p>
 * This class implements DigitalRunPointsOperationDAO interface. It also extends the AbstractDAO
 * class. This class manages DigitalRunPointsOperation entities in a JPA persistence (currently the
 * JPA persistence will use Hibernate as a provider but any provider can be used). Each public
 * method performs logging.
 * </p>
 * <p>
 * Thread Safety: This class is not completely thread safe because it doesn't manage transactions
 * and it is also mutable. Anyway, the intent is to use this implementation in a stateless session
 * bean so there will be no thread safety issues generated by this class since the container will
 * ensure thread safety.
 * </p>
 *
 * @author DanLazar, TCSDEVELOPER
 * @version 1.0
 */
public class JPADigitalRunPointsOperationDAO extends AbstractDAO implements DigitalRunPointsOperationDAO {
    /**
     * Present the class name.
     */
    private static final String CLASS_NAME = JPADigitalRunPointsOperationDAO.class.getSimpleName();

    /**
     * Default constructor.
     */
    public JPADigitalRunPointsOperationDAO() {
        // Empty
    }

    /**
     * Creates a new digital run points operation entity into persistence. Returns the
     * DigitalRunPointsOperation instance with id generated.
     *
     * @throws IllegalArgumentException
     *             if argument is null or if its id >0
     * @throws DigitalRunPointsManagerPersistenceException
     *             if any errors occur when accessing the persistent storage
     * @param pointsOperation
     *            the entity to be created
     * @return entity with id set
     */
    public DigitalRunPointsOperation createDigitalRunPointsOperation(DigitalRunPointsOperation pointsOperation)
        throws DigitalRunPointsManagerPersistenceException {
        String methodName = CLASS_NAME + ".createDigitalRunPointsOperation()";
        // Log the entrance
        Helper.logEntranceInfo(getLogger(), methodName);

        Helper.checkNullWithLog(pointsOperation, "pointsOperation", getLogger(), methodName);
        Helper.checkPositiveWithLog(pointsOperation.getId(), "pointsOperation.id", getLogger(), methodName);

        // obtain the EntityManager instance
        EntityManager em = getEntityManager();
        // persist the digital run points operation entity in the database
        try {
            em.getTransaction().begin();
            em.persist(pointsOperation);
            em.getTransaction().commit();
        } catch (EntityExistsException e) {
            em.getTransaction().rollback();
            Helper.throwPersitenceExceptionWithLog("EntityExistsException occurs while do persisting.", e,
                    getLogger(), methodName);
        }

        // Log the exit
        Helper.logExitInfo(getLogger(), methodName);
        return pointsOperation;
    }

    /**
     * Updates the given digital run points operation entity into persistence.
     *
     * @throws IllegalArgumentException
     *             if argument is null
     * @throws EntityNotFoundException
     *             if a digital run points operation entity with digital run points operation entity
     *             argument id does not exist in the persistence
     * @throws DigitalRunPointsManagerPersistenceException
     *             if any errors occur when accessing the persistent storage
     * @param pointsOperation
     *            the entity to be updated
     */
    public void updateDigitalRunPointsOperation(DigitalRunPointsOperation pointsOperation)
        throws EntityNotFoundException, DigitalRunPointsManagerPersistenceException {
        String methodName = CLASS_NAME + ".updateDigitalRunPointsOperation()";
        // Log the entrance
        Helper.logEntranceInfo(getLogger(), methodName);

        Helper.checkNullWithLog(pointsOperation, "pointsOperation", getLogger(), methodName);

        // obtain the EntityManager instance
        EntityManager em = this.getEntityManager();
        // update the entity
        try {
            em.getTransaction().begin();
            em.merge(pointsOperation);
            em.getTransaction().commit();
        } catch (IllegalArgumentException iae) {
            em.getTransaction().rollback();
            Helper.throwEntityNotFoundExceptionWithLog("The pointsOperation is not exist.", iae, getLogger(),
                    methodName);
        }

        // Log the exit
        Helper.logExitInfo(getLogger(), methodName);
    }

    /**
     * Removes the digital run points operation entity identified by the given id from persistence.
     *
     * @throws IllegalArgumentException
     *             if argument<0
     * @throws EntityNotFoundException
     *             if there is no digital run points operation entity with the given id in
     *             persistence
     * @throws DigitalRunPointsManagerPersistenceException
     *             if any errors occur when accessing the persistent storage
     * @param pointsOperationId
     *            the id that identified the entity to be removed
     */
    public void removeDigitalRunPointsOperation(long pointsOperationId) throws EntityNotFoundException,
        DigitalRunPointsManagerPersistenceException {
        String methodName = CLASS_NAME + ".removeDigitalRunPointsOperation()";
        // Log the entrance
        Helper.logEntranceInfo(getLogger(), methodName + " With Id[" + pointsOperationId + "]");

        Helper.checkNegativeWithLog(pointsOperationId, "pointsOperationId", getLogger(), methodName);

        // obtain the EntityManager instance
        EntityManager em = this.getEntityManager();
        // get the DigitalRunPointsOperation instance to be removed
        DigitalRunPointsOperation operations = em.find(DigitalRunPointsOperation.class, new Long(
                pointsOperationId));
        if (operations == null) {
            Helper.throwEntityNotFoundExceptionWithLog("DigitalRunPointsOperation with id["
                    + pointsOperationId + "] is not exist.", null, getLogger(), methodName);
        }
        // remove the entity
        em.getTransaction().begin();
        em.remove(operations);
        em.getTransaction().commit();

        // Log the exit
        Helper.logExitInfo(getLogger(), methodName);
    }

    /**
     * Gets the digital run points operation entity identified by the given id from persistence.
     *
     * @throws IllegalArgumentException
     *             if argument<0
     * @throws EntityNotFoundException
     *             if there is no digital run points operation entity with the given id in
     *             persistence
     * @throws DigitalRunPointsManagerPersistenceException
     *             if any errors occur when accessing the persistent storage
     * @param pointsOperationId
     *            the id that identifies the entity top be retrieved
     * @return the entity identified by the id
     */
    public DigitalRunPointsOperation getDigitalRunPointsOperation(long pointsOperationId)
        throws EntityNotFoundException, DigitalRunPointsManagerPersistenceException {
        String methodName = CLASS_NAME + ".getDigitalRunPointsOperation()";
        // Log the entrance
        Helper.logEntranceInfo(getLogger(), methodName + " With Id[" + pointsOperationId + "]");

        Helper.checkNegativeWithLog(pointsOperationId, "pointsOperationId", getLogger(), methodName);

        // obtain the EntityManager instance
        EntityManager em = this.getEntityManager();
        // get and return the digital run points operation entity from the database
        DigitalRunPointsOperation operations = em.find(DigitalRunPointsOperation.class, new Long(
                pointsOperationId));
        if (operations == null) {
            Helper.throwEntityNotFoundExceptionWithLog("DigitalRunPointsOperation with id["
                    + pointsOperationId + "] is not exist.", null, getLogger(), methodName);
        }

        // Log the exit
        Helper.logExitInfo(getLogger(), methodName);
        return operations;
    }

    /**
     * Gets all the digital run points operations from persistence. If there is no such entity in
     * persistence an empty list is returned.
     *
     * @throws DigitalRunPointsManagerPersistenceException
     *             if any errors occur when accessing the persistent storage
     * @return a list containing all operations or an empty list if there is no such entity
     */
    public List<DigitalRunPointsOperation> getAllDigitalRunPointsOperations()
        throws DigitalRunPointsManagerPersistenceException {
        String methodName = CLASS_NAME + ".getAllDigitalRunPointsOperations()";
        // Log the entrance
        Helper.logEntranceInfo(getLogger(), methodName);

        // get the EntityManager instance
        EntityManager em = this.getEntityManager();
        // create a query that will retrieve all the rows from dr_points_operation_lu table
        // create a Query instance
        Query query = em.createQuery("from DigitalRunPointsOperation");
        // retrieve the result
        List res = query.getResultList();

        // Log the exit
        Helper.logExitInfo(getLogger(), methodName);
        return res;
    }
}
