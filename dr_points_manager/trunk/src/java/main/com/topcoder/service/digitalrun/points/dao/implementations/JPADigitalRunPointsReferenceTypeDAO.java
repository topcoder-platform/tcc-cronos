/*
 * Copyright (C) 2008 TopCoder Inc., All Rights Reserved.
 */
package com.topcoder.service.digitalrun.points.dao.implementations;

import java.util.List;

import javax.persistence.EntityExistsException;
import javax.persistence.EntityManager;
import javax.persistence.Query;

import com.topcoder.service.digitalrun.entity.DigitalRunPointsReferenceType;
import com.topcoder.service.digitalrun.points.DigitalRunPointsManagerPersistenceException;
import com.topcoder.service.digitalrun.points.DigitalRunPointsReferenceTypeDAO;
import com.topcoder.service.digitalrun.points.EntityNotFoundException;
import com.topcoder.service.digitalrun.points.Helper;

/**
 * <p>
 * This class implements DigitalRunPointsReferenceTypeDAO interface. It also extends the AbstractDAO
 * class. This class manages DigitalRunPointsType entities in a JPA persistence (currently the JPA
 * persistence will use Hibernate as a provider but any provider can be used). Each public method
 * performs logging.
 * </p>
 * <p>
 * Thread Safety: This class is not completely thread safe because it doesn't manage transactions
 * and it is also mutable. Anyway, the intent is to use this implementation in a stateless session
 * bean so there will be no thread safety issues generated by this class since the container will
 * ensure thread safety.
 * </p>
 *
 * @author DanLazar, TCSDEVELOPER
 * @version 1.0
 */
public class JPADigitalRunPointsReferenceTypeDAO extends AbstractDAO implements
        DigitalRunPointsReferenceTypeDAO {
    /**
     * Present the class name.
     */
    private static final String CLASS_NAME = JPADigitalRunPointsReferenceTypeDAO.class.getSimpleName();

    /**
     * Default constructor.
     */
    public JPADigitalRunPointsReferenceTypeDAO() {
        // Empty
    }

    /**
     * Creates a new digital run points reference type entity into persistence. Returns the
     * DigitalRunPointsReferenceType instance with id generated.
     *
     * @throws IllegalArgumentException
     *             if argument is null or if its id >0
     * @throws DigitalRunPointsManagerPersistenceException
     *             if any errors occur when accessing the persistent storage
     * @param pointsReferenceType
     *            the entity to be created
     * @return entity with id set
     */
    public DigitalRunPointsReferenceType createDigitalRunPointsReferenceType(
            DigitalRunPointsReferenceType pointsReferenceType)
        throws DigitalRunPointsManagerPersistenceException {
        String methodName = CLASS_NAME + ".createDigitalRunPointsReferenceType()";
        // Log the entrance
        Helper.logEntranceInfo(getLogger(), methodName);

        Helper.checkNullWithLog(pointsReferenceType, "pointsReferenceType", getLogger(), methodName);
        Helper.checkPositiveWithLog(pointsReferenceType.getId(), "pointsReferenceType.id", getLogger(),
                methodName);

        // obtain the EntityManager instance
        EntityManager em = getEntityManager();
        // persist the digital run points reference type entity in the database
        try {
            em.getTransaction().begin();
            em.persist(pointsReferenceType);
            em.getTransaction().commit();
        } catch (EntityExistsException e) {
            em.getTransaction().rollback();
            Helper.throwPersitenceExceptionWithLog("EntityExistsException occurs while do persisting.", e,
                    getLogger(), methodName);
        }

        // Log the exit
        Helper.logExitInfo(getLogger(), methodName);
        return pointsReferenceType;
    }

    /**
     * Updates the given digital run points reference type entity into persistence.
     *
     * @throws IllegalArgumentException
     *             if argument is null
     * @throws EntityNotFoundException
     *             if a digital run points reference type entity with digital run points reference
     *             type entity argument id does not exist in the persistence
     * @throws DigitalRunPointsManagerPersistenceException
     *             if any errors occur when accessing the persistent storage
     * @param pointsReferenceType
     *            the entity to be updated
     */
    public void updateDigitalRunPointsReferenceType(DigitalRunPointsReferenceType pointsReferenceType)
        throws EntityNotFoundException, DigitalRunPointsManagerPersistenceException {
        String methodName = CLASS_NAME + ".updateDigitalRunPointsReferenceType()";
        // Log the entrance
        Helper.logEntranceInfo(getLogger(), methodName);

        Helper.checkNullWithLog(pointsReferenceType, "pointsReferenceType", getLogger(), methodName);

        // obtain the EntityManager instance
        EntityManager em = this.getEntityManager();
        // update the entity
        try {
            em.getTransaction().begin();
            em.merge(pointsReferenceType);
            em.getTransaction().commit();
        } catch (IllegalArgumentException iae) {
            em.getTransaction().rollback();
            Helper.throwEntityNotFoundExceptionWithLog("The pointsReferenceType is not exist.", iae,
                    getLogger(), methodName);
        }

        // Log the exit
        Helper.logExitInfo(getLogger(), methodName);
    }

    /**
     * Removes the digital run points reference type entity identified by the given id from
     * persistence.
     *
     * @throws IllegalArgumentException
     *             if argument<0
     * @throws EntityNotFoundException
     *             if there is no digital run points entity with the given id in persistence
     * @throws DigitalRunPointsManagerPersistenceException
     *             if any errors occur when accessing the persistent storage
     * @param pointsReferenceTypeId
     *            the id that identified the entity to be removed
     */
    public void removeDigitalRunPointsReferenceType(long pointsReferenceTypeId)
        throws EntityNotFoundException, DigitalRunPointsManagerPersistenceException {
        String methodName = CLASS_NAME + ".removeDigitalRunPointsReferenceType()";
        // Log the entrance
        Helper.logEntranceInfo(getLogger(), methodName + " With Id[" + pointsReferenceTypeId + "]");

        Helper.checkNegativeWithLog(pointsReferenceTypeId, "pointsReferenceTypeId", getLogger(), methodName);

        // obtain the EntityManager instance
        EntityManager em = this.getEntityManager();
        // get the DigitalRunPointsReferenceType instance to be removed
        DigitalRunPointsReferenceType referenceType = em.find(DigitalRunPointsReferenceType.class, new Long(
                pointsReferenceTypeId));
        if (referenceType == null) {
            Helper.throwEntityNotFoundExceptionWithLog("DigitalRunPointsReferenceType with id["
                    + pointsReferenceTypeId + "] is not exist.", null, getLogger(), methodName);
        }
        // remove the entity
        em.getTransaction().begin();
        em.remove(referenceType);
        em.getTransaction().commit();

        // Log the exit
        Helper.logExitInfo(getLogger(), methodName);
    }

    /**
     * Gets the digital run points reference type entity identified by the given id from
     * persistence.
     *
     * @throws IllegalArgumentException
     *             if argument<0
     * @throws EntityNotFoundException
     *             if there is no digital run points reference type entity with the given id in
     *             persistence
     * @throws DigitalRunPointsManagerPersistenceException
     *             if any errors occur when accessing the persistent storage
     * @param pointsReferenceTypeId
     *            the id that identifies the entity top be retrieved
     * @return the entity identified by the id
     */
    public DigitalRunPointsReferenceType getDigitalRunPointsReferenceType(long pointsReferenceTypeId)
        throws EntityNotFoundException, DigitalRunPointsManagerPersistenceException {
        String methodName = CLASS_NAME + ".getDigitalRunPointsReferenceType()";
        // Log the entrance
        Helper.logEntranceInfo(getLogger(), methodName + " With Id[" + pointsReferenceTypeId + "]");

        Helper.checkNegativeWithLog(pointsReferenceTypeId, "pointsReferenceTypeId", getLogger(), methodName);

        // obtain the EntityManager instance
        EntityManager em = this.getEntityManager();
        // get and return the digital run points reference type entity from the database
        DigitalRunPointsReferenceType operations = em.find(DigitalRunPointsReferenceType.class, new Long(
                pointsReferenceTypeId));
        if (operations == null) {
            Helper.throwEntityNotFoundExceptionWithLog("DigitalRunPointsReferenceType with id["
                    + pointsReferenceTypeId + "] is not exist.", null, getLogger(), methodName);
        }

        // Log the exit
        Helper.logExitInfo(getLogger(), methodName);
        return operations;
    }

    /**
     * Gets all the digital run points reference types from persistence. If there is no such entity
     * in persistence an empty list is returned.
     *
     * @throws DigitalRunPointsManagerPersistenceException
     *             if any errors occur when accessing the persistent storage
     * @return a list containing all reference types or an empty list if there is no such entity
     */
    public List<DigitalRunPointsReferenceType> getAllDigitalRunPointsReferenceTypes()
        throws DigitalRunPointsManagerPersistenceException {
        String methodName = CLASS_NAME + ".getAllDigitalRunPointsReferenceTypes()";
        // Log the entrance
        Helper.logEntranceInfo(getLogger(), methodName);

        // get the EntityManager instance
        EntityManager em = this.getEntityManager();
        // create a query that will retrieve all the rows from dr_points_reference_type_lu table
        // create a Query instance
        Query query = em.createQuery("from DigitalRunPointsReferenceType");
        // retrieve the result
        List res = query.getResultList();

        // Log the exit
        Helper.logExitInfo(getLogger(), methodName);
        return res;
    }
}
