<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" [
    <!ENTITY types SYSTEM "classpath://your/domain/types.xml">
]>

<hibernate-mapping package="com.topcoder.accounting.entities.dto">
    <class name="BillingCostReportEntry">
      <id name="contestId" column="contest_id" type="long" />
      <property name="customer" column="client" type="string"/>
      <property name="billingAccount" column="billing_project_name" type="string"/>
    </class>


    <sql-query name="dashboard_billing_cost_report">
    <return class="BillingCostReportEntry"/>
    <![CDATA[SELECT pm.create_date payment_date,
       p.project_id as contest_id,
       ttc.name client,
       ttp.name billing_project_name,
       tdp.name direct_project_name,
       (select max (scheduled_start_time) from project_phase where phase_type_id = 1 and project_id = p.project_id) as launch_date,
       ct.completion_time completion_date,
       DECODE(pc.name, 'UI Prototype Competition', 'UI Prototype', 'Assembly Competition', 'Assembly', 'RIA Build Competition', 'RIA Build', 'Test Suites', 'Test Suites', 'Test Scenarios', 'Test Scenarios',  pc.name) category,
       pi.value as contest_name,
       CASE
       WHEN ps.project_status_id not in (1,2,3)
          THEN 'Finished'
       WHEN not exists(select actual_start_time from project_phase pp where pp.project_id = p.project_id and pp.phase_type_id = 1 and pp.actual_start_time <= current )
          THEN 'Scheduled'
       WHEN (select actual_start_time from project_phase pp where pp.project_id = p.project_id and pp.phase_type_id = 1 and pp.actual_start_time <= current ) <= current
          THEN 'Active'
       ELSE
          'Active'
       END as contest_status,

        case when p.project_status_id in (9, 10) and exists (select * from project_phase where project_id = p.project_id and phase_type_id = 1 and phase_status_id in (2,3))
            then CAST(pi2.value AS DECIMAL(10,2))
            when p.project_status_id in (9, 10) and not exists (select * from project_phase where project_id = p.project_id and phase_type_id = 1 and phase_status_id in (2,3))
            then 0
            else CAST(pi2.value AS DECIMAL(10,2)) end as contest_fee,

  SUM(case when p.project_status_id  in (1,7)
        and exists (select phase_type_id from project_phase ph, project_category_lu pcl
                where phase_type_id = decode (pcl.project_type_id, 1, 10, 2, 10, 3 , 4 )
                and pcl.project_category_id = p.project_category_id and ph.project_id = p.project_id and phase_status_id = 3)
   then
      NVL((SELECT sum(total_amount)
       FROM  payment_detail pmd, payment pm
        WHERE pmd.component_project_id = p.project_id and pmd.installment_number = 1
        and pm.most_recent_detail_id = pmd.payment_detail_id
        AND NOT pmd.payment_status_id IN (65, 68, 69)), 0)
    +
    NVL((SELECT sum(pmd2.total_amount)
           FROM  payment_detail pmd,
                 payment pm LEFT OUTER JOIN payment_detail pmd2 on pm.payment_id = pmd2.parent_payment_id,
                 payment pm2
            WHERE pmd.component_project_id = p.project_id and pmd2.installment_number = 1
            and pm.most_recent_detail_id = pmd.payment_detail_id
            and pm2.most_recent_detail_id = pmd2.payment_detail_id
            AND NOT pmd2.payment_status_id IN (65, 68, 69)), 0)
     +
    nvl((select nvl(sum (cast (nvl (pi30.value, '0') as DECIMAL (10,2))), 0) from project_info pi30, project_info pi26
        where pi30.project_info_type_id = 30 and pi26.project_info_type_id = 26 and pi26.project_id = pi30.project_id
        and pi26.value = 'On'
        and pi26.project_id =  p.project_id ), 0)
  else NVL((SELECT sum(total_amount)
       FROM  payment_detail pmd, payment pm
        WHERE pmd.component_project_id = p.project_id and pmd.installment_number = 1
        and pm.most_recent_detail_id = pmd.payment_detail_id
        AND NOT pmd.payment_status_id IN (65, 68, 69)), 0)
    +
    NVL((SELECT sum(pmd2.total_amount)
           FROM  payment_detail pmd,
                 payment pm LEFT OUTER JOIN payment_detail pmd2 on pm.payment_id = pmd2.parent_payment_id,
                 payment pm2
            WHERE pmd.component_project_id = p.project_id and pmd2.installment_number = 1
            and pm.most_recent_detail_id = pmd.payment_detail_id
            and pm2.most_recent_detail_id = pmd2.payment_detail_id
            AND NOT pmd2.payment_status_id IN (65, 68, 69)), 0)
  end) as actual_total_member_costs,

       pt.payment_type_desc,
    CASE WHEN pmd.payment_type_id in (45,57)
         THEN 'Copilot'
         WHEN pmd.payment_type_id in (27)
         THEN 'Spec Review'
         WHEN pmd.payment_type_id in (6, 29, 10, 42, 43, 44, 49, 50, 51, 55, 61, 64, 65, 60)
         THEN 'Winner'
         WHEN pmd.payment_type_id in (7, 28, 26)
         THEN 'Review'
         WHEN pmd.payment_type_id in (24)
         THEN 'Reliability'
         WHEN pmd.payment_type_id in (4)
         THEN 'Referral'
         WHEN pmd.payment_type_id in (23,37,46,47)
         THEN 'Bugs'
         WHEN pmd.payment_type_id in (39)
         THEN 'Build'
         WHEN pmd.payment_type_id NOT in (39,23,37,46,47,45,57,4,24,27,7, 28, 26,6, 29, 10, 42, 43, 44, 49, 50, 51, 55, 61, 64, 65, 60)
         THEN 'Misc'
         ELSE 'Not Sure'
    END as line_item_category,
    CASE WHEN pmd.payment_type_id in (23,37,46,47, 45, 57)
         THEN pmd.jira_issue_id
         ELSE ''
    END as reference_id,
    pmd.total_amount as line_item_amount,
     ttc.client_id,
     ttp.project_id billing_project_id,
    tdp.project_id direct_project_id,

case when p.project_status_id  in (1,7)
    and exists (select phase_type_id from project_phase ph, project_category_lu pcl
                where phase_type_id = decode (pcl.project_type_id, 1, 10, 2, 10, 3 , 4 )
                and pcl.project_category_id = p.project_category_id and ph.project_id = p.project_id and phase_status_id = 3)
then
nvl((select nvl(sum (cast (nvl (pi30.value, '0') as DECIMAL (10,2))), 0) from project_info pi30, project_info pi26
        where pi30.project_info_type_id = 30 and pi26.project_info_type_id = 26 and pi26.project_id = pi30.project_id
        and pi26.value = 'On'
        and pi26.project_id =  p.project_id ), 0)
else 0 end as digital_run,

        p.project_category_id,
        pmd.payment_detail_id,


case when pc.project_type_id = 3 then 1
else 0 end as is_studio

FROM payment pm
        INNER JOIN payment_detail pmd ON pm.most_recent_detail_id = pmd.payment_detail_id,
     payment_type_lu pt,
     project p,
     tc_direct_project tdp,
     project_status_lu ps,
     project_category_lu pc,
     project_info pi, -- project name
     project_info pi2, -- contest_fee
     project_info pi3, -- billing account
     tt_project ttp,
     tt_client_project ttcp,
     tt_client ttc,
    table (multiset((select  p.project_id, MAX(NVL(actual_end_time, scheduled_end_time)) as completion_time from project_phase ph, project p, project_category_lu pcl
                where phase_type_id = decode (pcl.project_type_id, 1, 10, 2, 10, 3 , 4 ) and pcl.project_category_id = p.project_category_id and ph.project_id = p.project_id
                GROUP BY p.project_id))) ct

where  pmd.component_project_id = p.project_id
   and pmd.payment_type_id = pt.payment_type_id
   and pmd.installment_number = 1
   AND NOT pmd.payment_status_id IN (65,68, 69)
   and p.project_status_id = ps.project_status_id
  and p.project_category_id = pc.project_category_id
  and p.project_category_id IN (:pcids)
  and p.project_id = ct.project_id
  and p.project_id = pi.project_id
  and pi.project_info_type_id = 6
  and p.project_id = pi2.project_id
  and pi2.project_info_type_id = 31
  and p.project_id = pi3.project_id
  and pi3.project_info_type_id = 32
  and pi3.value = ttp.project_id
  and ttp.project_id = ttcp.project_id
  and ttcp.client_id = ttc.client_id
  and p.project_status_id != 3 and p.project_category_id != 27
  and ttc.client_id = DECODE(:clientid, 0, ttc.client_id, :clientid)
  and ttp.project_id = DECODE(:billingaccountid, 0, ttp.project_id, :billingaccountid)
  and p.tc_direct_project_id = tdp.project_id
  and tdp.project_id = DECODE(:tcdirectid, 0, tdp.project_id, :tcdirectid)
  and (pm.create_date BETWEEN TO_DATE(:sdt, '%Y-%m-%d %H:%M:%S') AND TO_DATE(:edt, '%Y-%m-%d %H:%M:%S'))
group by 1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23


union


SELECT pmd2.create_date payment_date,
       p.project_id as contest_id,
       ttc.name client,
       ttp.name billing_project_name,
       tdp.name direct_project_name,
       (select max (scheduled_start_time) from project_phase where phase_type_id = 1 and project_id = p.project_id) as launch_date,
       ct.completion_time completion_date,
       DECODE(pc.name, 'UI Prototype Competition', 'UI Prototype', 'Assembly Competition', 'Assembly', 'RIA Build Competition', 'RIA Build', 'Test Suites', 'Test Suites', 'Test Scenarios', 'Test Scenarios',  pc.name) category,
       pi.value as contest_name,
       CASE
       WHEN ps.project_status_id not in (1,2,3)
          THEN 'Finished'
       WHEN not exists(select actual_start_time from project_phase pp where pp.project_id = p.project_id and pp.phase_type_id = 1 and pp.actual_start_time <= current )
          THEN 'Scheduled'
       WHEN (select actual_start_time from project_phase pp where pp.project_id = p.project_id and pp.phase_type_id = 1 and pp.actual_start_time <= current ) <= current
          THEN 'Active'
       ELSE
          'Active'
       END as contest_status,

        case when p.project_status_id in (9, 10) and exists (select * from project_phase where project_id = p.project_id and phase_type_id = 1 and phase_status_id in (2,3))
            then CAST(pi2.value AS DECIMAL(10,2))
            when p.project_status_id in (9, 10) and not exists (select * from project_phase where project_id = p.project_id and phase_type_id = 1 and phase_status_id in (2,3))
            then 0
            else CAST(pi2.value AS DECIMAL(10,2)) end as contest_fee,

  SUM(case when p.project_status_id  in (1,7)
        and exists (select phase_type_id from project_phase ph, project_category_lu pcl
                where phase_type_id = decode (pcl.project_type_id, 1, 10, 2, 10, 3 , 4 )
                and pcl.project_category_id = p.project_category_id and ph.project_id = p.project_id and phase_status_id = 3)
   then
      NVL((SELECT sum(total_amount)
       FROM  payment_detail pmd, payment pm
        WHERE pmd.component_project_id = p.project_id and pmd.installment_number = 1
        and pm.most_recent_detail_id = pmd.payment_detail_id
        AND NOT pmd.payment_status_id IN (65, 68, 69)), 0)
    +
    NVL((SELECT sum(pmd2.total_amount)
           FROM  payment_detail pmd,
                 payment pm LEFT OUTER JOIN payment_detail pmd2 on pm.payment_id = pmd2.parent_payment_id,
                 payment pm2
            WHERE pmd.component_project_id = p.project_id and pmd2.installment_number = 1
            and pm.most_recent_detail_id = pmd.payment_detail_id
            and pm2.most_recent_detail_id = pmd2.payment_detail_id
            AND NOT pmd2.payment_status_id IN (65, 68, 69)), 0)
     +
    nvl((select nvl(sum (cast (nvl (pi30.value, '0') as DECIMAL (10,2))), 0) from project_info pi30, project_info pi26
        where pi30.project_info_type_id = 30 and pi26.project_info_type_id = 26 and pi26.project_id = pi30.project_id
        and pi26.value = 'On'
        and pi26.project_id =  p.project_id ), 0)
  else NVL((SELECT sum(total_amount)
       FROM  payment_detail pmd, payment pm
        WHERE pmd.component_project_id = p.project_id and pmd.installment_number = 1
        and pm.most_recent_detail_id = pmd.payment_detail_id
        AND NOT pmd.payment_status_id IN (65, 68, 69)), 0)
    +
    NVL((SELECT sum(pmd2.total_amount)
           FROM  payment_detail pmd,
                 payment pm LEFT OUTER JOIN payment_detail pmd2 on pm.payment_id = pmd2.parent_payment_id,
                 payment pm2
            WHERE pmd.component_project_id = p.project_id and pmd2.installment_number = 1
            and pm.most_recent_detail_id = pmd.payment_detail_id
            and pm2.most_recent_detail_id = pmd2.payment_detail_id
            AND NOT pmd2.payment_status_id IN (65, 68, 69)), 0)
  end) as actual_total_member_costs,

       pt.payment_type_desc,
    CASE WHEN pmd2.payment_type_id in (24)
         THEN 'Reliability'
         ELSE 'Misc'
    END as line_item_category,
    CASE WHEN pmd.payment_type_id in (23,37,46,47, 45, 57)
         THEN pmd.jira_issue_id
         ELSE ''
    END as reference_id,
    pmd2.total_amount as line_item_amount,
     ttc.client_id,
     ttp.project_id billing_project_id,
    tdp.project_id direct_project_id,

case when p.project_status_id  in (1,7)
    and exists (select phase_type_id from project_phase ph, project_category_lu pcl
                where phase_type_id = decode (pcl.project_type_id, 1, 10, 2, 10, 3 , 4 )
                and pcl.project_category_id = p.project_category_id and ph.project_id = p.project_id and phase_status_id = 3)
then
nvl((select nvl(sum (cast (nvl (pi30.value, '0') as DECIMAL (10,2))), 0) from project_info pi30, project_info pi26
        where pi30.project_info_type_id = 30 and pi26.project_info_type_id = 26 and pi26.project_id = pi30.project_id
        and pi26.value = 'On'
        and pi26.project_id =  p.project_id ), 0)
else 0 end as digital_run,

        p.project_category_id,
        pmd.payment_detail_id,

case when pc.project_type_id = 3 then 1
else 0 end as is_studio
FROM payment pm
        INNER JOIN payment_detail pmd ON pm.most_recent_detail_id = pmd.payment_detail_id
        INNER JOIN (payment_detail pmd2 JOIN payment pm2 on pm2.most_recent_detail_id = pmd2.payment_detail_id
                                            AND pmd2.payment_type_id in (24) AND NOT pmd2.payment_status_id IN (65, 68, 69))
                   on pm.payment_id = pmd2.parent_payment_id,
     payment_type_lu pt,
     project p,
     tc_direct_project tdp,
     project_status_lu ps,
     project_category_lu pc,
     project_info pi, -- project name
     project_info pi2, -- contest_fee
     project_info pi3, -- billing account
     tt_project ttp,
     tt_client_project ttcp,
     tt_client ttc,
     table (multiset((select  p.project_id, MAX(NVL(actual_end_time, scheduled_end_time)) as completion_time from project_phase ph, project p, project_category_lu pcl
                where phase_type_id = decode (pcl.project_type_id, 1, 10, 2, 10, 3 , 4 ) and pcl.project_category_id = p.project_category_id and ph.project_id = p.project_id
                GROUP BY p.project_id))) ct

where  pmd.component_project_id = p.project_id
   and pmd.payment_type_id = pt.payment_type_id
   and pmd.installment_number = 1
   AND NOT pmd.payment_status_id IN (65,68, 69)
   and p.project_status_id = ps.project_status_id
  and p.project_category_id = pc.project_category_id
  and p.project_category_id IN (:pcids)
  and p.project_id = ct.project_id
  and p.project_id = pi.project_id
  and pi.project_info_type_id = 6
  and p.project_id = pi2.project_id
  and pi2.project_info_type_id = 31
  and p.project_id = pi3.project_id
  and pi3.project_info_type_id = 32
  and pi3.value = ttp.project_id
  and ttp.project_id = ttcp.project_id
  and ttcp.client_id = ttc.client_id
  and p.project_status_id != 3 and p.project_category_id != 27
  and ttc.client_id = DECODE(:clientid, 0, ttc.client_id, :clientid)
  and ttp.project_id = DECODE(:billingaccountid, 0, ttp.project_id, :billingaccountid)
  and p.tc_direct_project_id = tdp.project_id
  and tdp.project_id = DECODE(:tcdirectid, 0, tdp.project_id, :tcdirectid)
  and (pmd2.create_date BETWEEN TO_DATE(:sdt, '%Y-%m-%d %H:%M:%S') AND TO_DATE(:edt, '%Y-%m-%d %H:%M:%S'))
group by 1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23]]>
    </sql-query>
</hibernate-mapping>