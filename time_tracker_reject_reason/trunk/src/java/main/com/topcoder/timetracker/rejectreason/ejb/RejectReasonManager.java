/*
 * Copyright (C) 2007 TopCoder Inc., All Rights Reserved.
 */
package com.topcoder.timetracker.rejectreason.ejb;

import com.topcoder.naming.jndiutility.JNDIUtils;

import com.topcoder.search.builder.filter.Filter;

import com.topcoder.timetracker.rejectreason.RejectReason;
import com.topcoder.timetracker.rejectreason.RejectReasonDAOException;

import com.topcoder.util.config.ConfigManager;
import com.topcoder.util.config.ConfigManagerException;
import com.topcoder.util.config.UnknownNamespaceException;

import javax.ejb.CreateException;
import javax.naming.NamingException;


/**
 * <p>
 * This is a Business Delegate/Service Locator that may be used within a J2EE application. It is responsible for
 * looking up the local interface of the SessionBean for RejectReasonDAO, and delegating any calls to the bean.
 * </p>
 *
 * <p>
 * <b>Thread Safety:</b> This class is thread safe, since all state is modified at construction.
 * </p>
 *
 * @author wangqing, TCSDEVELOPER
 * @version 3.2
 */
public class RejectReasonManager {
    /** The key to retrieve context name through ConfigManager. */
    private static final String CONTEXT_NAME_KEY = "context_name";

    /** This is the local interface for the RejectReasonDAO business services. All business calls are delegated here. */
    private final RejectReasonDAOLocal local;

    /**
     * <p>
     * Constructor that accepts configuration from the specified ConfigManager namespace.
     * </p>
     *
     * @param namespace The namespace to use.
     *
     * @throws IllegalArgumentException if namespace is null or an empty String.
     * @throws RejectReasonDAOConfigurationException if a problem occurs while constructing the instance.
     */
    public RejectReasonManager(String namespace) throws RejectReasonDAOConfigurationException {
        if (namespace == null) {
            throw new IllegalArgumentException("The namespace is null.");
        }

        if (namespace.trim().length() == 0) {
            throw new IllegalArgumentException("The namespace is empty.");
        }

        // Lookup RejectReasonDAOLocalHome object
        try {
            String contextName = ConfigManager.getInstance().getString(namespace, CONTEXT_NAME_KEY);
            Object object = null;

            if ((contextName == null) || (contextName.trim().length() == 0)) {
                // No context name configured, use default
                object = JNDIUtils.getDefaultContext().lookup(RejectReasonDAOLocalHome.EJB_REF_HOME);
            } else {
                object = JNDIUtils.getContext(contextName).lookup(RejectReasonDAOLocalHome.EJB_REF_HOME);
            }

            if (object == null) {
                throw new RejectReasonDAOConfigurationException("The home object configured is null.");
            }

            if (!(object instanceof RejectReasonDAOLocalHome)) {
                throw new RejectReasonDAOConfigurationException(
                    "The home object configured should be an instance of RejectReasonDAOLocalHome.");
            }

            local = ((RejectReasonDAOLocalHome) object).create();
        } catch (UnknownNamespaceException une) {
            throw new RejectReasonDAOConfigurationException("The namespace '" + namespace + "' is unknown.", une);
        } catch (ConfigManagerException cme) {
            throw new RejectReasonDAOConfigurationException(
                "The JNDI Utility component is not configured properly.", cme);
        } catch (NamingException ne) {
            throw new RejectReasonDAOConfigurationException(
                "Error occurred while looking up object from JNDI context.", ne);
        } catch (CreateException ce) {
            throw new RejectReasonDAOConfigurationException(
                "Error occurred while creating local reject reason manager.", ce);
        }
    }

    /**
     * <p>
     * Creates a data store entry for the given Reject Reason. An id is automatically generated by the DAO and assigned
     * to the reason. The RejectReason is also considered to have been created by the specified username. If the
     * argument isAudit is true, insert the corresponding audit record in data store.
     * </p>
     *
     * @param rejectReason the RejectReason to be persistent in the data store
     * @param username the username of the user responsible for creating the RejectReason entry within the data store.
     * @param isAudit indicates audit or not.
     *
     * @return the same rejectReason Object, with an assigned id, creationDate, modificationDate, creationUser and
     *         modificationUser assigned appropriately (none null).
     *
     * @throws IllegalArgumentEException if the rejectReason or username is null, or if username is an empty String, or
     *         if the company id of the reject reason is not set.
     * @throws RejectReasonDAOException if a problem occurs while accessing the data store.
     * @throws RejectReasonDAOConfigurationException if any required environment variables can't be found.
     */
    public RejectReason createRejectReason(RejectReason rejectReason, String username, boolean isAudit)
        throws RejectReasonDAOException {
        return local.createRejectReason(rejectReason, username, isAudit);
    }

    /**
     * <p>
     * Retrieves a RejectReason from the data store with the provided id. If no RejectReason with that id exists, then
     * a null is returned.
     * </p>
     *
     * @param id the id of the RejectReason to retrieve from the data store.
     *
     * @return the retrieved RejectReason object or null if there is no corresponding RejectReason.
     *
     * @throws IllegalArgumentException if id is less than or equals to zero.
     * @throws RejectReasonDAOException if a problem occurs while accessing the data store.
     * @throws RejectReasonDAOConfigurationException if any required environment variables can't be found.
     */
    public RejectReason retrieveRejectReason(long id) throws RejectReasonDAOException {
        return local.retrieveRejectReason(id);
    }

    /**
     * <p>
     * Updates the given RejectReason in the data store. The RejectReason is considered to have been modified by the
     * specified username. If the argument isAudit is true, insert the corresponding audit record in data store.
     * </p>
     *
     * @param rejectReason the RejectReason entity to modify.
     * @param username the username of the user responsible for performing the update.
     * @param isAudit indicates audit or not.
     *
     * @throws IllegalArgumentEException if the rejectReason or username is null, or if username is an empty String.
     * @throws RejectReasonDAOException if a problem occurs while accessing the data store.
     * @throws RejectReasonNotFoundException if the RejectReason to update was not found in the data store.
     * @throws RejectReasonDAOConfigurationException if any required environment variables can't be found.
     */
    public void updateRejectReason(RejectReason rejectReason, String username, boolean isAudit)
        throws RejectReasonDAOException {
        local.updateRejectReason(rejectReason, username, isAudit);
    }

    /**
     * <p>
     * Removes the specified RejectReason from the data store. If the argument isAudit is true, insert the
     * corresponding audit record in data store.
     * </p>
     *
     * @param rejectReason the rejectReason to delete.
     * @param username the username of the user responsible for performing the deletion.
     * @param isAudit indicates audit or not.
     *
     * @throws IllegalArgumentException if the rejectReason is null.
     * @throws RejectReasonDAOException if a problem occurs while accessing the data store.
     * @throws RejectReasonNotFoundException if the RejectReason to delete was not found in the data store.
     * @throws RejectReasonDAOConfigurationException if any required environment variables can't be found.
     */
    public void deleteRejectReason(RejectReason rejectReason, String username, boolean isAudit)
        throws RejectReasonDAOException {
        local.deleteRejectReason(rejectReason, username, isAudit);
    }

    /**
     * <p>
     * Enumerates all the RejectReasons that are present within the data store. If no record found an empty array will
     * be return.
     * </p>
     *
     * @return a list of all the RejectReasons within the data store.
     *
     * @throws RejectReasonDAOException if a problem occurs while accessing the data store.
     * @throws RejectReasonDAOConfigurationException if any required environment variables can't be found.
     */
    public RejectReason[] listRejectReasons() throws RejectReasonDAOException {
        return local.listRejectReasons();
    }

    /**
     * <p>
     * Returns a list of all the RejectReasons within the datastore that satisfy the filters that are provided. If no
     * record found an empty array will be return. The filters are defined using classes from the Search Builder
     * component.
     * </p>
     *
     * @param filter the filter that is used as criterion to facilitate the search..
     *
     * @return a list of RejectReasons that satisfy the search criterion.
     *
     * @throws IllegalArgumentException if the filter is null.
     * @throws RejectReasonDAOException if a problem occurs while accessing the data store.
     * @throws RejectReasonDAOConfigurationException if any required environment variables can't be found.
     */
    public RejectReason[] searchRejectReasons(Filter filter)
        throws RejectReasonDAOException {
        return local.searchRejectReasons(filter);
    }
}
