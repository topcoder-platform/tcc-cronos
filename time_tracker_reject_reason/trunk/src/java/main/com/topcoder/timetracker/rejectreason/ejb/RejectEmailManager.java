/*
 * Copyright (C) 2007 TopCoder Inc., All Rights Reserved.
 */
package com.topcoder.timetracker.rejectreason.ejb;

import com.topcoder.naming.jndiutility.JNDIUtils;

import com.topcoder.search.builder.filter.Filter;

import com.topcoder.timetracker.rejectreason.RejectEmail;
import com.topcoder.timetracker.rejectreason.RejectEmailDAOException;

import com.topcoder.util.config.ConfigManager;
import com.topcoder.util.config.ConfigManagerException;
import com.topcoder.util.config.UnknownNamespaceException;

import javax.naming.NamingException;


/**
 * <p>
 * This is a Business Delegate/Service Locator that may be used within a J2EE application. It is responsible for
 * looking up the local interface of the SessionBean for RejectEmailDAO, and delegating any calls to the bean.
 * </p>
 *
 * <p>
 * <b>Thread Safety:</b> This class is thread safe, since all state is modified at construction.
 * </p>
 *
 * @author wangqing, TCSDEVELOPER
 * @version 3.2
 */
public class RejectEmailManager {
    /** The key to retrieve context name through ConfigManager. */
    private static final String CONTEXT_NAME_KEY = "context_name";

    /** This is the local interface for the RejectEmailDAO business services. All business calls are delegated here. */
    private final RejectEmailDAOLocal local;

    /**
     * <p>
     * Constructor that accepts configuration from the specified ConfigManager namespace. The 'context_name' property
     * is retrieved from ConfigManager and is used to get JNDI context (by JNDI Utility component), if this property
     * is missed, the default context is used.
     * </p>
     *
     * @param namespace The namespace to use.
     *
     * @throws IllegalArgumentException if namespace is null or an empty String.
     * @throws RejectEmailDAOConfigurationException if a problem occurs while constructing the instance.
     */
    public RejectEmailManager(String namespace) throws RejectEmailDAOConfigurationException {
        if (namespace == null) {
            throw new IllegalArgumentException("The namespace is null.");
        }

        if (namespace.trim().length() == 0) {
            throw new IllegalArgumentException("The namespace is empty.");
        }

        // Lookup RejectEmailDAOLocalHome object
        try {
            String contextName = ConfigManager.getInstance().getString(namespace, CONTEXT_NAME_KEY);

            Object object = null;

            if ((contextName == null) || (contextName.trim().length() == 0)) {
                // No context name configured, use default
                object = JNDIUtils.getDefaultContext().lookup(RejectEmailDAOLocalHome.EJB_REF_HOME);
            } else {
                object = JNDIUtils.getContext(contextName).lookup(RejectEmailDAOLocalHome.EJB_REF_HOME);
            }

            if (object == null) {
                throw new RejectEmailDAOConfigurationException("The home object configured is null.");
            }

            if (!(object instanceof RejectEmailDAOLocalHome)) {
                throw new RejectEmailDAOConfigurationException(
                    "The home object configured should be an instance of RejectEmailDAOLocalHome.");
            }

            local = ((RejectEmailDAOLocalHome) object).create();
        } catch (UnknownNamespaceException e) {
            throw new RejectEmailDAOConfigurationException("The namespace '" + namespace + "' is unknown.", e);
        } catch (ConfigManagerException e) {
            throw new RejectEmailDAOConfigurationException("The JNDI Utility component is not configured properly.", e);
        } catch (NamingException e) {
            throw new RejectEmailDAOConfigurationException("Error occurred while looking up object from JNDI context.",
                e);
        }
    }

    /**
     * <p>
     * Creates a data store entry for the given Reject Email. An id is automatically generated by the DAO and assigned
     * to the Email. The RejectEmail is also considered to have been created by the specified username. If the
     * argument isAudit is true, insert the corresponding audit record in data store.
     * </p>
     *
     * @param rejectEmail the rejectEmail to create within the data store.
     * @param username the username of the user responsible for creating the RejectEmail entry within the data store.
     * @param isAudit indicates audit or not.
     *
     * @return the same rejectEmail Object, with an assigned id, creationDate, modificationDate, creationUser and
     *         modificationUser assigned appropriately.
     *
     * @throws IllegalArgumentException if the rejectEmail or username is null, or if username is an empty String, or
     *         the company id or body of the passed in reject email is not set.
     * @throws RejectEmailDAOException if a problem occurs while accessing the data store.
     * @throws RejectEmailDAOConfigurationException if any required environment variables can't be found.
     */
    public RejectEmail createRejectEmail(RejectEmail rejectEmail, String username, boolean isAudit)
        throws RejectEmailDAOException {
        return local.createRejectEmail(rejectEmail, username, isAudit);
    }

    /**
     * <p>
     * Retrieves a RejectEmail from the data store with the provided id. If no RejectEmail with that id exists, then a
     * null is returned.
     * </p>
     *
     * @param id the id of the RejectEmail to retrieve from the data store.
     *
     * @return the retrieved RejectEmail object or null if there is no corresponding RejectEmail.
     *
     * @throws IllegalArgumentException if id is less than or equals to zero.
     * @throws RejectEmailDAOException if a problem occurs while accessing the data store.
     * @throws RejectEmailDAOConfigurationException if any required environment variables can't be found.
     */
    public RejectEmail retrieveRejectEmail(long id) throws RejectEmailDAOException {
        return local.retrieveRejectEmail(id);
    }

    /**
     * <p>
     * Updates the given RejectEmail in the data store. The RejectEmail is considered to have been modified by the
     * specified username. If the argument isAudit is true, insert the corresponding audit record in data store.
     * </p>
     *
     * @param rejectEmail the RejectEmail entity to modify.
     * @param username the username of the user responsible for performing the update.
     * @param isAudit indicates audit or not.
     *
     * @throws IllegalArgumentException if the rejectEmail or username is null, or if username is an empty String, or
     *         if the body of rejectEmail is not set.
     * @throws RejectEmailDAOException if a problem occurs while accessing the data store.
     * @throws RejectEmailNotFoundException if the RejectEmail to update was not found in the data store.
     * @throws RejectEmailDAOConfigurationException if any required environment variables can't be found.
     */
    public void updateRejectEmail(RejectEmail rejectEmail, String username, boolean isAudit)
        throws RejectEmailDAOException {
        local.updateRejectEmail(rejectEmail, username, isAudit);
    }

    /**
     * <p>
     * Removes the specified RejectEmail from the data store. If the argument isAudit is true, insert the corresponding
     * audit record in data store.
     * </p>
     *
     * @param rejectEmail the rejectEmail to delete.
     * @param username the username of the user responsible for performing the deletion.
     * @param isAudit indicates audit or not.
     *
     * @throws IllegalArgumentException if the rejectEmail is null.
     * @throws RejectEmailDAOException if a problem occurs while accessing the data store.
     * @throws RejectEmailNotFoundException if the RejectEmail to delete was not found in the data store.
     * @throws RejectEmailDAOConfigurationException if any required environment variables can't be found.
     */
    public void deleteRejectEmail(RejectEmail rejectEmail, String username, boolean isAudit)
        throws RejectEmailDAOException {
        local.deleteRejectEmail(rejectEmail, username, isAudit);
    }

    /**
     * <p>
     * Enumerates all the RejectEmails that are present within the data store. If no record found an empty array will
     * be return.
     * </p>
     *
     * @return a list of all the RejectEmails within the data store.
     *
     * @throws RejectEmailDAOException if a problem occurs while accessing the datastore.
     * @throws RejectEmailDAOConfigurationException if any required environment variables can't be found.
     */
    public RejectEmail[] listRejectEmails() throws RejectEmailDAOException {
        return local.listRejectEmails();
    }

    /**
     * <p>
     * Returns a list of all the RejectEmails within the data store that satisfy the filters that are provided. If no
     * record found an empty array will be return. The filters are defined using classes from the Search Builder
     * component.
     * </p>
     *
     * @param filter the filter that is used as criterion to facilitate the search.
     *
     * @return a list of RejectEmails that satisfy the search criterion.
     *
     * @throws IllegalArgumentException if the filter is null.
     * @throws RejectEmailDAOException if a problem occurs while accessing the datastore.
     * @throws RejectEmailDAOConfigurationException if any required environment variables can't be found.
     */
    public RejectEmail[] searchRejectEmails(Filter filter)
        throws RejectEmailDAOException {
        return local.searchRejectEmails(filter);
    }
}
