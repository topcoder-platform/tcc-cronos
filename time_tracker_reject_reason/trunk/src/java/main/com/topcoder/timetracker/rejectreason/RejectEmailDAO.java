/*
 * Copyright (C) 2007 TopCoder Inc., All Rights Reserved.
 */
package com.topcoder.timetracker.rejectreason;

import com.topcoder.search.builder.filter.Filter;


/**
 * <p>
 * This interface defines the necessary methods that a RejectEmail DAO should support. Create, Retrieve, Update, Delete
 * and Enumerate (CRUDE) methods are provided. There is also a search method that utilizes Filter classes from the
 * Search Builder component.
 * </p>
 *
 * <p>
 * <b>Thread Safety:</b> Implementations should be thread safe.
 * </p>
 *
 * @author wangqing, TCSDEVELOPER
 * @version 3.2
 */
public interface RejectEmailDAO {
    /**
     * <p>
     * This is a constant for a search filter field name for the Company Id which a RejectEmail belongs to.
     * </p>
     *
     * <p>
     * Filters from the Search Builder component may use this constant when building their search parameters.
     * Implementations of the RejectEmailDAO interface should be able to recognize search filters bearing the provided
     * constant and adjust their searches according to the searchRejectEmails method.
     * </p>
     */
    public static final String SEARCH_COMPANY_ID = "search_company_id";

    /**
     * <p>
     * This is a constant for a search filter field name for the Body of the RejectEmail.
     * </p>
     *
     * <p>
     * Filters from the Search Builder component may use this constant when building their search parameters.
     * Implementations of the RejectEmailDAO interface should be able to recognize search filters bearing the provided
     * constant and adjust their searches according to the searchRejectEmails method.
     * </p>
     */
    public static final String SEARCH_BODY = "search_body";

    /**
     * <p>
     * This is a constant for a search filter field name for the Reject Email's Date of Creation.
     * </p>
     *
     * <p>
     * Filters from the Search Builder component may use this constant when building their search parameters.
     * Implementations of the RejectEmailDAO interface should be able to recognize search filters bearing the provided
     * constant and adjust their searches according to the searchRejectEmails method.
     * </p>
     */
    public static final String SEARCH_CREATED_DATE = "search_created_date";

    /**
     * <p>
     * This is a constant for a search filter field name for the Reject Email's User Creator.
     * </p>
     *
     * <p>
     * Filters from the Search Builder component may use this constant when building their search parameters.
     * Implementations of the RejectEmailDAO interface should be able to recognize search filters bearing the provided
     * constant and adjust their searches according to the searchRejectEmails method.
     * </p>
     */
    public static final String SEARCH_CREATED_USER = "search_created_user";

    /**
     * <p>
     * This is a constant for a search filter field name for the Reject Email's Last Date of Modification.
     * </p>
     *
     * <p>
     * Filters from the Search Builder component may use this constant when building their search parameters.
     * Implementations of the RejectEmailDAO interface should be able to recognize search filters bearing the provided
     * constant and adjust their searches according to the searchRejectEmails method.
     * </p>
     */
    public static final String SEARCH_MODIFICATION_DATE = "search_modification_date";

    /**
     * <p>
     * This is a constant for a search filter field name for the Reject Email's Last User of Modification.
     * </p>
     *
     * <p>
     * Filters from the Search Builder component may use this constant when building their search parameters.
     * Implementations of the RejectEmailDAO interface should be able to recognize search filters bearing the provided
     * constant and adjust their searches according to the searchRejectEmails method.
     * </p>
     */
    public static final String SEARCH_MODIFICATION_USER = "search_modification_user";

    /**
     * <p>
     * Creates a data store entry for the given Reject Email. An id is automatically generated by the DAO and assigned
     * to the Email. The RejectEmail is also considered to have been created by the specified username. If the
     * argument isAudit is true, insert the corresponding audit record in data store.
     * </p>
     *
     * @param rejectEmail the rejectEmail to create within the data store.
     * @param username the username of the user responsible for creating the RejectEmail entry within the data store.
     * @param isAudit indicates audit or not.
     *
     * @return the same rejectEmail Object, with an assigned id, creationDate, modificationDate, creationUser and
     *         modificationUser assigned appropriately.
     *
     * @throws IllegalArgumentException if the rejectEmail or username is null, or if username is an empty String, or
     *         the company id or body of the passed in reject email is not set.
     * @throws RejectEmailDAOException if a problem occurs while accessing the data store.
     */
    public RejectEmail createRejectEmail(RejectEmail rejectEmail, String username, boolean isAudit)
        throws RejectEmailDAOException;

    /**
     * <p>
     * Retrieves a RejectEmail from the data store with the provided id. If no RejectEmail with that id exists, then a
     * null is returned.
     * </p>
     *
     * @param id the id of the RejectEmail to retrieve from the data store.
     *
     * @return the retrieved RejectEmail object or null if there is no corresponding RejectEmail.
     *
     * @throws IllegalArgumentException if id is less than or equals to zero.
     * @throws RejectEmailDAOException if a problem occurs while accessing the data store.
     */
    public RejectEmail retrieveRejectEmail(long id) throws RejectEmailDAOException;

    /**
     * <p>
     * Updates the given RejectEmail in the data store. The RejectEmail is considered to have been modified by the
     * specified username. If the argument isAudit is true, insert the corresponding audit record in data store.
     * </p>
     *
     * @param rejectEmail the RejectEmail entity to modify.
     * @param username the username of the user responsible for performing the update.
     * @param isAudit indicates audit or not.
     *
     * @throws IllegalArgumentException if the rejectEmail or username is null, or if username is an empty String, or
     *         if the body of rejectEmail is not set.
     * @throws RejectEmailDAOException if a problem occurs while accessing the data store.
     * @throws RejectEmailNotFoundException if the RejectEmail to update was not found in the data store.
     */
    public void updateRejectEmail(RejectEmail rejectEmail, String username, boolean isAudit)
        throws RejectEmailDAOException;

    /**
     * <p>
     * Removes the specified RejectEmail from the data store. If the argument isAudit is true, insert the corresponding
     * audit record in data store.
     * </p>
     *
     * @param rejectEmail the rejectEmail to delete.
     * @param username the username of the user responsible for performing the deletion.
     * @param isAudit indicates audit or not.
     *
     * @throws IllegalArgumentException if the rejectEmail is null.
     * @throws RejectEmailDAOException if a problem occurs while accessing the data store.
     * @throws RejectEmailNotFoundException if the RejectEmail to delete was not found in the data store.
     */
    public void deleteRejectEmail(RejectEmail rejectEmail, String username, boolean isAudit)
        throws RejectEmailDAOException;

    /**
     * <p>
     * Enumerates all the RejectEmails that are present within the data store. If no record found an empty array will
     * be return.
     * </p>
     *
     * @return a list of all the RejectEmails within the data store.
     *
     * @throws RejectEmailDAOException if a problem occurs while accessing the datastore.
     */
    public RejectEmail[] listRejectEmails() throws RejectEmailDAOException;

    /**
     * <p>
     * Returns a list of all the RejectEmails within the data store that satisfy the filters that are provided. If no
     * record found an empty array will be return. The filters are defined using classes from the Search Builder
     * component.
     * </p>
     *
     * @param filter the filter that is used as criterion to facilitate the search.
     *
     * @return a list of RejectEmails that satisfy the search criterion.
     *
     * @throws IllegalArgumentException if the filter is null.
     * @throws RejectEmailDAOException if a problem occurs while accessing the datastore.
     */
    public RejectEmail[] searchRejectEmails(Filter filter)
        throws RejectEmailDAOException;
}
