/*
 * Copyright (c) 2006, TopCoder, Inc. All rights reserved.
 */
package com.topcoder.timetracker.common;

import com.topcoder.search.builder.filter.Filter;

/**
 * <p>
 * This interface defines the necessary methods that a rate DAO should support. Create, Retrieve, Update,
 * Delete and Enumerate (CRUDE) methods are provided. There is also a search method that utilizes Filter classes
 * from the Search Builder 1.2 component.
 * </p>
 * <p>
 * Thread Safety: - Implementations need not necessarily be thread safe. Each implementation should specify whether
 * it is thread-safe or not. The application should pick the correct implementation for it's requirements.
 * </p>
 *
 * @author TheCois
 * @author TheCois
 * @version 2.0
 */
public interface RateDAO {

    /**
     * <p>
     * This is a constant for a search filter field name for the Company Id which a rate belongs to.
     * </p>
     * <p>
     * Filters from the Search Builder component may use this constant when building their search parameters.
     * Implementations of the RateDAO interface should be able to recognize search filters bearing the
     * provided constant and adjust their searches according to the searchRates method.
     * </p>
     *
     */
    String SEARCH_COMPANY_ID = "search_company_id";

    /**
     * <p>
     * This is a constant for a search filter field name for the Description of the rate.
     * </p>
     * <p>
     * Filters from the Search Builder component may use this constant when building their search parameters.
     * Implementations of the RateDAO interface should be able to recognize search filters bearing the
     * provided constant and adjust their searches according to the searchRates method.
     * </p>
     *
     */
    String SEARCH_DESCRIPTION = "search_description";

    /**
     * <p>
     * This is a constant for a search filter field name for the  rate's Date of Creation.
     * </p>
     * <p>
     * Filters from the Search Builder component may use this constant when building their search parameters.
     * Implementations of the RateDAO interface should be able to recognize search filters bearing the
     * provided constant and adjust their searches according to the searchRates method.
     * </p>
     *
     */
    String SEARCH_CREATED_DATE = "search_created_date";

    /**
     * <p>
     * This is a constant for a search filter field name for the  rate's User Creator.
     * </p>
     * <p>
     * Filters from the Search Builder component may use this constant when building their search parameters.
     * Implementations of the RateDAO interface should be able to recognize search filters bearing the
     * provided constant and adjust their searches according to the searchRates method.
     * </p>
     *
     */
    String SEARCH_CREATED_USER = "search_created_user";

    /**
     * <p>
     * This is a constant for a search filter field name for the  rate's Last Date of Modification.
     * </p>
     * <p>
     * Filters from the Search Builder component may use this constant when building their search parameters.
     * Implementations of the RateDAO interface should be able to recognize search filters bearing the
     * provided constant and adjust their searches according to the searchRates method.
     * </p>
     *
     */
    String SEARCH_MODIFICATION_DATE = "search_modification_date";

    /**
     * <p>
     * This is a constant for a search filter field name for the  rate's Last User of Modification.
     * </p>
     * <p>
     * Filters from the Search Builder component may use this constant when building their search parameters.
     * Implementations of the RateDAO interface should be able to recognize search filters bearing the
     * provided constant and adjust their searches according to the searchRates method.
     * </p>
     *
     */
    String SEARCH_MODIFICATION_USER = "search_modification_user";

    /**
     * <p>
     * Creates a datastore entry for the given  rate. An id is automatically generated by the DAO and
     * assigned to the Email. The rate is also considered to have been created by the specified username.
     * </p>
     *
     *
     *
     * @return The same Rate Object, with an assigned id, creationDate, modificationDate, creationUser and
     *         modificationUser assigned appropriately.
     * @param rate The rate to create within the datastore.
     * @param username The username of the user responsible for creating the rate entry within the
     *        datastore.
     * @throws IllegalArgumentException if the rate or username is null, or if username is an empty String.
     * @throws RateDAOException if a problem occurs while accessing the datastore.
     */
    Rate createRate(Rate rate, String username) throws RateDAOException;

    /**
     * <p>
     * Retrieves a rate from the datastore with the provided id. If no rate with that id exists, then
     * a null is returned.
     * </p>
     *
     *
     *
     * @return the  rate.
     * @param id The id of the rate to retrieve from the datastore.
     * @throws IllegalArgumentException if id is <=0
     * @throws RateDAOException if a problem occurs while accessing the datastore.
     */
    Rate retrieveRate(long id) throws RateDAOException;

    /**
     * <p>
     * Updates the given rate in the data store. The rate is considered to have been modified by the
     * specified username.
     * </p>
     *
     *
     *
     * @param rate The rate entity to modify.
     * @param username The username of the user responsible for performing the update.
     * @throws IllegalArgumentException if the rate is null, or the username is null, or the username is an
     *         empty String.
     * @throws RateDAOException if a problem occurs while accessing the datastore.
     * @throws RateNotFoundException if the rate to update was not found in the data store.
     */
    void updateRate(Rate rate, String username) throws RateDAOException,
            RateNotFoundException;

    /**
     * <p>
     * Removes the specified rate from the data store.
     * </p>
     *
     *
     *
     * @param rate The rate to delete.
     * @throws IllegalArgumentException if the rate is null.
     * @throws RateDAOException if a problem occurs while accessing the datastore.
     * @throws RateNotFoundException if the rate to delete was not found in the data store.
     */
    void deleteRate(Rate rate) throws RateDAOException, RateNotFoundException;

    /**
     * <p>
     * Enumerates all the rates that are present within the data store.
     * </p>
     *
     *
     *
     * @return A list of all the rates within the data store.
     * @throws RateDAOException if a problem occurs while accessing the datastore.
     */
    Rate[] listRates() throws RateDAOException;

    /**
     * <p>
     * Returns a list of all the RejectReasons within the datastore that satisfy the filters that are provided. The
     * filters are defined using classes from the Search Builder v1.2 component and com.topcoder.timetracker.
     * common.search package.
     * </p>
     *
     *
     *
     * @return A list of RejectReasons that satisfy the search criterion.
     * @param filter The filter that is used as criterion to facilitate the search..
     * @throws IllegalArgumentException if the filter is null.
     * @throws RateDAOException if a problem occurs while accessing the datastore.
     */
    Rate[] searchRates(Filter filter) throws RateDAOException;
}
