/*
 * Copyright (C) 2006 TopCoder Inc., All Rights Reserved.
 *
 * ValidationOutputType.java
 */
package com.topcoder.apps.screening.applications.specification;

import com.topcoder.util.collection.typesafeenum.Enum;

/**
 * <p>
 * This class is a type safe enumeration of possible types of the validation output.
 * Two types are currently defined: ERROR - for error messages related to problems
 * with the submission and REPORT - for reports generated based on the introspected XMI data.
 * </p>
 *
 * <p>
 * Thread-Safety: This class is immutable and therefore thread-safe.
 * </p>
 *
 * @author nicka81, TCSDEVELOPER
 * @version 1.0
 */
public class ValidationOutputType extends Enum {

    /**
     * A public static constant for the error output type. This type is assigned to error messages
     * generated by the validators.
     */
    public static final ValidationOutputType ERROR = new ValidationOutputType("error");

    /**
     * A public static constant for the report output type. This type is assigned to reports
     * (for example, activity diagram paths report) generated by validators.
     */
    public static final ValidationOutputType REPORT = new ValidationOutputType("report");

    /**
     * This private variable contains a string description of the output type.
     * It is assigned in the constructor and never changed afterwards.
     * The type value can be retrieved using public getType() method.
     * The value can never be null or an empty string.
     */
    private final String type;

    /**
     * <p>
     * Constructor. Creates a validation output type with the given description.
     * </p>
     *
     * <p>
     * The constructor is private  to ensure that new types can't be added by the user.
     * </p>
     *
     * @param type the type description
     * @throws IllegalArgumentException if the parameter is null or an empty string
     */
    private ValidationOutputType(String type) {
        if (type == null) {
            throw new IllegalArgumentException("Type must not be null.");
        }
        if (type.trim().length() == 0) {
            throw new IllegalArgumentException("Type must not be empty.");
        }
        this.type = type;
    }

    /**
     * <p>
     * Compares with the given object parameter.
     * </p>
     *
     * <p>
     * True is returned if parameter is an instance of ValidationOutputType, and types are equal.
     * </p>
     *
     * @param obj the object to compare with
     * @return true if this is equal to the given object, otherwise false
     */
    public boolean equals(Object obj) {
        if (!(obj instanceof ValidationOutputType)) {
            return false;
        }
        return type.equals(((ValidationOutputType) obj).getType());
    }

    /**
     * <p>
     * This method calculates the instance hash code.
     * </p>
     *
     * @return the hash code value
     */
    public int hashCode() {
        //type's hash code is used
        return type.hashCode();
    }

    /**
     * <p>
     * Returns type which describes the output type.
     * </p>
     *
     * @return the type description
     */
    public String getType() {
        return type;
    }
}