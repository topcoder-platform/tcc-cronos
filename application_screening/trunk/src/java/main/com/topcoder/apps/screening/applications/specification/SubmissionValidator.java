/*
 * Copyright (C) 2006 TopCoder Inc., All Rights Reserved.
 *
 * SubmissionValidator.java
 */
package com.topcoder.apps.screening.applications.specification;

/**
 * <p>
 * This class defines an abstract submission validator. It declares an abstract validateSubmission method
 * which returns a static array of ValidationOutput items. Each item in the returned array is either an
 * error message or a report related to the validated XMI. Implementation of this method must be provided
 * by all concrete validators.
 * The submission is considered valid if no ERROR items were generated by validateSubmission() method.
 * </p>
 *
 * <p>
 * Thread-Safety: this class is stateless and therefore thread-safe. The component assumes
 * that all concrete implementations of the validateSubmission method will be thread-safe.
 * </p>
 *
 * @author nicka81, TCSDEVELOPER
 * @version 1.0
 */
public abstract class SubmissionValidator {

    /**
     * <p>
     * Default class constructor.
     * </p>
     */
    protected SubmissionValidator() {
        // does nothing
    }

    /**
     * <p>
     * This method should validate the given object.
     * </p>
     *
     * @param obj the object to validate
     * @return true if the object is valid, otherwise not
     */
    public boolean valid(Object obj) {
        if (!(obj instanceof Submission)) {
            return false;
        }
        ValidationOutput []outputs = validateSubmission((Submission) obj);
        for (int i = 0, n = outputs.length; i < n; i++) {
            if (outputs[i].getType() == ValidationOutputType.ERROR) {
                return false;
            }
        }
        return true;
    }

    /**
     * <p>
     * This is a declaration of the actual validation method. The method behavior should be defined by each
     * concrete implementation.
     * </p>
     *
     * @param submission the sumbission to validate
     * @return the validation output
     */
    public abstract ValidationOutput[] validateSubmission(Submission submission);
}