<?xml version="1.0"?>
<project name="TopCoder Contest Service Facade Build" default="dist" basedir=".">
    <property file="${basedir}/build.version"/>
    <property file="${basedir}/build.properties"/>

    <!-- Override these in ../topcoder_global.properties -->
    <property name="javac.encoding" value="UTF-8"/>
    <property name="libdir" value="lib"/>
    <property name="tcs_libdir" value="${libdir}/tcs"/>
    <property name="ext_libdir" value="${libdir}/third_party"/>

    <property name="debug" value="off"/>
    <property name="verbose" value="no"/>

    <!-- DIRECTORY SETUP -->
    <property name="srcdir" value="src"/>
    <property name="docsdir" value="docs"/>
    <property name="configdir" value="conf"/>
    <property name="testlogdir" value="log"/>
    <property name="test_reflib" value="test_reflib"/>
    <property name="testfiles" value="test_files"/>
    <property name="javadocsdir" value="${docsdir}/javadocs"/>
    <property name="webdir" value="${srcdir}/web"/>
    <property name="reports" value="${testlogdir}/reports"/>

    <!-- Import the dependencies of this build file -->
    <import file="${basedir}/build-dependencies.xml"/>

    <!-- COMPONENT PARAMETERS -->
    <property name="component" value="${component.name}"/>
    <property name="package" value="${component.package}"/>
    <property name="packagedir" value="${component.packagedir}"/>
    <property name="distfilename" value="${component.distfilename}"/>
    <property name="component_version"
              value="${component.version.major}.${component.version.minor}.${component.version.micro}"/>
    <property name="component_path" value="${distfilename}/${component_version}"/>

    <!-- DIRECTORY STRUCTURE -->
    <property name="javasrc" value="${srcdir}/java"/>
    <property name="javamain" value="${javasrc}/main"/>
    <property name="javatests" value="${javasrc}/tests"/>

    <property name="builddir" value="build"/>
    <property name="build_classdir" value="${builddir}/classes"/>
    <property name="build_testclassdir" value="${builddir}/testClasses"/>
    <property name="build_targetclassdir" value="${builddir}/targetclasses"/>
    <property name="build_distdir" value="${builddir}/dist"/>
    <property name="build_docsdir" value="${builddir}/${docsdir}"/>
    <property name="build_javadocsdir" value="${builddir}/${javadocsdir}"/>
    <property name="build_tcsdistdir" value="${build_distdir}/${distfilename}-${component_version}"/>
    <property name="manifest_file_path" value="${build_tcsdistdir}/META-INF/"/>
    <property name="manifest_file" value="${manifest_file_path}/MANIFEST.MF"/>

    <!-- COMPONENT DISTRIBUTION STRUCTURE -->
    <property name="dist_lib" value="${build_distdir}/lib/tcs"/>
    <property name="dist_docs" value="${build_tcsdistdir}/${docsdir}"/>
    <property name="dist_javadocs" value="${build_tcsdistdir}/${javadocsdir}"/>
    <property name="dist_coverage" value="${dist_docs}/coverage"/>

    <!-- NAME FOR .JAR FILES -->
    <property name="component.jar" value="${builddir}/${distfilename}.jar"/>
    <property name="component.war" value="${builddir}/${distfilename}.war"/>
    <property name="component.ear" value="${builddir}/${distfilename}.ear"/>

    <!-- classes needed to compile the production code -->
    <path id="buildlibs">
        <path refid="component.tcs-dependencies"/>
        <path refid="component.3rdParty-dependencies"/>
    </path>

    <!-- classes needed to compile the test code -->
    <path id="test.build.classpath">
        <path refid="component.test.3rdParty-dependencies"/>
        <fileset dir="${basedir}">
            <include name="${test_reflib}/**/*.jar"/>
            <include name="${test_reflib}/**/*.zip"/>
        </fileset>
        <path refid="buildlibs"/>
        <pathelement location="${build_classdir}"/>
        <pathelement location="${configdir}"/>
        <pathelement location="${testfiles}"/>
    </path>

    <target name="compile">
        <mkdir dir="${build_classdir}"/>
        <javac srcdir="${javamain}" destdir="${build_classdir}" includes="${packagedir}/**" debug="true"
               verbose="${verbose}" includeAntRuntime="no" encoding="${javac.encoding}">
            <classpath refid="buildlibs"/>
        </javac>
    </target>

    <target name="compile_tests" depends="compile">
        <mkdir dir="${build_testclassdir}"/>
        <javac srcdir="${javatests}" destdir="${build_testclassdir}" includes="${packagedir}/**"
               debug="true" verbose="${verbose}" includeAntRuntime="no" encoding="${javac.encoding}">
            <classpath refid="test.build.classpath"/>
        </javac>
    </target>

    <macrodef name="test.setup">
        <sequential/>
    </macrodef>

    <macrodef name="test.execute">
        <!-- standard test task -->
        <sequential>
            <mkdir dir="${testlogdir}"/>
            <junit fork="true" haltonerror="false" maxmemory="1024M">
                <classpath location="${build_testclassdir}"/>
                <classpath refid="test.build.classpath"/>
                <test name="${package}.UnitTests" todir="${testlogdir}">
                    <formatter type="plain" usefile="true"/>
                    <formatter type="xml" usefile="true"/>
                </test>
            </junit>
        </sequential>
    </macrodef>

    <macrodef name="test.teardown">
        <sequential/>
    </macrodef>

    <target name="test" depends="compile_tests">
        <test.setup/>
        <test.execute/>
        <test.teardown/>
    </target>

    <target name="reports" depends="test">
        <mkdir dir="${reports}"/>
        <junitreport todir="${reports}">
            <fileset dir="${testlogdir}">
                <include name="*.xml"/>
            </fileset>
            <report format="frames" todir="${reports}"/>
        </junitreport>
    </target>

    <target name="manifest">
        <mkdir dir="${manifest_file_path}"/>
        <manifest file="${manifest_file}">
            <attribute name="Component-Vendor" value="TopCoder Inc."/>
            <attribute name="Component-Name" value="${component}"/>
            <attribute name="Component-Version" value="${component_version}.${component.version.build}"/>
        </manifest>
    </target>

    <target name="dist" depends="compile, manifest">
        <mkdir dir="${dist_lib}/${component_path}"/>
        <jar jarfile="${component.jar}" manifest="${manifest_file}" basedir="${build_classdir}">
            <metainf dir="conf/ejb"/>
            <metainf dir="conf/ws" includes="jboss-wsse-server.xml"/>
        </jar>
    </target>

    <target name="clean">
        <delete dir="${builddir}"/>
    </target>

    <!-- Builds the WAR file for Demo web application -->
    <target name="war">
        <war warfile="${component.war}" webxml="${configdir}/web/WEB-INF/web.xml">
            <webinf dir="${configdir}/web/WEB-INF" includes="jboss-web.xml"/>
            <webinf dir="${configdir}/ws" includes="jboss-wsse-client.xml"/>
            <fileset dir="${webdir}">
                <include name="**/*.jsp"/>
            </fileset>
        </war>
    </target>

    <target name="ear" depends="clean,dist,war">
        <!-- Copy the libraries -->
        <mkdir dir="${build_distdir}"/>
        <copy todir="${build_distdir}" flatten="true">
            <fileset dir="${libdir}/tcs" includes="**/*.jar"/>
            <fileset dir="${libdir}/third_party" includes="**/*.jar"/>
        </copy>
        <copy todir="${build_distdir}" flatten="true">
            <fileset dir="${builddir}" includes="*.jar"/>
            <fileset dir="${builddir}" includes="*.war"/>
        </copy>

        <!-- Copy configuration files -->
        <copy todir="${build_distdir}">
            <fileset dir="${configdir}" includes="informix-ds.xml" />
        </copy>

        <ear basedir="${build_distdir}" destfile="${component.ear}" appxml="${configdir}/META-INF/application.xml"
             includes="**/*.jar **/*.xml **/*.war">
            <metainf file="${configdir}/META-INF/jboss-app.xml"/>
        </ear>
    </target>

    <!-- ************************************************************************** -->
    <!-- ************ DEPLOYMENT RELATED TARGETS  ******************************* -->
    <!-- ************************************************************************** -->
    <macrodef name="deployCommand">
        <!-- standard deploy command -->
        <sequential>
            <antcall target="ear"/>
            <copy todir="${jboss_home}/server/${jboss_config_name}/deploy" overwrite="true" file="${component.ear}"/>
        </sequential>
    </macrodef>

    <target name="deploy">
        <deployCommand/>
    </target>

    <target name="deploy_login_module">
        <copy todir="${jboss_home}/server/${jboss_config_name}/conf" overwrite="true">
            <fileset dir="${configdir}" includes="JBossLoginModuleConfig.properties"/>
            <fileset dir="${configdir}" includes="JBossLoginModule.xml"/>
            <fileset dir="${configdir}" includes="CockpitUserPersistence.xml"/>
            <fileset dir="${configdir}" includes="security.keystore"/>
            <fileset dir="${configdir}" includes="**/*.properties"/>
        </copy>
    </target>

    <!-- ************************************************************************** -->
    <!-- ************ END DEPLOYMENT RELATED TARGETS  *************************** -->
    <!-- ************************************************************************** -->

    <!-- Import the macro definitions used to override standard behaviour of
    some of the targets of this build file. -->
    <import file="${basedir}/build-override.xml" optional="true"/>
</project>