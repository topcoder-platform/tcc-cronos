/*
 * Copyright (C) 2011 TopCoder Inc., All Rights Reserved.
 */
package com.topcoder.payments.amazonfps.model;

import java.io.Serializable;
import java.math.BigDecimal;

import com.topcoder.payments.amazonfps.Helper;

/**
 * <p>
 * The <code>Authorization</code> class is a container for information about a single authorization stored in
 * persistence. It is a simple JavaBean (POJO) that provides getters and setters for all private attributes and
 * performs no argument validation in the setters.
 * </p>
 *
 * <strong>Thread Safety:</strong> This class is mutable and not thread safe.
 *
 * @author saarixx, KennyAlive
 * @version 1.0
 */
public class Authorization implements Serializable {
    /**
     * The class's serialVersionUID for the serialization runtime.
     */
    private static final long serialVersionUID = 3961867825498324458L;

    /**
     * The ID of the authorization.
     * Can be any value. Has getter and setter.
     */
    private long id;

    /**
     * The value indicating whether the authorization can be used for multiple payments.
     * Can be any value. Has getter and setter.
     */
    private boolean multipleUseAuthorization;

    /**
     * The token ID generated by <i>Amazon Co-Branded Service</i>. It is null when token ID is not yet obtained.
     * Can be any value. Has getter and setter.
     */
    private String tokenId;

    /**
     * The authorized amount left in USD. It is calculated as the total authorized amount deducted by sum of
     * amounts of all successful reservations and completed payments. Can be any value. Has getter and setter.
     */
    private BigDecimal authorizedAmountLeft;

    /**
     * The authorized fixed future payments amount in USD. If not null, only payments with the specified amount
     * are authorized. Can be any value. Has getter and setter.
     */
    private BigDecimal authorizedFixedFutureAmount;

    /**
     * The value indicating whether the authorization is cancelled.
     * Can be any value. Has getter and setter.
     */
    private boolean cancelled;

    /**
     * Constructs new {@code Authorization} instance.
     */
    public Authorization() {
        // Empty
    }

    /**
     * Retrieves the ID of the authorization.
     *
     * @return the ID of the authorization
     */
    public long getId() {
        return id;
    }

    /**
     * Sets the ID of the authorization.
     *
     * @param id
     *       the ID of the authorization
     */
    public void setId(long id) {
        this.id = id;
    }

    /**
     * Retrieves the value indicating whether the authorization can be used for multiple payments.
     *
     * @return the value indicating whether the authorization can be used for multiple payments
     */
    public boolean isMultipleUseAuthorization() {
        return multipleUseAuthorization;
    }

    /**
     * Sets the value indicating whether the authorization can be used for multiple payments.
     *
     * @param multipleUseAuthorization
     *              the value indicating whether the authorization can be used for multiple payments
     */
    public void setMultipleUseAuthorization(boolean multipleUseAuthorization) {
        this.multipleUseAuthorization = multipleUseAuthorization;
    }

    /**
     * Retrieves the token ID generated by <i>Amazon Co-Branded Service</i>.
     *
     * @return the token ID generated by <i>Amazon Co-Branded Service</i>
     */
    public String getTokenId() {
        return tokenId;
    }

    /**
     * Sets the token ID generated by <i>Amazon Co-Branded Service</i>.
     *
     * @param tokenId
     *              the token ID generated by <i>Amazon Co-Branded Service</i>
     */
    public void setTokenId(String tokenId) {
        this.tokenId = tokenId;
    }

    /**
     * Retrieves the authorized amount left in USD.
     *
     * @return the authorized amount left in USD
     */
    public BigDecimal getAuthorizedAmountLeft() {
        return authorizedAmountLeft;
    }

    /**
     * Sets the authorized amount left in USD.
     *
     * @param authorizedAmountLeft
     *              the authorized amount left in USD
     */
    public void setAuthorizedAmountLeft(BigDecimal authorizedAmountLeft) {
        this.authorizedAmountLeft = authorizedAmountLeft;
    }

    /**
     * Retrieves the authorized fixed future payments amount in USD.
     *
     * @return the authorized fixed future payments amount in USD
     */
    public BigDecimal getAuthorizedFixedFutureAmount() {
        return authorizedFixedFutureAmount;
    }

    /**
     * Sets the authorized fixed future payments amount in USD.
     *
     * @param authorizedFixedFutureAmount
     *              the authorized fixed future payments amount in USD
     */
    public void setAuthorizedFixedFutureAmount(BigDecimal authorizedFixedFutureAmount) {
        this.authorizedFixedFutureAmount = authorizedFixedFutureAmount;
    }

    /**
     * Retrieves the value indicating whether the authorization is cancelled.
     *
     * @return the value indicating whether the authorization is cancelled
     */
    public boolean isCancelled() {
        return cancelled;
    }

    /**
     * Sets the value indicating whether the authorization is cancelled.
     *
     * @param cancelled
     *              the value indicating whether the authorization is cancelled
     */
    public void setCancelled(boolean cancelled) {
        this.cancelled = cancelled;
    }

    /**
     * Converts this object to string presentation.
     *
     * @return string presentation of this object
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{id: ").append(id)
          .append(", multipleUseAuthorization: ").append(multipleUseAuthorization)
          .append(", tokenId: ").append(Helper.toString(tokenId))
          .append(", authorizedAmountLeft: ").append(Helper.toString(authorizedAmountLeft))
          .append(", authorizedFixedFutureAmount: ").append(Helper.toString(authorizedFixedFutureAmount))
          .append(", cancelled: ").append(cancelled)
          .append("}");
        return sb.toString();
    }
}
